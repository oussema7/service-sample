/*
 * Legal Entity Name client API
 * OpenApi Endpoints for managing Legal Entities Ancestors. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */


package com.microsphere.onboarding.client.api.listener.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * ResiliationPutRequest
 */
@JsonPropertyOrder({
  ResiliationPutRequest.JSON_PROPERTY_SUBSCRIPTION_ID,
  ResiliationPutRequest.JSON_PROPERTY_MOTIVE
})
@javax.annotation.Generated(value = "com.backbase.oss.codegen.java.BoatJavaCodeGen", date = "2024-11-14T00:08:54.559235200+01:00[Africa/Tunis]")
public  class ResiliationPutRequest {
  public static final String JSON_PROPERTY_SUBSCRIPTION_ID = "subscriptionId";
  private String subscriptionId;

  /**
   * Gets or Sets motive
   */
  public enum MotiveEnum {
    CLIENT("CLIENT"),
    
    ABONNEMENT("ABONNEMENT"),
    
    AUTOMATIQUE("AUTOMATIQUE");

    private String value;

    MotiveEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MotiveEnum fromValue(String value) {
      for (MotiveEnum b : MotiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MOTIVE = "motive";
  private MotiveEnum motive;


  public ResiliationPutRequest subscriptionId(String subscriptionId) {
    
    this.subscriptionId = subscriptionId;
    return this;
  }

   /**
   * Get subscriptionId
   * @return subscriptionId
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSubscriptionId() {
    return subscriptionId;
  }


  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public ResiliationPutRequest motive(MotiveEnum motive) {
    
    this.motive = motive;
    return this;
  }

   /**
   * Get motive
   * @return motive
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MOTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MotiveEnum getMotive() {
    return motive;
  }


  public void setMotive(MotiveEnum motive) {
    this.motive = motive;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResiliationPutRequest resiliationPutRequest = (ResiliationPutRequest) o;
    return Objects.equals(this.subscriptionId, resiliationPutRequest.subscriptionId) &&
        Objects.equals(this.motive, resiliationPutRequest.motive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subscriptionId, motive);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResiliationPutRequest {\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    motive: ").append(toIndentedString(motive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

