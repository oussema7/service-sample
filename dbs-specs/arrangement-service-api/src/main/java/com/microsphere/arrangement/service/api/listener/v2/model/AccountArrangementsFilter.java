/*
 * Arrangement Manager Service API
 * This API allows other DBS services to operate on products
 *
 * The version of the OpenAPI document: 2.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */


package com.microsphere.arrangement.service.api.listener.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.microsphere.arrangement.service.api.listener.v2.model.AdditionalProperties;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * AccountArrangementsFilter
 */
@JsonPropertyOrder({
  AccountArrangementsFilter.JSON_PROPERTY_ARRANGEMENT_IDS,
  AccountArrangementsFilter.JSON_PROPERTY_IGNORE_ARRANGEMENT_IDS,
  AccountArrangementsFilter.JSON_PROPERTY_BBANS,
  AccountArrangementsFilter.JSON_PROPERTY_BANK_BRANCH_CODES,
  AccountArrangementsFilter.JSON_PROPERTY_IBAN,
  AccountArrangementsFilter.JSON_PROPERTY_EXTERNAL_ARRANGEMENT_IDS,
  AccountArrangementsFilter.JSON_PROPERTY_EXTERNAL_TRANSFER_ALLOWED,
  AccountArrangementsFilter.JSON_PROPERTY_CREDIT_ACCOUNT,
  AccountArrangementsFilter.JSON_PROPERTY_DEBIT_ACCOUNT,
  AccountArrangementsFilter.JSON_PROPERTY_PARENT_IDS,
  AccountArrangementsFilter.JSON_PROPERTY_EXTERNAL_PARENT_IDS,
  AccountArrangementsFilter.JSON_PROPERTY_PRODUCT_KIND_IDS,
  AccountArrangementsFilter.JSON_PROPERTY_EXTERNAL_PRODUCT_KIND_IDS,
  AccountArrangementsFilter.JSON_PROPERTY_PRODUCT_KIND_NAME,
  AccountArrangementsFilter.JSON_PROPERTY_SEARCH_TERM,
  AccountArrangementsFilter.JSON_PROPERTY_LEGAL_ENTITY_IDS,
  AccountArrangementsFilter.JSON_PROPERTY_USER_ID,
  AccountArrangementsFilter.JSON_PROPERTY_FAVORITE,
  AccountArrangementsFilter.JSON_PROPERTY_SUB_ENTITIES_FETCHES,
  AccountArrangementsFilter.JSON_PROPERTY_CUSTOM_ORDER,
  AccountArrangementsFilter.JSON_PROPERTY_FAVORITE_FIRST,
  AccountArrangementsFilter.JSON_PROPERTY_SOURCE_ID,
  AccountArrangementsFilter.JSON_PROPERTY_LOCALE,
  AccountArrangementsFilter.JSON_PROPERTY_FROM,
  AccountArrangementsFilter.JSON_PROPERTY_SIZE,
  AccountArrangementsFilter.JSON_PROPERTY_ORDER_BY,
  AccountArrangementsFilter.JSON_PROPERTY_DIRECTION
})
@javax.annotation.Generated(value = "com.backbase.oss.codegen.java.BoatJavaCodeGen", date = "2024-11-14T00:30:51.050595100+01:00[Africa/Tunis]")
public  class AccountArrangementsFilter extends AdditionalProperties {
  public static final String JSON_PROPERTY_ARRANGEMENT_IDS = "arrangementIds";
  private List<String> arrangementIds = null;

  public static final String JSON_PROPERTY_IGNORE_ARRANGEMENT_IDS = "ignoreArrangementIds";
  private List<String> ignoreArrangementIds = null;

  public static final String JSON_PROPERTY_BBANS = "bbans";
  private List<String> bbans = null;

  public static final String JSON_PROPERTY_BANK_BRANCH_CODES = "bankBranchCodes";
  private List<String> bankBranchCodes = null;

  public static final String JSON_PROPERTY_IBAN = "iban";
  private String iban;

  public static final String JSON_PROPERTY_EXTERNAL_ARRANGEMENT_IDS = "externalArrangementIds";
  private List<String> externalArrangementIds = null;

  public static final String JSON_PROPERTY_EXTERNAL_TRANSFER_ALLOWED = "externalTransferAllowed";
  private Boolean externalTransferAllowed;

  public static final String JSON_PROPERTY_CREDIT_ACCOUNT = "creditAccount";
  private Boolean creditAccount;

  public static final String JSON_PROPERTY_DEBIT_ACCOUNT = "debitAccount";
  private Boolean debitAccount;

  public static final String JSON_PROPERTY_PARENT_IDS = "parentIds";
  private List<String> parentIds = null;

  public static final String JSON_PROPERTY_EXTERNAL_PARENT_IDS = "externalParentIds";
  private List<String> externalParentIds = null;

  public static final String JSON_PROPERTY_PRODUCT_KIND_IDS = "productKindIds";
  private List<Integer> productKindIds = null;

  public static final String JSON_PROPERTY_EXTERNAL_PRODUCT_KIND_IDS = "externalProductKindIds";
  private List<String> externalProductKindIds = null;

  public static final String JSON_PROPERTY_PRODUCT_KIND_NAME = "productKindName";
  private String productKindName;

  public static final String JSON_PROPERTY_SEARCH_TERM = "searchTerm";
  private String searchTerm;

  public static final String JSON_PROPERTY_LEGAL_ENTITY_IDS = "legalEntityIds";
  private List<String> legalEntityIds = null;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  private String userId;

  public static final String JSON_PROPERTY_FAVORITE = "favorite";
  private Boolean favorite;

  /**
   * Gets or Sets subEntitiesFetches
   */
  public enum SubEntitiesFetchesEnum {
    LEGALENTITIES("legalEntities"),
    
    USERFAVORITEARRANGEMENTS("userFavoriteArrangements");

    private String value;

    SubEntitiesFetchesEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SubEntitiesFetchesEnum fromValue(String value) {
      for (SubEntitiesFetchesEnum b : SubEntitiesFetchesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SUB_ENTITIES_FETCHES = "subEntitiesFetches";
  private List<SubEntitiesFetchesEnum> subEntitiesFetches = null;

  public static final String JSON_PROPERTY_CUSTOM_ORDER = "customOrder";
  private Boolean customOrder;

  public static final String JSON_PROPERTY_FAVORITE_FIRST = "favoriteFirst";
  private Boolean favoriteFirst;

  public static final String JSON_PROPERTY_SOURCE_ID = "sourceId";
  private String sourceId;

  public static final String JSON_PROPERTY_LOCALE = "locale";
  private String locale;

  public static final String JSON_PROPERTY_FROM = "from";
  private Integer from = 0;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Integer size = 10;

  /**
   * Gets or Sets orderBy
   */
  public enum OrderByEnum {
    NAME("name"),
    
    BANKALIAS("bankAlias"),
    
    BOOKEDBALANCE("bookedBalance"),
    
    AVAILABLEBALANCE("availableBalance"),
    
    CREDITLIMIT("creditLimit"),
    
    IBAN("IBAN"),
    
    BBAN("BBAN"),
    
    CURRENCY("currency"),
    
    EXTERNALTRANSFERALLOWED("externalTransferAllowed"),
    
    URGENTTRANSFERALLOWED("urgentTransferAllowed"),
    
    ACCRUEDINTEREST("accruedInterest"),
    
    NUMBER("Number"),
    
    PRINCIPALAMOUNT("principalAmount"),
    
    CURRENTINVESTMENTVALUE("currentInvestmentValue"),
    
    LEGALENTITYID("legalEntityId"),
    
    PRODUCTID("productId"),
    
    PRODUCTNUMBER("productNumber"),
    
    ACCOUNTOPENINGDATE("accountOpeningDate"),
    
    ACCOUNTINTERESTRATE("accountInterestRate"),
    
    VALUEDATEBALANCE("valueDateBalance"),
    
    CREDITLIMITUSAGE("creditLimitUsage"),
    
    CREDITLIMITINTERESTRATE("creditLimitInterestRate"),
    
    CREDITLIMITEXPIRYDATE("creditLimitExpiryDate"),
    
    DEBITCARDS("debitCards"),
    
    STARTDATE("startDate"),
    
    TERMUNIT("termUnit"),
    
    TERMNUMBER("termNumber"),
    
    MATURITYDATE("maturityDate"),
    
    MATURITYAMOUNT("maturityAmount"),
    
    AUTORENEWALINDICATOR("autoRenewalIndicator"),
    
    INTERESTPAYMENTFREQUENCYUNIT("interestPaymentFrequencyUnit"),
    
    INTERESTPAYMENTFREQUENCYNUMBER("interestPaymentFrequencyNumber"),
    
    INTERESTSETTLEMENTACCOUNT("interestSettlementAccount"),
    
    OUTSTANDINGPRINCIPALAMOUNT("outstandingPrincipalAmount"),
    
    MONTHLYINSTALMENTAMOUNT("monthlyInstalmentAmount"),
    
    AMOUNTINARREAR("amountInArrear"),
    
    MINIMUMREQUIREDBALANCE("minimumRequiredBalance"),
    
    CREDITCARDACCOUNTNUMBER("creditCardAccountNumber"),
    
    VALIDTHRU("validThru"),
    
    APPLICABLEINTERESTRATE("applicableInterestRate"),
    
    REMAININGCREDIT("remainingCredit"),
    
    OUTSTANDINGPAYMENT("outstandingPayment"),
    
    MINIMUMPAYMENT("minimumPayment"),
    
    MINIMUMPAYMENTDUEDATE("minimumPaymentDueDate"),
    
    TOTALINVESTMENTVALUE("totalInvestmentValue"),
    
    ACCOUNTHOLDERADDRESSLINE1("accountHolderAddressLine1"),
    
    ACCOUNTHOLDERADDRESSLINE2("accountHolderAddressLine2"),
    
    ACCOUNTHOLDERSTREETNAME("accountHolderStreetName"),
    
    POSTCODE("postCode"),
    
    TOWN("town"),
    
    COUNTRYSUBDIVISION("countrySubDivision"),
    
    ACCOUNTHOLDERCOUNTRY("accountHolderCountry"),
    
    CREDITACCOUNT("creditAccount"),
    
    DEBITACCOUNT("debitAccount"),
    
    PRODUCTKINDNAME("productKindName"),
    
    SOURCEID("sourceId"),
    
    BIC("BIC"),
    
    PRODUCTTYPENAME("productTypeName");

    private String value;

    OrderByEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static OrderByEnum fromValue(String value) {
      for (OrderByEnum b : OrderByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ORDER_BY = "orderBy";
  private List<OrderByEnum> orderBy = null;

  /**
   * Gets or Sets direction
   */
  public enum DirectionEnum {
    ASC("ASC"),
    
    DESC("DESC");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DIRECTION = "direction";
  private DirectionEnum direction;


  public AccountArrangementsFilter arrangementIds(List<String> arrangementIds) {
    
    this.arrangementIds = arrangementIds;
    return this;
  }

  public AccountArrangementsFilter addArrangementIdsItem(String arrangementIdsItem) {
    if (this.arrangementIds == null) {
      this.arrangementIds = new ArrayList<>();
    }
    this.arrangementIds.add(arrangementIdsItem);
    return this;
  }

   /**
   * A list of arrangements ids for querying database
   * @return arrangementIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of arrangements ids for querying database")
  @JsonProperty(JSON_PROPERTY_ARRANGEMENT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getArrangementIds() {
    return arrangementIds;
  }


  public void setArrangementIds(List<String> arrangementIds) {
    this.arrangementIds = arrangementIds;
  }


  public AccountArrangementsFilter ignoreArrangementIds(List<String> ignoreArrangementIds) {
    
    this.ignoreArrangementIds = ignoreArrangementIds;
    return this;
  }

  public AccountArrangementsFilter addIgnoreArrangementIdsItem(String ignoreArrangementIdsItem) {
    if (this.ignoreArrangementIds == null) {
      this.ignoreArrangementIds = new ArrayList<>();
    }
    this.ignoreArrangementIds.add(ignoreArrangementIdsItem);
    return this;
  }

   /**
   *  A list of arrangements ids to ignore when querying database
   * @return ignoreArrangementIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = " A list of arrangements ids to ignore when querying database")
  @JsonProperty(JSON_PROPERTY_IGNORE_ARRANGEMENT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getIgnoreArrangementIds() {
    return ignoreArrangementIds;
  }


  public void setIgnoreArrangementIds(List<String> ignoreArrangementIds) {
    this.ignoreArrangementIds = ignoreArrangementIds;
  }


  public AccountArrangementsFilter bbans(List<String> bbans) {
    
    this.bbans = bbans;
    return this;
  }

  public AccountArrangementsFilter addBbansItem(String bbansItem) {
    if (this.bbans == null) {
      this.bbans = new ArrayList<>();
    }
    this.bbans.add(bbansItem);
    return this;
  }

   /**
   * A list of BBAN identifiers for querying database
   * @return bbans
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of BBAN identifiers for querying database")
  @JsonProperty(JSON_PROPERTY_BBANS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getBbans() {
    return bbans;
  }


  public void setBbans(List<String> bbans) {
    this.bbans = bbans;
  }


  public AccountArrangementsFilter bankBranchCodes(List<String> bankBranchCodes) {
    
    this.bankBranchCodes = bankBranchCodes;
    return this;
  }

  public AccountArrangementsFilter addBankBranchCodesItem(String bankBranchCodesItem) {
    if (this.bankBranchCodes == null) {
      this.bankBranchCodes = new ArrayList<>();
    }
    this.bankBranchCodes.add(bankBranchCodesItem);
    return this;
  }

   /**
   * A list of bank branch codes for querying database
   * @return bankBranchCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of bank branch codes for querying database")
  @JsonProperty(JSON_PROPERTY_BANK_BRANCH_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getBankBranchCodes() {
    return bankBranchCodes;
  }


  public void setBankBranchCodes(List<String> bankBranchCodes) {
    this.bankBranchCodes = bankBranchCodes;
  }


  public AccountArrangementsFilter iban(String iban) {
    
    this.iban = iban;
    return this;
  }

   /**
   * IBAN (internationally agreed system of identifying bank accounts across national borders) for querying database
   * @return iban
  **/
  @javax.annotation.Nullable
 @Size(min=5,max=34)  @ApiModelProperty(value = "IBAN (internationally agreed system of identifying bank accounts across national borders) for querying database")
  @JsonProperty(JSON_PROPERTY_IBAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIban() {
    return iban;
  }


  public void setIban(String iban) {
    this.iban = iban;
  }


  public AccountArrangementsFilter externalArrangementIds(List<String> externalArrangementIds) {
    
    this.externalArrangementIds = externalArrangementIds;
    return this;
  }

  public AccountArrangementsFilter addExternalArrangementIdsItem(String externalArrangementIdsItem) {
    if (this.externalArrangementIds == null) {
      this.externalArrangementIds = new ArrayList<>();
    }
    this.externalArrangementIds.add(externalArrangementIdsItem);
    return this;
  }

   /**
   * A list of external arrangements ids for querying database
   * @return externalArrangementIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of external arrangements ids for querying database")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_ARRANGEMENT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getExternalArrangementIds() {
    return externalArrangementIds;
  }


  public void setExternalArrangementIds(List<String> externalArrangementIds) {
    this.externalArrangementIds = externalArrangementIds;
  }


  public AccountArrangementsFilter externalTransferAllowed(Boolean externalTransferAllowed) {
    
    this.externalTransferAllowed = externalTransferAllowed;
    return this;
  }

   /**
   * External transfer allowed flag
   * @return externalTransferAllowed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "External transfer allowed flag")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_TRANSFER_ALLOWED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExternalTransferAllowed() {
    return externalTransferAllowed;
  }


  public void setExternalTransferAllowed(Boolean externalTransferAllowed) {
    this.externalTransferAllowed = externalTransferAllowed;
  }


  public AccountArrangementsFilter creditAccount(Boolean creditAccount) {
    
    this.creditAccount = creditAccount;
    return this;
  }

   /**
   * Credit account flag
   * @return creditAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Credit account flag")
  @JsonProperty(JSON_PROPERTY_CREDIT_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCreditAccount() {
    return creditAccount;
  }


  public void setCreditAccount(Boolean creditAccount) {
    this.creditAccount = creditAccount;
  }


  public AccountArrangementsFilter debitAccount(Boolean debitAccount) {
    
    this.debitAccount = debitAccount;
    return this;
  }

   /**
   * Debit account flag
   * @return debitAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Debit account flag")
  @JsonProperty(JSON_PROPERTY_DEBIT_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDebitAccount() {
    return debitAccount;
  }


  public void setDebitAccount(Boolean debitAccount) {
    this.debitAccount = debitAccount;
  }


  public AccountArrangementsFilter parentIds(List<String> parentIds) {
    
    this.parentIds = parentIds;
    return this;
  }

  public AccountArrangementsFilter addParentIdsItem(String parentIdsItem) {
    if (this.parentIds == null) {
      this.parentIds = new ArrayList<>();
    }
    this.parentIds.add(parentIdsItem);
    return this;
  }

   /**
   * A list of parent arrangements ids for querying database. Use to find child arrangements
   * @return parentIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of parent arrangements ids for querying database. Use to find child arrangements")
  @JsonProperty(JSON_PROPERTY_PARENT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getParentIds() {
    return parentIds;
  }


  public void setParentIds(List<String> parentIds) {
    this.parentIds = parentIds;
  }


  public AccountArrangementsFilter externalParentIds(List<String> externalParentIds) {
    
    this.externalParentIds = externalParentIds;
    return this;
  }

  public AccountArrangementsFilter addExternalParentIdsItem(String externalParentIdsItem) {
    if (this.externalParentIds == null) {
      this.externalParentIds = new ArrayList<>();
    }
    this.externalParentIds.add(externalParentIdsItem);
    return this;
  }

   /**
   * A list of external arrangements ids for querying database. Use to find child arrangements
   * @return externalParentIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of external arrangements ids for querying database. Use to find child arrangements")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_PARENT_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getExternalParentIds() {
    return externalParentIds;
  }


  public void setExternalParentIds(List<String> externalParentIds) {
    this.externalParentIds = externalParentIds;
  }


  public AccountArrangementsFilter productKindIds(List<Integer> productKindIds) {
    
    this.productKindIds = productKindIds;
    return this;
  }

  public AccountArrangementsFilter addProductKindIdsItem(Integer productKindIdsItem) {
    if (this.productKindIds == null) {
      this.productKindIds = new ArrayList<>();
    }
    this.productKindIds.add(productKindIdsItem);
    return this;
  }

   /**
   * An array of product kind ids. Deprecated since products kinds are static. Use externalProductKindIds instead.
   * @return productKindIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of product kind ids. Deprecated since products kinds are static. Use externalProductKindIds instead.")
  @JsonProperty(JSON_PROPERTY_PRODUCT_KIND_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getProductKindIds() {
    return productKindIds;
  }


  public void setProductKindIds(List<Integer> productKindIds) {
    this.productKindIds = productKindIds;
  }


  public AccountArrangementsFilter externalProductKindIds(List<String> externalProductKindIds) {
    
    this.externalProductKindIds = externalProductKindIds;
    return this;
  }

  public AccountArrangementsFilter addExternalProductKindIdsItem(String externalProductKindIdsItem) {
    if (this.externalProductKindIds == null) {
      this.externalProductKindIds = new ArrayList<>();
    }
    this.externalProductKindIds.add(externalProductKindIdsItem);
    return this;
  }

   /**
   * An array of external product kind ids
   * @return externalProductKindIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of external product kind ids")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_PRODUCT_KIND_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getExternalProductKindIds() {
    return externalProductKindIds;
  }


  public void setExternalProductKindIds(List<String> externalProductKindIds) {
    this.externalProductKindIds = externalProductKindIds;
  }


  public AccountArrangementsFilter productKindName(String productKindName) {
    
    this.productKindName = productKindName;
    return this;
  }

   /**
   * Product kind name
   * @return productKindName
  **/
  @javax.annotation.Nullable
 @Size(min=1,max=50)  @ApiModelProperty(value = "Product kind name")
  @JsonProperty(JSON_PROPERTY_PRODUCT_KIND_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductKindName() {
    return productKindName;
  }


  public void setProductKindName(String productKindName) {
    this.productKindName = productKindName;
  }


  public AccountArrangementsFilter searchTerm(String searchTerm) {
    
    this.searchTerm = searchTerm;
    return this;
  }

   /**
   * Full text search for the following arrangement attributes name,bankAlias,number,BBAN,IBAN,BIC,bankBranchCode and product attributes: productKindName, productTypeName
   * @return searchTerm
  **/
  @javax.annotation.Nullable
 @Size(max=256)  @ApiModelProperty(value = "Full text search for the following arrangement attributes name,bankAlias,number,BBAN,IBAN,BIC,bankBranchCode and product attributes: productKindName, productTypeName")
  @JsonProperty(JSON_PROPERTY_SEARCH_TERM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSearchTerm() {
    return searchTerm;
  }


  public void setSearchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
  }


  public AccountArrangementsFilter legalEntityIds(List<String> legalEntityIds) {
    
    this.legalEntityIds = legalEntityIds;
    return this;
  }

  public AccountArrangementsFilter addLegalEntityIdsItem(String legalEntityIdsItem) {
    if (this.legalEntityIds == null) {
      this.legalEntityIds = new ArrayList<>();
    }
    this.legalEntityIds.add(legalEntityIdsItem);
    return this;
  }

   /**
   * An array of legal Entities internal ids to filter by
   * @return legalEntityIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of legal Entities internal ids to filter by")
  @JsonProperty(JSON_PROPERTY_LEGAL_ENTITY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getLegalEntityIds() {
    return legalEntityIds;
  }


  public void setLegalEntityIds(List<String> legalEntityIds) {
    this.legalEntityIds = legalEntityIds;
  }


  public AccountArrangementsFilter userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * The user identifier. This parameter is not used for filtering arrangements, but only for selecting user preferences from a specific user. 
   * @return userId
  **/
  @javax.annotation.Nullable
 @Size(max=36)  @ApiModelProperty(value = "The user identifier. This parameter is not used for filtering arrangements, but only for selecting user preferences from a specific user. ")
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public AccountArrangementsFilter favorite(Boolean favorite) {
    
    this.favorite = favorite;
    return this;
  }

   /**
   * Favorite flag
   * @return favorite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Favorite flag")
  @JsonProperty(JSON_PROPERTY_FAVORITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFavorite() {
    return favorite;
  }


  public void setFavorite(Boolean favorite) {
    this.favorite = favorite;
  }


  public AccountArrangementsFilter subEntitiesFetches(List<SubEntitiesFetchesEnum> subEntitiesFetches) {
    
    this.subEntitiesFetches = subEntitiesFetches;
    return this;
  }

  public AccountArrangementsFilter addSubEntitiesFetchesItem(SubEntitiesFetchesEnum subEntitiesFetchesItem) {
    if (this.subEntitiesFetches == null) {
      this.subEntitiesFetches = new ArrayList<>();
    }
    this.subEntitiesFetches.add(subEntitiesFetchesItem);
    return this;
  }

   /**
   * an array of sub entities to fetch along with the root arrangement object: legalEntities, userFavoriteArrangements
   * @return subEntitiesFetches
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "an array of sub entities to fetch along with the root arrangement object: legalEntities, userFavoriteArrangements")
  @JsonProperty(JSON_PROPERTY_SUB_ENTITIES_FETCHES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SubEntitiesFetchesEnum> getSubEntitiesFetches() {
    return subEntitiesFetches;
  }


  public void setSubEntitiesFetches(List<SubEntitiesFetchesEnum> subEntitiesFetches) {
    this.subEntitiesFetches = subEntitiesFetches;
  }


  public AccountArrangementsFilter customOrder(Boolean customOrder) {
    
    this.customOrder = customOrder;
    return this;
  }

   /**
   * Parameter that identifies weather the returned list should be ordered by custom order/grouping
   * @return customOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Parameter that identifies weather the returned list should be ordered by custom order/grouping")
  @JsonProperty(JSON_PROPERTY_CUSTOM_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCustomOrder() {
    return customOrder;
  }


  public void setCustomOrder(Boolean customOrder) {
    this.customOrder = customOrder;
  }


  public AccountArrangementsFilter favoriteFirst(Boolean favoriteFirst) {
    
    this.favoriteFirst = favoriteFirst;
    return this;
  }

   /**
   * Parameter that sets favorite arrangements on top when true
   * @return favoriteFirst
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Parameter that sets favorite arrangements on top when true")
  @JsonProperty(JSON_PROPERTY_FAVORITE_FIRST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFavoriteFirst() {
    return favoriteFirst;
  }


  public void setFavoriteFirst(Boolean favoriteFirst) {
    this.favoriteFirst = favoriteFirst;
  }


  public AccountArrangementsFilter sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * The source ID
   * @return sourceId
  **/
  @javax.annotation.Nullable
 @Size(max=11)  @ApiModelProperty(value = "The source ID")
  @JsonProperty(JSON_PROPERTY_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceId() {
    return sourceId;
  }


  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public AccountArrangementsFilter locale(String locale) {
    
    this.locale = locale;
    return this;
  }

   /**
   * The locale used for searchTerm (e.g. nl_NL)
   * @return locale
  **/
  @javax.annotation.Nullable
 @Size(min=2,max=8)  @ApiModelProperty(value = "The locale used for searchTerm (e.g. nl_NL)")
  @JsonProperty(JSON_PROPERTY_LOCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    this.locale = locale;
  }


  public AccountArrangementsFilter from(Integer from) {
    
    this.from = from;
    return this;
  }

   /**
   * Page Number. Skip over pages of elements by specifying a start value for the query
   * minimum: 0
   * @return from
  **/
  @javax.annotation.Nullable
 @Min(0)  @ApiModelProperty(value = "Page Number. Skip over pages of elements by specifying a start value for the query")
  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFrom() {
    return from;
  }


  public void setFrom(Integer from) {
    this.from = from;
  }


  public AccountArrangementsFilter size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Limit the number of elements on the response.
   * minimum: 1
   * @return size
  **/
  @javax.annotation.Nullable
 @Min(1)  @ApiModelProperty(value = "Limit the number of elements on the response.")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public AccountArrangementsFilter orderBy(List<OrderByEnum> orderBy) {
    
    this.orderBy = orderBy;
    return this;
  }

  public AccountArrangementsFilter addOrderByItem(OrderByEnum orderByItem) {
    if (this.orderBy == null) {
      this.orderBy = new ArrayList<>();
    }
    this.orderBy.add(orderByItem);
    return this;
  }

   /**
   * Get orderBy
   * @return orderBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ORDER_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<OrderByEnum> getOrderBy() {
    return orderBy;
  }


  public void setOrderBy(List<OrderByEnum> orderBy) {
    this.orderBy = orderBy;
  }


  public AccountArrangementsFilter direction(DirectionEnum direction) {
    
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DirectionEnum getDirection() {
    return direction;
  }


  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountArrangementsFilter accountArrangementsFilter = (AccountArrangementsFilter) o;
    return Objects.equals(this.arrangementIds, accountArrangementsFilter.arrangementIds) &&
        Objects.equals(this.ignoreArrangementIds, accountArrangementsFilter.ignoreArrangementIds) &&
        Objects.equals(this.bbans, accountArrangementsFilter.bbans) &&
        Objects.equals(this.bankBranchCodes, accountArrangementsFilter.bankBranchCodes) &&
        Objects.equals(this.iban, accountArrangementsFilter.iban) &&
        Objects.equals(this.externalArrangementIds, accountArrangementsFilter.externalArrangementIds) &&
        Objects.equals(this.externalTransferAllowed, accountArrangementsFilter.externalTransferAllowed) &&
        Objects.equals(this.creditAccount, accountArrangementsFilter.creditAccount) &&
        Objects.equals(this.debitAccount, accountArrangementsFilter.debitAccount) &&
        Objects.equals(this.parentIds, accountArrangementsFilter.parentIds) &&
        Objects.equals(this.externalParentIds, accountArrangementsFilter.externalParentIds) &&
        Objects.equals(this.productKindIds, accountArrangementsFilter.productKindIds) &&
        Objects.equals(this.externalProductKindIds, accountArrangementsFilter.externalProductKindIds) &&
        Objects.equals(this.productKindName, accountArrangementsFilter.productKindName) &&
        Objects.equals(this.searchTerm, accountArrangementsFilter.searchTerm) &&
        Objects.equals(this.legalEntityIds, accountArrangementsFilter.legalEntityIds) &&
        Objects.equals(this.userId, accountArrangementsFilter.userId) &&
        Objects.equals(this.favorite, accountArrangementsFilter.favorite) &&
        Objects.equals(this.subEntitiesFetches, accountArrangementsFilter.subEntitiesFetches) &&
        Objects.equals(this.customOrder, accountArrangementsFilter.customOrder) &&
        Objects.equals(this.favoriteFirst, accountArrangementsFilter.favoriteFirst) &&
        Objects.equals(this.sourceId, accountArrangementsFilter.sourceId) &&
        Objects.equals(this.locale, accountArrangementsFilter.locale) &&
        Objects.equals(this.from, accountArrangementsFilter.from) &&
        Objects.equals(this.size, accountArrangementsFilter.size) &&
        Objects.equals(this.orderBy, accountArrangementsFilter.orderBy) &&
        Objects.equals(this.direction, accountArrangementsFilter.direction) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrangementIds, ignoreArrangementIds, bbans, bankBranchCodes, iban, externalArrangementIds, externalTransferAllowed, creditAccount, debitAccount, parentIds, externalParentIds, productKindIds, externalProductKindIds, productKindName, searchTerm, legalEntityIds, userId, favorite, subEntitiesFetches, customOrder, favoriteFirst, sourceId, locale, from, size, orderBy, direction, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountArrangementsFilter {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    arrangementIds: ").append(toIndentedString(arrangementIds)).append("\n");
    sb.append("    ignoreArrangementIds: ").append(toIndentedString(ignoreArrangementIds)).append("\n");
    sb.append("    bbans: ").append(toIndentedString(bbans)).append("\n");
    sb.append("    bankBranchCodes: ").append(toIndentedString(bankBranchCodes)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    externalArrangementIds: ").append(toIndentedString(externalArrangementIds)).append("\n");
    sb.append("    externalTransferAllowed: ").append(toIndentedString(externalTransferAllowed)).append("\n");
    sb.append("    creditAccount: ").append(toIndentedString(creditAccount)).append("\n");
    sb.append("    debitAccount: ").append(toIndentedString(debitAccount)).append("\n");
    sb.append("    parentIds: ").append(toIndentedString(parentIds)).append("\n");
    sb.append("    externalParentIds: ").append(toIndentedString(externalParentIds)).append("\n");
    sb.append("    productKindIds: ").append(toIndentedString(productKindIds)).append("\n");
    sb.append("    externalProductKindIds: ").append(toIndentedString(externalProductKindIds)).append("\n");
    sb.append("    productKindName: ").append(toIndentedString(productKindName)).append("\n");
    sb.append("    searchTerm: ").append(toIndentedString(searchTerm)).append("\n");
    sb.append("    legalEntityIds: ").append(toIndentedString(legalEntityIds)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    favorite: ").append(toIndentedString(favorite)).append("\n");
    sb.append("    subEntitiesFetches: ").append(toIndentedString(subEntitiesFetches)).append("\n");
    sb.append("    customOrder: ").append(toIndentedString(customOrder)).append("\n");
    sb.append("    favoriteFirst: ").append(toIndentedString(favoriteFirst)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

