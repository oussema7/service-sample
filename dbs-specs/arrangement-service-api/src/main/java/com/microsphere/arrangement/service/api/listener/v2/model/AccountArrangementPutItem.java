/*
 * Arrangement Manager Service API
 * This API allows other DBS services to operate on products
 *
 * The version of the OpenAPI document: 2.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */


package com.microsphere.arrangement.service.api.listener.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.microsphere.arrangement.service.api.listener.v2.model.AdditionalProperties;
import com.microsphere.arrangement.service.api.listener.v2.model.CardDetails;
import com.microsphere.arrangement.service.api.listener.v2.model.DebitCardItem;
import com.microsphere.arrangement.service.api.listener.v2.model.InterestDetails;
import com.microsphere.arrangement.service.api.listener.v2.model.TimeUnit;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * AccountArrangementPutItem
 */
@JsonPropertyOrder({
  AccountArrangementPutItem.JSON_PROPERTY_NAME,
  AccountArrangementPutItem.JSON_PROPERTY_BANK_ALIAS,
  AccountArrangementPutItem.JSON_PROPERTY_BOOKED_BALANCE,
  AccountArrangementPutItem.JSON_PROPERTY_AVAILABLE_BALANCE,
  AccountArrangementPutItem.JSON_PROPERTY_CREDIT_LIMIT,
  AccountArrangementPutItem.JSON_PROPERTY_I_B_A_N,
  AccountArrangementPutItem.JSON_PROPERTY_B_B_A_N,
  AccountArrangementPutItem.JSON_PROPERTY_B_I_C,
  AccountArrangementPutItem.JSON_PROPERTY_CURRENCY,
  AccountArrangementPutItem.JSON_PROPERTY_EXTERNAL_TRANSFER_ALLOWED,
  AccountArrangementPutItem.JSON_PROPERTY_URGENT_TRANSFER_ALLOWED,
  AccountArrangementPutItem.JSON_PROPERTY_ACCRUED_INTEREST,
  AccountArrangementPutItem.JSON_PROPERTY_NUMBER,
  AccountArrangementPutItem.JSON_PROPERTY_PRINCIPAL_AMOUNT,
  AccountArrangementPutItem.JSON_PROPERTY_CURRENT_INVESTMENT_VALUE,
  AccountArrangementPutItem.JSON_PROPERTY_PRODUCT_NUMBER,
  AccountArrangementPutItem.JSON_PROPERTY_BANK_BRANCH_CODE,
  AccountArrangementPutItem.JSON_PROPERTY_ACCOUNT_OPENING_DATE,
  AccountArrangementPutItem.JSON_PROPERTY_ACCOUNT_INTEREST_RATE,
  AccountArrangementPutItem.JSON_PROPERTY_VALUE_DATE_BALANCE,
  AccountArrangementPutItem.JSON_PROPERTY_CREDIT_LIMIT_USAGE,
  AccountArrangementPutItem.JSON_PROPERTY_CREDIT_LIMIT_INTEREST_RATE,
  AccountArrangementPutItem.JSON_PROPERTY_CREDIT_LIMIT_EXPIRY_DATE,
  AccountArrangementPutItem.JSON_PROPERTY_DEBIT_CARDS,
  AccountArrangementPutItem.JSON_PROPERTY_START_DATE,
  AccountArrangementPutItem.JSON_PROPERTY_TERM_UNIT,
  AccountArrangementPutItem.JSON_PROPERTY_TERM_NUMBER,
  AccountArrangementPutItem.JSON_PROPERTY_MATURITY_DATE,
  AccountArrangementPutItem.JSON_PROPERTY_MATURITY_AMOUNT,
  AccountArrangementPutItem.JSON_PROPERTY_AUTO_RENEWAL_INDICATOR,
  AccountArrangementPutItem.JSON_PROPERTY_INTEREST_PAYMENT_FREQUENCY_UNIT,
  AccountArrangementPutItem.JSON_PROPERTY_INTEREST_PAYMENT_FREQUENCY_NUMBER,
  AccountArrangementPutItem.JSON_PROPERTY_INTEREST_SETTLEMENT_ACCOUNT,
  AccountArrangementPutItem.JSON_PROPERTY_OUTSTANDING_PRINCIPAL_AMOUNT,
  AccountArrangementPutItem.JSON_PROPERTY_MONTHLY_INSTALMENT_AMOUNT,
  AccountArrangementPutItem.JSON_PROPERTY_AMOUNT_IN_ARREAR,
  AccountArrangementPutItem.JSON_PROPERTY_MINIMUM_REQUIRED_BALANCE,
  AccountArrangementPutItem.JSON_PROPERTY_CREDIT_CARD_ACCOUNT_NUMBER,
  AccountArrangementPutItem.JSON_PROPERTY_VALID_THRU,
  AccountArrangementPutItem.JSON_PROPERTY_APPLICABLE_INTEREST_RATE,
  AccountArrangementPutItem.JSON_PROPERTY_REMAINING_CREDIT,
  AccountArrangementPutItem.JSON_PROPERTY_OUTSTANDING_PAYMENT,
  AccountArrangementPutItem.JSON_PROPERTY_MINIMUM_PAYMENT,
  AccountArrangementPutItem.JSON_PROPERTY_MINIMUM_PAYMENT_DUE_DATE,
  AccountArrangementPutItem.JSON_PROPERTY_TOTAL_INVESTMENT_VALUE,
  AccountArrangementPutItem.JSON_PROPERTY_ACCOUNT_HOLDER_ADDRESS_LINE1,
  AccountArrangementPutItem.JSON_PROPERTY_ACCOUNT_HOLDER_ADDRESS_LINE2,
  AccountArrangementPutItem.JSON_PROPERTY_ACCOUNT_HOLDER_STREET_NAME,
  AccountArrangementPutItem.JSON_PROPERTY_TOWN,
  AccountArrangementPutItem.JSON_PROPERTY_POST_CODE,
  AccountArrangementPutItem.JSON_PROPERTY_COUNTRY_SUB_DIVISION,
  AccountArrangementPutItem.JSON_PROPERTY_ACCOUNT_HOLDER_NAMES,
  AccountArrangementPutItem.JSON_PROPERTY_ACCOUNT_HOLDER_COUNTRY,
  AccountArrangementPutItem.JSON_PROPERTY_CREDIT_ACCOUNT,
  AccountArrangementPutItem.JSON_PROPERTY_DEBIT_ACCOUNT,
  AccountArrangementPutItem.JSON_PROPERTY_LAST_UPDATE_DATE,
  AccountArrangementPutItem.JSON_PROPERTY_SOURCE_ID,
  AccountArrangementPutItem.JSON_PROPERTY_STATE_ID,
  AccountArrangementPutItem.JSON_PROPERTY_PARENT_ID,
  AccountArrangementPutItem.JSON_PROPERTY_EXTERNAL_PARENT_ID,
  AccountArrangementPutItem.JSON_PROPERTY_PRODUCT_ID,
  AccountArrangementPutItem.JSON_PROPERTY_CARD_DETAILS,
  AccountArrangementPutItem.JSON_PROPERTY_INTEREST_DETAILS,
  AccountArrangementPutItem.JSON_PROPERTY_RESERVED_AMOUNT,
  AccountArrangementPutItem.JSON_PROPERTY_REMAINING_PERIODIC_TRANSFERS,
  AccountArrangementPutItem.JSON_PROPERTY_BANK_BRANCH_CODE2,
  AccountArrangementPutItem.JSON_PROPERTY_NEXT_CLOSING_DATE,
  AccountArrangementPutItem.JSON_PROPERTY_OVERDUE_SINCE,
  AccountArrangementPutItem.JSON_PROPERTY_PAYMENTS_PAST_DUE
})
@javax.annotation.Generated(value = "com.backbase.oss.codegen.java.BoatJavaCodeGen", date = "2024-11-14T00:30:51.050595100+01:00[Africa/Tunis]")
public  class AccountArrangementPutItem extends AdditionalProperties {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_BANK_ALIAS = "bankAlias";
  private String bankAlias;

  public static final String JSON_PROPERTY_BOOKED_BALANCE = "bookedBalance";
  private BigDecimal bookedBalance;

  public static final String JSON_PROPERTY_AVAILABLE_BALANCE = "availableBalance";
  private BigDecimal availableBalance;

  public static final String JSON_PROPERTY_CREDIT_LIMIT = "creditLimit";
  private BigDecimal creditLimit;

  public static final String JSON_PROPERTY_I_B_A_N = "IBAN";
  private String IBAN;

  public static final String JSON_PROPERTY_B_B_A_N = "BBAN";
  private String BBAN;

  public static final String JSON_PROPERTY_B_I_C = "BIC";
  private String BIC;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_EXTERNAL_TRANSFER_ALLOWED = "externalTransferAllowed";
  private Boolean externalTransferAllowed;

  public static final String JSON_PROPERTY_URGENT_TRANSFER_ALLOWED = "urgentTransferAllowed";
  private Boolean urgentTransferAllowed;

  public static final String JSON_PROPERTY_ACCRUED_INTEREST = "accruedInterest";
  private BigDecimal accruedInterest;

  public static final String JSON_PROPERTY_NUMBER = "number";
  private String number;

  public static final String JSON_PROPERTY_PRINCIPAL_AMOUNT = "principalAmount";
  private BigDecimal principalAmount;

  public static final String JSON_PROPERTY_CURRENT_INVESTMENT_VALUE = "currentInvestmentValue";
  private BigDecimal currentInvestmentValue;

  public static final String JSON_PROPERTY_PRODUCT_NUMBER = "productNumber";
  private String productNumber;

  public static final String JSON_PROPERTY_BANK_BRANCH_CODE = "bankBranchCode";
  private String bankBranchCode;

  public static final String JSON_PROPERTY_ACCOUNT_OPENING_DATE = "accountOpeningDate";
  private OffsetDateTime accountOpeningDate;

  public static final String JSON_PROPERTY_ACCOUNT_INTEREST_RATE = "accountInterestRate";
  private BigDecimal accountInterestRate;

  public static final String JSON_PROPERTY_VALUE_DATE_BALANCE = "valueDateBalance";
  private BigDecimal valueDateBalance;

  public static final String JSON_PROPERTY_CREDIT_LIMIT_USAGE = "creditLimitUsage";
  private BigDecimal creditLimitUsage;

  public static final String JSON_PROPERTY_CREDIT_LIMIT_INTEREST_RATE = "creditLimitInterestRate";
  private BigDecimal creditLimitInterestRate;

  public static final String JSON_PROPERTY_CREDIT_LIMIT_EXPIRY_DATE = "creditLimitExpiryDate";
  private OffsetDateTime creditLimitExpiryDate;

  public static final String JSON_PROPERTY_DEBIT_CARDS = "debitCards";
  private List<DebitCardItem> debitCards = null;

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  private OffsetDateTime startDate;

  public static final String JSON_PROPERTY_TERM_UNIT = "termUnit";
  private TimeUnit termUnit;

  public static final String JSON_PROPERTY_TERM_NUMBER = "termNumber";
  private BigDecimal termNumber;

  public static final String JSON_PROPERTY_MATURITY_DATE = "maturityDate";
  private OffsetDateTime maturityDate;

  public static final String JSON_PROPERTY_MATURITY_AMOUNT = "maturityAmount";
  private BigDecimal maturityAmount;

  public static final String JSON_PROPERTY_AUTO_RENEWAL_INDICATOR = "autoRenewalIndicator";
  private Boolean autoRenewalIndicator;

  public static final String JSON_PROPERTY_INTEREST_PAYMENT_FREQUENCY_UNIT = "interestPaymentFrequencyUnit";
  private TimeUnit interestPaymentFrequencyUnit;

  public static final String JSON_PROPERTY_INTEREST_PAYMENT_FREQUENCY_NUMBER = "interestPaymentFrequencyNumber";
  private BigDecimal interestPaymentFrequencyNumber;

  public static final String JSON_PROPERTY_INTEREST_SETTLEMENT_ACCOUNT = "interestSettlementAccount";
  private String interestSettlementAccount;

  public static final String JSON_PROPERTY_OUTSTANDING_PRINCIPAL_AMOUNT = "outstandingPrincipalAmount";
  private BigDecimal outstandingPrincipalAmount;

  public static final String JSON_PROPERTY_MONTHLY_INSTALMENT_AMOUNT = "monthlyInstalmentAmount";
  private BigDecimal monthlyInstalmentAmount;

  public static final String JSON_PROPERTY_AMOUNT_IN_ARREAR = "amountInArrear";
  private BigDecimal amountInArrear;

  public static final String JSON_PROPERTY_MINIMUM_REQUIRED_BALANCE = "minimumRequiredBalance";
  private BigDecimal minimumRequiredBalance;

  public static final String JSON_PROPERTY_CREDIT_CARD_ACCOUNT_NUMBER = "creditCardAccountNumber";
  private String creditCardAccountNumber;

  public static final String JSON_PROPERTY_VALID_THRU = "validThru";
  private OffsetDateTime validThru;

  public static final String JSON_PROPERTY_APPLICABLE_INTEREST_RATE = "applicableInterestRate";
  private BigDecimal applicableInterestRate;

  public static final String JSON_PROPERTY_REMAINING_CREDIT = "remainingCredit";
  private BigDecimal remainingCredit;

  public static final String JSON_PROPERTY_OUTSTANDING_PAYMENT = "outstandingPayment";
  private BigDecimal outstandingPayment;

  public static final String JSON_PROPERTY_MINIMUM_PAYMENT = "minimumPayment";
  private BigDecimal minimumPayment;

  public static final String JSON_PROPERTY_MINIMUM_PAYMENT_DUE_DATE = "minimumPaymentDueDate";
  private OffsetDateTime minimumPaymentDueDate;

  public static final String JSON_PROPERTY_TOTAL_INVESTMENT_VALUE = "totalInvestmentValue";
  private BigDecimal totalInvestmentValue;

  public static final String JSON_PROPERTY_ACCOUNT_HOLDER_ADDRESS_LINE1 = "accountHolderAddressLine1";
  private String accountHolderAddressLine1;

  public static final String JSON_PROPERTY_ACCOUNT_HOLDER_ADDRESS_LINE2 = "accountHolderAddressLine2";
  private String accountHolderAddressLine2;

  public static final String JSON_PROPERTY_ACCOUNT_HOLDER_STREET_NAME = "accountHolderStreetName";
  private String accountHolderStreetName;

  public static final String JSON_PROPERTY_TOWN = "town";
  private String town;

  public static final String JSON_PROPERTY_POST_CODE = "postCode";
  private String postCode;

  public static final String JSON_PROPERTY_COUNTRY_SUB_DIVISION = "countrySubDivision";
  private String countrySubDivision;

  public static final String JSON_PROPERTY_ACCOUNT_HOLDER_NAMES = "accountHolderNames";
  private String accountHolderNames;

  public static final String JSON_PROPERTY_ACCOUNT_HOLDER_COUNTRY = "accountHolderCountry";
  private String accountHolderCountry;

  public static final String JSON_PROPERTY_CREDIT_ACCOUNT = "creditAccount";
  private Boolean creditAccount;

  public static final String JSON_PROPERTY_DEBIT_ACCOUNT = "debitAccount";
  private Boolean debitAccount;

  public static final String JSON_PROPERTY_LAST_UPDATE_DATE = "lastUpdateDate";
  private OffsetDateTime lastUpdateDate;

  public static final String JSON_PROPERTY_SOURCE_ID = "sourceId";
  private String sourceId;

  public static final String JSON_PROPERTY_STATE_ID = "stateId";
  private Integer stateId;

  public static final String JSON_PROPERTY_PARENT_ID = "parentId";
  private String parentId;

  public static final String JSON_PROPERTY_EXTERNAL_PARENT_ID = "externalParentId";
  private String externalParentId;

  public static final String JSON_PROPERTY_PRODUCT_ID = "productId";
  private String productId;

  public static final String JSON_PROPERTY_CARD_DETAILS = "cardDetails";
  private CardDetails cardDetails;

  public static final String JSON_PROPERTY_INTEREST_DETAILS = "interestDetails";
  private InterestDetails interestDetails;

  public static final String JSON_PROPERTY_RESERVED_AMOUNT = "reservedAmount";
  private BigDecimal reservedAmount;

  public static final String JSON_PROPERTY_REMAINING_PERIODIC_TRANSFERS = "remainingPeriodicTransfers";
  private BigDecimal remainingPeriodicTransfers;

  public static final String JSON_PROPERTY_BANK_BRANCH_CODE2 = "bankBranchCode2";
  private String bankBranchCode2;

  public static final String JSON_PROPERTY_NEXT_CLOSING_DATE = "nextClosingDate";
  private LocalDate nextClosingDate;

  public static final String JSON_PROPERTY_OVERDUE_SINCE = "overdueSince";
  private LocalDate overdueSince;

  public static final String JSON_PROPERTY_PAYMENTS_PAST_DUE = "paymentsPastDue";
  private Integer paymentsPastDue;


  public AccountArrangementPutItem name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name that can be assigned by the bank to label a arrangement.
   * @return name
  **/
  @javax.annotation.Nullable
 @Size(max=50)  @ApiModelProperty(value = "The name that can be assigned by the bank to label a arrangement.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public AccountArrangementPutItem bankAlias(String bankAlias) {
    
    this.bankAlias = bankAlias;
    return this;
  }

   /**
   * The name that can be assigned by the customer to label the arrangement.
   * @return bankAlias
  **/
  @javax.annotation.Nullable
 @Size(max=50)  @ApiModelProperty(value = "The name that can be assigned by the customer to label the arrangement.")
  @JsonProperty(JSON_PROPERTY_BANK_ALIAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBankAlias() {
    return bankAlias;
  }


  public void setBankAlias(String bankAlias) {
    this.bankAlias = bankAlias;
  }


  public AccountArrangementPutItem bookedBalance(BigDecimal bookedBalance) {
    
    this.bookedBalance = bookedBalance;
    return this;
  }

   /**
   * Amount of money available before any adjustments have been made for deposits in transit, checks that have not yet been cleared, reserve requirements and interest received.
   * @return bookedBalance
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Amount of money available before any adjustments have been made for deposits in transit, checks that have not yet been cleared, reserve requirements and interest received.")
  @JsonProperty(JSON_PROPERTY_BOOKED_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getBookedBalance() {
    return bookedBalance;
  }


  public void setBookedBalance(BigDecimal bookedBalance) {
    this.bookedBalance = bookedBalance;
  }


  public AccountArrangementPutItem availableBalance(BigDecimal availableBalance) {
    
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * The amount that is available for transactions.
   * @return availableBalance
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The amount that is available for transactions.")
  @JsonProperty(JSON_PROPERTY_AVAILABLE_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAvailableBalance() {
    return availableBalance;
  }


  public void setAvailableBalance(BigDecimal availableBalance) {
    this.availableBalance = availableBalance;
  }


  public AccountArrangementPutItem creditLimit(BigDecimal creditLimit) {
    
    this.creditLimit = creditLimit;
    return this;
  }

   /**
   * The credit limit (or overdraft limit) is the maximum amount of credit that the financial institution extends to the account holder for this arrangement.
   * @return creditLimit
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The credit limit (or overdraft limit) is the maximum amount of credit that the financial institution extends to the account holder for this arrangement.")
  @JsonProperty(JSON_PROPERTY_CREDIT_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCreditLimit() {
    return creditLimit;
  }


  public void setCreditLimit(BigDecimal creditLimit) {
    this.creditLimit = creditLimit;
  }


  public AccountArrangementPutItem IBAN(String IBAN) {
    
    this.IBAN = IBAN;
    return this;
  }

   /**
   * The International Bank Account Number. If specified, it must be a valid IBAN, otherwise an invalid value error could be raised. 
   * @return IBAN
  **/
  @javax.annotation.Nullable
 @Pattern(regexp="^[0-9A-Z•]+$") @Size(max=34)  @ApiModelProperty(value = "The International Bank Account Number. If specified, it must be a valid IBAN, otherwise an invalid value error could be raised. ")
  @JsonProperty(JSON_PROPERTY_I_B_A_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIBAN() {
    return IBAN;
  }


  public void setIBAN(String IBAN) {
    this.IBAN = IBAN;
  }


  public AccountArrangementPutItem BBAN(String BBAN) {
    
    this.BBAN = BBAN;
    return this;
  }

   /**
   * BBAN is the country-specific bank account number. It is short for Basic Bank Account Number. Account numbers usually match the BBAN. 
   * @return BBAN
  **/
  @javax.annotation.Nullable
 @Size(max=50)  @ApiModelProperty(value = "BBAN is the country-specific bank account number. It is short for Basic Bank Account Number. Account numbers usually match the BBAN. ")
  @JsonProperty(JSON_PROPERTY_B_B_A_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBBAN() {
    return BBAN;
  }


  public void setBBAN(String BBAN) {
    this.BBAN = BBAN;
  }


  public AccountArrangementPutItem BIC(String BIC) {
    
    this.BIC = BIC;
    return this;
  }

   /**
   * Bank Identifier Code - international bank code that identifies particular banks worldwide
   * @return BIC
  **/
  @javax.annotation.Nullable
 @Size(max=11)  @ApiModelProperty(value = "Bank Identifier Code - international bank code that identifies particular banks worldwide")
  @JsonProperty(JSON_PROPERTY_B_I_C)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBIC() {
    return BIC;
  }


  public void setBIC(String BIC) {
    this.BIC = BIC;
  }


  public AccountArrangementPutItem currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount.
   * @return currency
  **/
  @javax.annotation.Nullable
 @Pattern(regexp="^[A-Z]{3}$")  @ApiModelProperty(value = "The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount.")
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public AccountArrangementPutItem externalTransferAllowed(Boolean externalTransferAllowed) {
    
    this.externalTransferAllowed = externalTransferAllowed;
    return this;
  }

   /**
   * Defines if transfer to another party is allowed.
   * @return externalTransferAllowed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines if transfer to another party is allowed.")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_TRANSFER_ALLOWED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExternalTransferAllowed() {
    return externalTransferAllowed;
  }


  public void setExternalTransferAllowed(Boolean externalTransferAllowed) {
    this.externalTransferAllowed = externalTransferAllowed;
  }


  public AccountArrangementPutItem urgentTransferAllowed(Boolean urgentTransferAllowed) {
    
    this.urgentTransferAllowed = urgentTransferAllowed;
    return this;
  }

   /**
   * Defines if urgent transfer is allowed.
   * @return urgentTransferAllowed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines if urgent transfer is allowed.")
  @JsonProperty(JSON_PROPERTY_URGENT_TRANSFER_ALLOWED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUrgentTransferAllowed() {
    return urgentTransferAllowed;
  }


  public void setUrgentTransferAllowed(Boolean urgentTransferAllowed) {
    this.urgentTransferAllowed = urgentTransferAllowed;
  }


  public AccountArrangementPutItem accruedInterest(BigDecimal accruedInterest) {
    
    this.accruedInterest = accruedInterest;
    return this;
  }

   /**
   * The interest that is earned or due, but not settled yet. Interest that is earned is also called credit interest or interest earned year to date. Interest that is due is also called debit interest.
   * @return accruedInterest
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The interest that is earned or due, but not settled yet. Interest that is earned is also called credit interest or interest earned year to date. Interest that is due is also called debit interest.")
  @JsonProperty(JSON_PROPERTY_ACCRUED_INTEREST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAccruedInterest() {
    return accruedInterest;
  }


  public void setAccruedInterest(BigDecimal accruedInterest) {
    this.accruedInterest = accruedInterest;
  }


  public AccountArrangementPutItem number(String number) {
    
    this.number = number;
    return this;
  }

   /**
   * First 6 and/or last 4 digits of a Payment card. All other digits will/to be masked. Be aware that using card number differently is potential PCI risk.
   * @return number
  **/
  @javax.annotation.Nullable
 @Size(max=36)  @ApiModelProperty(value = "First 6 and/or last 4 digits of a Payment card. All other digits will/to be masked. Be aware that using card number differently is potential PCI risk.")
  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    this.number = number;
  }


  public AccountArrangementPutItem principalAmount(BigDecimal principalAmount) {
    
    this.principalAmount = principalAmount;
    return this;
  }

   /**
   * The amount that was (originally) contracted for the respective product. This is mainly used in the context of loans and deposits.
   * @return principalAmount
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The amount that was (originally) contracted for the respective product. This is mainly used in the context of loans and deposits.")
  @JsonProperty(JSON_PROPERTY_PRINCIPAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPrincipalAmount() {
    return principalAmount;
  }


  public void setPrincipalAmount(BigDecimal principalAmount) {
    this.principalAmount = principalAmount;
  }


  public AccountArrangementPutItem currentInvestmentValue(BigDecimal currentInvestmentValue) {
    
    this.currentInvestmentValue = currentInvestmentValue;
    return this;
  }

   /**
   * The total current value of all the securities kept in the account.
   * @return currentInvestmentValue
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The total current value of all the securities kept in the account.")
  @JsonProperty(JSON_PROPERTY_CURRENT_INVESTMENT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCurrentInvestmentValue() {
    return currentInvestmentValue;
  }


  public void setCurrentInvestmentValue(BigDecimal currentInvestmentValue) {
    this.currentInvestmentValue = currentInvestmentValue;
  }


  public AccountArrangementPutItem productNumber(String productNumber) {
    
    this.productNumber = productNumber;
    return this;
  }

   /**
   * A unique identifier(number) assigned to identify the contract for the product
   * @return productNumber
  **/
  @javax.annotation.Nullable
 @Size(max=36)  @ApiModelProperty(value = "A unique identifier(number) assigned to identify the contract for the product")
  @JsonProperty(JSON_PROPERTY_PRODUCT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductNumber() {
    return productNumber;
  }


  public void setProductNumber(String productNumber) {
    this.productNumber = productNumber;
  }


  public AccountArrangementPutItem bankBranchCode(String bankBranchCode) {
    
    this.bankBranchCode = bankBranchCode;
    return this;
  }

   /**
   * A country-specific bank identification number or code: the sort code in the UK, the ACH routing number in the US, and the transit number in Canada 
   * @return bankBranchCode
  **/
  @javax.annotation.Nullable
 @Size(max=20)  @ApiModelProperty(value = "A country-specific bank identification number or code: the sort code in the UK, the ACH routing number in the US, and the transit number in Canada ")
  @JsonProperty(JSON_PROPERTY_BANK_BRANCH_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBankBranchCode() {
    return bankBranchCode;
  }


  public void setBankBranchCode(String bankBranchCode) {
    this.bankBranchCode = bankBranchCode;
  }


  public AccountArrangementPutItem accountOpeningDate(OffsetDateTime accountOpeningDate) {
    
    this.accountOpeningDate = accountOpeningDate;
    return this;
  }

   /**
   * The date of activation of the account in the bank&#39;s system.
   * @return accountOpeningDate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The date of activation of the account in the bank's system.")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_OPENING_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getAccountOpeningDate() {
    return accountOpeningDate;
  }


  public void setAccountOpeningDate(OffsetDateTime accountOpeningDate) {
    this.accountOpeningDate = accountOpeningDate;
  }


  public AccountArrangementPutItem accountInterestRate(BigDecimal accountInterestRate) {
    
    this.accountInterestRate = accountInterestRate;
    return this;
  }

   /**
   * The annualized cost of credit or debt capital computed as the percentage ratio of interest to the principal. In the case of credit cards, the account interest rate is the annual percentage that is added monthly to the outstanding balance due on a credit card.
   * @return accountInterestRate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The annualized cost of credit or debt capital computed as the percentage ratio of interest to the principal. In the case of credit cards, the account interest rate is the annual percentage that is added monthly to the outstanding balance due on a credit card.")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAccountInterestRate() {
    return accountInterestRate;
  }


  public void setAccountInterestRate(BigDecimal accountInterestRate) {
    this.accountInterestRate = accountInterestRate;
  }


  public AccountArrangementPutItem valueDateBalance(BigDecimal valueDateBalance) {
    
    this.valueDateBalance = valueDateBalance;
    return this;
  }

   /**
   * The balance of the account on a specific date that needs to be used for the calculation of interest. NB! If no date is specified (like for the book date balance) the current date can be assumed.
   * @return valueDateBalance
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The balance of the account on a specific date that needs to be used for the calculation of interest. NB! If no date is specified (like for the book date balance) the current date can be assumed.")
  @JsonProperty(JSON_PROPERTY_VALUE_DATE_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getValueDateBalance() {
    return valueDateBalance;
  }


  public void setValueDateBalance(BigDecimal valueDateBalance) {
    this.valueDateBalance = valueDateBalance;
  }


  public AccountArrangementPutItem creditLimitUsage(BigDecimal creditLimitUsage) {
    
    this.creditLimitUsage = creditLimitUsage;
    return this;
  }

   /**
   * Monetary amount of the used overdraft.
   * @return creditLimitUsage
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Monetary amount of the used overdraft.")
  @JsonProperty(JSON_PROPERTY_CREDIT_LIMIT_USAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCreditLimitUsage() {
    return creditLimitUsage;
  }


  public void setCreditLimitUsage(BigDecimal creditLimitUsage) {
    this.creditLimitUsage = creditLimitUsage;
  }


  public AccountArrangementPutItem creditLimitInterestRate(BigDecimal creditLimitInterestRate) {
    
    this.creditLimitInterestRate = creditLimitInterestRate;
    return this;
  }

   /**
   * Overdraft Interest is an interest applied to the account for any time throughout the month when the account is overdrawn.
   * @return creditLimitInterestRate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Overdraft Interest is an interest applied to the account for any time throughout the month when the account is overdrawn.")
  @JsonProperty(JSON_PROPERTY_CREDIT_LIMIT_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCreditLimitInterestRate() {
    return creditLimitInterestRate;
  }


  public void setCreditLimitInterestRate(BigDecimal creditLimitInterestRate) {
    this.creditLimitInterestRate = creditLimitInterestRate;
  }


  public AccountArrangementPutItem creditLimitExpiryDate(OffsetDateTime creditLimitExpiryDate) {
    
    this.creditLimitExpiryDate = creditLimitExpiryDate;
    return this;
  }

   /**
   * The date after which overdraft will no longer be available to the account (renewed automatically or cancelled).
   * @return creditLimitExpiryDate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The date after which overdraft will no longer be available to the account (renewed automatically or cancelled).")
  @JsonProperty(JSON_PROPERTY_CREDIT_LIMIT_EXPIRY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreditLimitExpiryDate() {
    return creditLimitExpiryDate;
  }


  public void setCreditLimitExpiryDate(OffsetDateTime creditLimitExpiryDate) {
    this.creditLimitExpiryDate = creditLimitExpiryDate;
  }


  public AccountArrangementPutItem debitCards(List<DebitCardItem> debitCards) {
    
    this.debitCards = debitCards;
    return this;
  }

  public AccountArrangementPutItem addDebitCardsItem(DebitCardItem debitCardsItem) {
    if (this.debitCards == null) {
      this.debitCards = new ArrayList<>();
    }
    this.debitCards.add(debitCardsItem);
    return this;
  }

   /**
   * Get debitCards
   * @return debitCards
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DEBIT_CARDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DebitCardItem> getDebitCards() {
    return debitCards;
  }


  public void setDebitCards(List<DebitCardItem> debitCards) {
    this.debitCards = debitCards;
  }


  public AccountArrangementPutItem startDate(OffsetDateTime startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The date on which the credit card becames active
   * @return startDate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The date on which the credit card becames active")
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public AccountArrangementPutItem termUnit(TimeUnit termUnit) {
    
    this.termUnit = termUnit;
    return this;
  }

   /**
   * Get termUnit
   * @return termUnit
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TERM_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TimeUnit getTermUnit() {
    return termUnit;
  }


  public void setTermUnit(TimeUnit termUnit) {
    this.termUnit = termUnit;
  }


  public AccountArrangementPutItem termNumber(BigDecimal termNumber) {
    
    this.termNumber = termNumber;
    return this;
  }

   /**
   * Number for the Term Unit for the product arranged between Bank and customer
   * @return termNumber
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Number for the Term Unit for the product arranged between Bank and customer")
  @JsonProperty(JSON_PROPERTY_TERM_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTermNumber() {
    return termNumber;
  }


  public void setTermNumber(BigDecimal termNumber) {
    this.termNumber = termNumber;
  }


  public AccountArrangementPutItem maturityDate(OffsetDateTime maturityDate) {
    
    this.maturityDate = maturityDate;
    return this;
  }

   /**
   * End term of a holding period.
   * @return maturityDate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "End term of a holding period.")
  @JsonProperty(JSON_PROPERTY_MATURITY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getMaturityDate() {
    return maturityDate;
  }


  public void setMaturityDate(OffsetDateTime maturityDate) {
    this.maturityDate = maturityDate;
  }


  public AccountArrangementPutItem maturityAmount(BigDecimal maturityAmount) {
    
    this.maturityAmount = maturityAmount;
    return this;
  }

   /**
   * Amount payable at the end of a holding period of a product (maturity date). For deposit all of the interest is usualy paid at maturity date (IF the term is shorter then one year).
   * @return maturityAmount
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Amount payable at the end of a holding period of a product (maturity date). For deposit all of the interest is usualy paid at maturity date (IF the term is shorter then one year).")
  @JsonProperty(JSON_PROPERTY_MATURITY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMaturityAmount() {
    return maturityAmount;
  }


  public void setMaturityAmount(BigDecimal maturityAmount) {
    this.maturityAmount = maturityAmount;
  }


  public AccountArrangementPutItem autoRenewalIndicator(Boolean autoRenewalIndicator) {
    
    this.autoRenewalIndicator = autoRenewalIndicator;
    return this;
  }

   /**
   * Indicates whether or not an arrangement is to be continued after maturity automatically. Usually the product is renewed using the same principal and term unless renegotiation has taken place prior to expiration.
   * @return autoRenewalIndicator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether or not an arrangement is to be continued after maturity automatically. Usually the product is renewed using the same principal and term unless renegotiation has taken place prior to expiration.")
  @JsonProperty(JSON_PROPERTY_AUTO_RENEWAL_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAutoRenewalIndicator() {
    return autoRenewalIndicator;
  }


  public void setAutoRenewalIndicator(Boolean autoRenewalIndicator) {
    this.autoRenewalIndicator = autoRenewalIndicator;
  }


  public AccountArrangementPutItem interestPaymentFrequencyUnit(TimeUnit interestPaymentFrequencyUnit) {
    
    this.interestPaymentFrequencyUnit = interestPaymentFrequencyUnit;
    return this;
  }

   /**
   * Get interestPaymentFrequencyUnit
   * @return interestPaymentFrequencyUnit
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INTEREST_PAYMENT_FREQUENCY_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TimeUnit getInterestPaymentFrequencyUnit() {
    return interestPaymentFrequencyUnit;
  }


  public void setInterestPaymentFrequencyUnit(TimeUnit interestPaymentFrequencyUnit) {
    this.interestPaymentFrequencyUnit = interestPaymentFrequencyUnit;
  }


  public AccountArrangementPutItem interestPaymentFrequencyNumber(BigDecimal interestPaymentFrequencyNumber) {
    
    this.interestPaymentFrequencyNumber = interestPaymentFrequencyNumber;
    return this;
  }

   /**
   * Number of times per year when the accumulated interest is settled to the account on a regular basis. The frequency could be yearly, half-yearly, quarterly, monthly, weekly, daily (or not at all, until maturity)
   * @return interestPaymentFrequencyNumber
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Number of times per year when the accumulated interest is settled to the account on a regular basis. The frequency could be yearly, half-yearly, quarterly, monthly, weekly, daily (or not at all, until maturity)")
  @JsonProperty(JSON_PROPERTY_INTEREST_PAYMENT_FREQUENCY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getInterestPaymentFrequencyNumber() {
    return interestPaymentFrequencyNumber;
  }


  public void setInterestPaymentFrequencyNumber(BigDecimal interestPaymentFrequencyNumber) {
    this.interestPaymentFrequencyNumber = interestPaymentFrequencyNumber;
  }


  public AccountArrangementPutItem interestSettlementAccount(String interestSettlementAccount) {
    
    this.interestSettlementAccount = interestSettlementAccount;
    return this;
  }

   /**
   * Account for settlement of accumulated interest on a regular basis / Account that provides quick access to accumulated cash to facilitate daily settlements with other businesses
   * @return interestSettlementAccount
  **/
  @javax.annotation.Nullable
 @Size(max=32)  @ApiModelProperty(value = "Account for settlement of accumulated interest on a regular basis / Account that provides quick access to accumulated cash to facilitate daily settlements with other businesses")
  @JsonProperty(JSON_PROPERTY_INTEREST_SETTLEMENT_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInterestSettlementAccount() {
    return interestSettlementAccount;
  }


  public void setInterestSettlementAccount(String interestSettlementAccount) {
    this.interestSettlementAccount = interestSettlementAccount;
  }


  public AccountArrangementPutItem outstandingPrincipalAmount(BigDecimal outstandingPrincipalAmount) {
    
    this.outstandingPrincipalAmount = outstandingPrincipalAmount;
    return this;
  }

   /**
   * The remaining portion of the original loan amount, plus any interest that has been capitalized, that is still owed. Interest accrues on the outstanding principal balance / The value date balance of the arrangement
   * @return outstandingPrincipalAmount
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The remaining portion of the original loan amount, plus any interest that has been capitalized, that is still owed. Interest accrues on the outstanding principal balance / The value date balance of the arrangement")
  @JsonProperty(JSON_PROPERTY_OUTSTANDING_PRINCIPAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getOutstandingPrincipalAmount() {
    return outstandingPrincipalAmount;
  }


  public void setOutstandingPrincipalAmount(BigDecimal outstandingPrincipalAmount) {
    this.outstandingPrincipalAmount = outstandingPrincipalAmount;
  }


  public AccountArrangementPutItem monthlyInstalmentAmount(BigDecimal monthlyInstalmentAmount) {
    
    this.monthlyInstalmentAmount = monthlyInstalmentAmount;
    return this;
  }

   /**
   * A fixed payment amount paid by a borrower to the bank at a specified date each calendar month.
   * @return monthlyInstalmentAmount
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "A fixed payment amount paid by a borrower to the bank at a specified date each calendar month.")
  @JsonProperty(JSON_PROPERTY_MONTHLY_INSTALMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMonthlyInstalmentAmount() {
    return monthlyInstalmentAmount;
  }


  public void setMonthlyInstalmentAmount(BigDecimal monthlyInstalmentAmount) {
    this.monthlyInstalmentAmount = monthlyInstalmentAmount;
  }


  public AccountArrangementPutItem amountInArrear(BigDecimal amountInArrear) {
    
    this.amountInArrear = amountInArrear;
    return this;
  }

   /**
   * The part of a debt that is overdue after missing one or more required payments. The amount of the arrears is the amount accrued from the date on which the first missed payment was due.
   * @return amountInArrear
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The part of a debt that is overdue after missing one or more required payments. The amount of the arrears is the amount accrued from the date on which the first missed payment was due.")
  @JsonProperty(JSON_PROPERTY_AMOUNT_IN_ARREAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAmountInArrear() {
    return amountInArrear;
  }


  public void setAmountInArrear(BigDecimal amountInArrear) {
    this.amountInArrear = amountInArrear;
  }


  public AccountArrangementPutItem minimumRequiredBalance(BigDecimal minimumRequiredBalance) {
    
    this.minimumRequiredBalance = minimumRequiredBalance;
    return this;
  }

   /**
   * Minimum amount that a customer must have in an account in order to receive some sort of service, such as keeping the account open or receive interest.
   * @return minimumRequiredBalance
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Minimum amount that a customer must have in an account in order to receive some sort of service, such as keeping the account open or receive interest.")
  @JsonProperty(JSON_PROPERTY_MINIMUM_REQUIRED_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMinimumRequiredBalance() {
    return minimumRequiredBalance;
  }


  public void setMinimumRequiredBalance(BigDecimal minimumRequiredBalance) {
    this.minimumRequiredBalance = minimumRequiredBalance;
  }


  public AccountArrangementPutItem creditCardAccountNumber(String creditCardAccountNumber) {
    
    this.creditCardAccountNumber = creditCardAccountNumber;
    return this;
  }

   /**
   * The number of the account the credit card transactions settle on (so actually the reference to the settlement account of the card)?
   * @return creditCardAccountNumber
  **/
  @javax.annotation.Nullable
 @Size(max=32)  @ApiModelProperty(value = "The number of the account the credit card transactions settle on (so actually the reference to the settlement account of the card)?")
  @JsonProperty(JSON_PROPERTY_CREDIT_CARD_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreditCardAccountNumber() {
    return creditCardAccountNumber;
  }


  public void setCreditCardAccountNumber(String creditCardAccountNumber) {
    this.creditCardAccountNumber = creditCardAccountNumber;
  }


  public AccountArrangementPutItem validThru(OffsetDateTime validThru) {
    
    this.validThru = validThru;
    return this;
  }

   /**
   * Expiration date of a credit card, after which is no longer valid.
   * @return validThru
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Expiration date of a credit card, after which is no longer valid.")
  @JsonProperty(JSON_PROPERTY_VALID_THRU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getValidThru() {
    return validThru;
  }


  public void setValidThru(OffsetDateTime validThru) {
    this.validThru = validThru;
  }


  public AccountArrangementPutItem applicableInterestRate(BigDecimal applicableInterestRate) {
    
    this.applicableInterestRate = applicableInterestRate;
    return this;
  }

   /**
   * The interest rate or rates which would be used for a particular arrangement.
   * @return applicableInterestRate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The interest rate or rates which would be used for a particular arrangement.")
  @JsonProperty(JSON_PROPERTY_APPLICABLE_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getApplicableInterestRate() {
    return applicableInterestRate;
  }


  public void setApplicableInterestRate(BigDecimal applicableInterestRate) {
    this.applicableInterestRate = applicableInterestRate;
  }


  public AccountArrangementPutItem remainingCredit(BigDecimal remainingCredit) {
    
    this.remainingCredit = remainingCredit;
    return this;
  }

   /**
   * Amount of money left to spent from the Credit limit of the account. If the user has received a refund, or has transferredadditional funds to the arrangement, then the RemainingCredit can in some cases be greater than the CreditLimit. RemainingCredit &#x3D; CreditLimit - CreditLimitUsage + any additional funds transferred to the arrangement.
   * @return remainingCredit
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Amount of money left to spent from the Credit limit of the account. If the user has received a refund, or has transferredadditional funds to the arrangement, then the RemainingCredit can in some cases be greater than the CreditLimit. RemainingCredit = CreditLimit - CreditLimitUsage + any additional funds transferred to the arrangement.")
  @JsonProperty(JSON_PROPERTY_REMAINING_CREDIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getRemainingCredit() {
    return remainingCredit;
  }


  public void setRemainingCredit(BigDecimal remainingCredit) {
    this.remainingCredit = remainingCredit;
  }


  public AccountArrangementPutItem outstandingPayment(BigDecimal outstandingPayment) {
    
    this.outstandingPayment = outstandingPayment;
    return this;
  }

   /**
   * Outstanding payment refers to the outstanding [unpaid] balance, i.e., the current amount due.
   * @return outstandingPayment
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Outstanding payment refers to the outstanding [unpaid] balance, i.e., the current amount due.")
  @JsonProperty(JSON_PROPERTY_OUTSTANDING_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getOutstandingPayment() {
    return outstandingPayment;
  }


  public void setOutstandingPayment(BigDecimal outstandingPayment) {
    this.outstandingPayment = outstandingPayment;
  }


  public AccountArrangementPutItem minimumPayment(BigDecimal minimumPayment) {
    
    this.minimumPayment = minimumPayment;
    return this;
  }

   /**
   * The minimum payment set a percentage of balance, or a fixed cash amount.
   * @return minimumPayment
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The minimum payment set a percentage of balance, or a fixed cash amount.")
  @JsonProperty(JSON_PROPERTY_MINIMUM_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMinimumPayment() {
    return minimumPayment;
  }


  public void setMinimumPayment(BigDecimal minimumPayment) {
    this.minimumPayment = minimumPayment;
  }


  public AccountArrangementPutItem minimumPaymentDueDate(OffsetDateTime minimumPaymentDueDate) {
    
    this.minimumPaymentDueDate = minimumPaymentDueDate;
    return this;
  }

   /**
   * Minimum Payment Due Date shown on your monthly statement to remain in good standing.
   * @return minimumPaymentDueDate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Minimum Payment Due Date shown on your monthly statement to remain in good standing.")
  @JsonProperty(JSON_PROPERTY_MINIMUM_PAYMENT_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getMinimumPaymentDueDate() {
    return minimumPaymentDueDate;
  }


  public void setMinimumPaymentDueDate(OffsetDateTime minimumPaymentDueDate) {
    this.minimumPaymentDueDate = minimumPaymentDueDate;
  }


  public AccountArrangementPutItem totalInvestmentValue(BigDecimal totalInvestmentValue) {
    
    this.totalInvestmentValue = totalInvestmentValue;
    return this;
  }

   /**
   * The value of an asset to its owner, depending on his or her expectations
   * @return totalInvestmentValue
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The value of an asset to its owner, depending on his or her expectations")
  @JsonProperty(JSON_PROPERTY_TOTAL_INVESTMENT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTotalInvestmentValue() {
    return totalInvestmentValue;
  }


  public void setTotalInvestmentValue(BigDecimal totalInvestmentValue) {
    this.totalInvestmentValue = totalInvestmentValue;
  }


  public AccountArrangementPutItem accountHolderAddressLine1(String accountHolderAddressLine1) {
    
    this.accountHolderAddressLine1 = accountHolderAddressLine1;
    return this;
  }

   /**
   * Address of the Payer/Payee - Alternate address line for the account.
   * @return accountHolderAddressLine1
  **/
  @javax.annotation.Nullable
 @Size(max=70)  @ApiModelProperty(value = "Address of the Payer/Payee - Alternate address line for the account.")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_ADDRESS_LINE1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountHolderAddressLine1() {
    return accountHolderAddressLine1;
  }


  public void setAccountHolderAddressLine1(String accountHolderAddressLine1) {
    this.accountHolderAddressLine1 = accountHolderAddressLine1;
  }


  public AccountArrangementPutItem accountHolderAddressLine2(String accountHolderAddressLine2) {
    
    this.accountHolderAddressLine2 = accountHolderAddressLine2;
    return this;
  }

   /**
   * Address of the Payer/Payee - Alternate address line for the account.
   * @return accountHolderAddressLine2
  **/
  @javax.annotation.Nullable
 @Size(max=70)  @ApiModelProperty(value = "Address of the Payer/Payee - Alternate address line for the account.")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_ADDRESS_LINE2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountHolderAddressLine2() {
    return accountHolderAddressLine2;
  }


  public void setAccountHolderAddressLine2(String accountHolderAddressLine2) {
    this.accountHolderAddressLine2 = accountHolderAddressLine2;
  }


  public AccountArrangementPutItem accountHolderStreetName(String accountHolderStreetName) {
    
    this.accountHolderStreetName = accountHolderStreetName;
    return this;
  }

   /**
   * Street name of the Payer/Payee - Alternate street name for the account.
   * @return accountHolderStreetName
  **/
  @javax.annotation.Nullable
 @Size(max=70)  @ApiModelProperty(value = "Street name of the Payer/Payee - Alternate street name for the account.")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_STREET_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountHolderStreetName() {
    return accountHolderStreetName;
  }


  public void setAccountHolderStreetName(String accountHolderStreetName) {
    this.accountHolderStreetName = accountHolderStreetName;
  }


  public AccountArrangementPutItem town(String town) {
    
    this.town = town;
    return this;
  }

   /**
   * Town of the Payer/Payee - Alternate town for the account.
   * @return town
  **/
  @javax.annotation.Nullable
 @Size(max=35)  @ApiModelProperty(value = "Town of the Payer/Payee - Alternate town for the account.")
  @JsonProperty(JSON_PROPERTY_TOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTown() {
    return town;
  }


  public void setTown(String town) {
    this.town = town;
  }


  public AccountArrangementPutItem postCode(String postCode) {
    
    this.postCode = postCode;
    return this;
  }

   /**
   * Post Code of the Payer/Payee
   * @return postCode
  **/
  @javax.annotation.Nullable
 @Size(max=16)  @ApiModelProperty(value = "Post Code of the Payer/Payee")
  @JsonProperty(JSON_PROPERTY_POST_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPostCode() {
    return postCode;
  }


  public void setPostCode(String postCode) {
    this.postCode = postCode;
  }


  public AccountArrangementPutItem countrySubDivision(String countrySubDivision) {
    
    this.countrySubDivision = countrySubDivision;
    return this;
  }

   /**
   * Country SubDivision of the Payer/Payee
   * @return countrySubDivision
  **/
  @javax.annotation.Nullable
 @Size(max=35)  @ApiModelProperty(value = "Country SubDivision of the Payer/Payee")
  @JsonProperty(JSON_PROPERTY_COUNTRY_SUB_DIVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountrySubDivision() {
    return countrySubDivision;
  }


  public void setCountrySubDivision(String countrySubDivision) {
    this.countrySubDivision = countrySubDivision;
  }


  public AccountArrangementPutItem accountHolderNames(String accountHolderNames) {
    
    this.accountHolderNames = accountHolderNames;
    return this;
  }

   /**
   * Party(s) with a relationship to the account.
   * @return accountHolderNames
  **/
  @javax.annotation.Nullable
 @Size(max=256)  @ApiModelProperty(value = "Party(s) with a relationship to the account.")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountHolderNames() {
    return accountHolderNames;
  }


  public void setAccountHolderNames(String accountHolderNames) {
    this.accountHolderNames = accountHolderNames;
  }


  public AccountArrangementPutItem accountHolderCountry(String accountHolderCountry) {
    
    this.accountHolderCountry = accountHolderCountry;
    return this;
  }

   /**
   * Country of the account holder
   * @return accountHolderCountry
  **/
  @javax.annotation.Nullable
 @Pattern(regexp="^[A-Z]{2}$")  @ApiModelProperty(value = "Country of the account holder")
  @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountHolderCountry() {
    return accountHolderCountry;
  }


  public void setAccountHolderCountry(String accountHolderCountry) {
    this.accountHolderCountry = accountHolderCountry;
  }


  public AccountArrangementPutItem creditAccount(Boolean creditAccount) {
    
    this.creditAccount = creditAccount;
    return this;
  }

   /**
   * Indicator whether or not the arrangement can be used in payment orders as credit account - account to transfer TO
   * @return creditAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicator whether or not the arrangement can be used in payment orders as credit account - account to transfer TO")
  @JsonProperty(JSON_PROPERTY_CREDIT_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCreditAccount() {
    return creditAccount;
  }


  public void setCreditAccount(Boolean creditAccount) {
    this.creditAccount = creditAccount;
  }


  public AccountArrangementPutItem debitAccount(Boolean debitAccount) {
    
    this.debitAccount = debitAccount;
    return this;
  }

   /**
   * Indicator whether or not the arrangement can be used in payment orders as debit account - account to transfer FROM
   * @return debitAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicator whether or not the arrangement can be used in payment orders as debit account - account to transfer FROM")
  @JsonProperty(JSON_PROPERTY_DEBIT_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDebitAccount() {
    return debitAccount;
  }


  public void setDebitAccount(Boolean debitAccount) {
    this.debitAccount = debitAccount;
  }


  public AccountArrangementPutItem lastUpdateDate(OffsetDateTime lastUpdateDate) {
    
    this.lastUpdateDate = lastUpdateDate;
    return this;
  }

   /**
   * Last date of balance (or other) parameter update for the particular arrangement
   * @return lastUpdateDate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "Last date of balance (or other) parameter update for the particular arrangement")
  @JsonProperty(JSON_PROPERTY_LAST_UPDATE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getLastUpdateDate() {
    return lastUpdateDate;
  }


  public void setLastUpdateDate(OffsetDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
  }


  public AccountArrangementPutItem sourceId(String sourceId) {
    
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Indicate if the account is regular or external
   * @return sourceId
  **/
  @javax.annotation.Nullable
 @Size(max=11)  @ApiModelProperty(value = "Indicate if the account is regular or external")
  @JsonProperty(JSON_PROPERTY_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceId() {
    return sourceId;
  }


  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public AccountArrangementPutItem stateId(Integer stateId) {
    
    this.stateId = stateId;
    return this;
  }

   /**
   * Internal reference to the arrangement state.
   * @return stateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Internal reference to the arrangement state.")
  @JsonProperty(JSON_PROPERTY_STATE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStateId() {
    return stateId;
  }


  public void setStateId(Integer stateId) {
    this.stateId = stateId;
  }


  public AccountArrangementPutItem parentId(String parentId) {
    
    this.parentId = parentId;
    return this;
  }

   /**
   * Indicate if the account is regular or external
   * @return parentId
  **/
  @javax.annotation.Nullable
 @Size(max=36)  @ApiModelProperty(value = "Indicate if the account is regular or external")
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParentId() {
    return parentId;
  }


  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public AccountArrangementPutItem externalParentId(String externalParentId) {
    
    this.externalParentId = externalParentId;
    return this;
  }

   /**
   * Indicate if the account is regular or external
   * @return externalParentId
  **/
  @javax.annotation.Nullable
 @Size(max=50)  @ApiModelProperty(value = "Indicate if the account is regular or external")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExternalParentId() {
    return externalParentId;
  }


  public void setExternalParentId(String externalParentId) {
    this.externalParentId = externalParentId;
  }


  public AccountArrangementPutItem productId(String productId) {
    
    this.productId = productId;
    return this;
  }

   /**
   * Reference to the product of which the arrangement is an instantiation.
   * @return productId
  **/
  @javax.annotation.Nullable
 @Size(min=1,max=36)  @ApiModelProperty(value = "Reference to the product of which the arrangement is an instantiation.")
  @JsonProperty(JSON_PROPERTY_PRODUCT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductId() {
    return productId;
  }


  public void setProductId(String productId) {
    this.productId = productId;
  }


  public AccountArrangementPutItem cardDetails(CardDetails cardDetails) {
    
    this.cardDetails = cardDetails;
    return this;
  }

   /**
   * Get cardDetails
   * @return cardDetails
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CARD_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CardDetails getCardDetails() {
    return cardDetails;
  }


  public void setCardDetails(CardDetails cardDetails) {
    this.cardDetails = cardDetails;
  }


  public AccountArrangementPutItem interestDetails(InterestDetails interestDetails) {
    
    this.interestDetails = interestDetails;
    return this;
  }

   /**
   * Get interestDetails
   * @return interestDetails
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INTEREST_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterestDetails getInterestDetails() {
    return interestDetails;
  }


  public void setInterestDetails(InterestDetails interestDetails) {
    this.interestDetails = interestDetails;
  }


  public AccountArrangementPutItem reservedAmount(BigDecimal reservedAmount) {
    
    this.reservedAmount = reservedAmount;
    return this;
  }

   /**
   * The reservation of a portion of a credit or debit balance for the cost of services not yet rendered. 
   * minimum: 0
   * maximum: 1.0E+18
   * @return reservedAmount
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin("0") @DecimalMax(value="1.0E+18",inclusive=false)  @ApiModelProperty(value = "The reservation of a portion of a credit or debit balance for the cost of services not yet rendered. ")
  @JsonProperty(JSON_PROPERTY_RESERVED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getReservedAmount() {
    return reservedAmount;
  }


  public void setReservedAmount(BigDecimal reservedAmount) {
    this.reservedAmount = reservedAmount;
  }


  public AccountArrangementPutItem remainingPeriodicTransfers(BigDecimal remainingPeriodicTransfers) {
    
    this.remainingPeriodicTransfers = remainingPeriodicTransfers;
    return this;
  }

   /**
   * The limitation in periodic saving transfers or withdrawals. In the case of the US, Regulation D enables for a maximum of 6 monthly savings transfers or withdrawals. 
   * minimum: 0
   * maximum: 1.0E+18
   * @return remainingPeriodicTransfers
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin("0") @DecimalMax(value="1.0E+18",inclusive=false)  @ApiModelProperty(value = "The limitation in periodic saving transfers or withdrawals. In the case of the US, Regulation D enables for a maximum of 6 monthly savings transfers or withdrawals. ")
  @JsonProperty(JSON_PROPERTY_REMAINING_PERIODIC_TRANSFERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getRemainingPeriodicTransfers() {
    return remainingPeriodicTransfers;
  }


  public void setRemainingPeriodicTransfers(BigDecimal remainingPeriodicTransfers) {
    this.remainingPeriodicTransfers = remainingPeriodicTransfers;
  }


  public AccountArrangementPutItem bankBranchCode2(String bankBranchCode2) {
    
    this.bankBranchCode2 = bankBranchCode2;
    return this;
  }

   /**
   * Another country-specific bank identification number or code: the Fedwire Routing Number in the US or another country-specific identifier. 
   * @return bankBranchCode2
  **/
  @javax.annotation.Nullable
 @Size(max=20)  @ApiModelProperty(value = "Another country-specific bank identification number or code: the Fedwire Routing Number in the US or another country-specific identifier. ")
  @JsonProperty(JSON_PROPERTY_BANK_BRANCH_CODE2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBankBranchCode2() {
    return bankBranchCode2;
  }


  public void setBankBranchCode2(String bankBranchCode2) {
    this.bankBranchCode2 = bankBranchCode2;
  }


  public AccountArrangementPutItem nextClosingDate(LocalDate nextClosingDate) {
    
    this.nextClosingDate = nextClosingDate;
    return this;
  }

   /**
   * The last day of the forthcoming billing cycle.
   * @return nextClosingDate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The last day of the forthcoming billing cycle.")
  @JsonProperty(JSON_PROPERTY_NEXT_CLOSING_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getNextClosingDate() {
    return nextClosingDate;
  }


  public void setNextClosingDate(LocalDate nextClosingDate) {
    this.nextClosingDate = nextClosingDate;
  }


  public AccountArrangementPutItem overdueSince(LocalDate overdueSince) {
    
    this.overdueSince = overdueSince;
    return this;
  }

   /**
   * The date in which the arrangement has been overdue since.
   * @return overdueSince
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The date in which the arrangement has been overdue since.")
  @JsonProperty(JSON_PROPERTY_OVERDUE_SINCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getOverdueSince() {
    return overdueSince;
  }


  public void setOverdueSince(LocalDate overdueSince) {
    this.overdueSince = overdueSince;
  }


  public AccountArrangementPutItem paymentsPastDue(Integer paymentsPastDue) {
    
    this.paymentsPastDue = paymentsPastDue;
    return this;
  }

   /**
   * The number of payments that have not been made by the cutoff time at the end of the due date.
   * minimum: 0
   * @return paymentsPastDue
  **/
  @javax.annotation.Nullable
 @Min(0)  @ApiModelProperty(value = "The number of payments that have not been made by the cutoff time at the end of the due date.")
  @JsonProperty(JSON_PROPERTY_PAYMENTS_PAST_DUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPaymentsPastDue() {
    return paymentsPastDue;
  }


  public void setPaymentsPastDue(Integer paymentsPastDue) {
    this.paymentsPastDue = paymentsPastDue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountArrangementPutItem accountArrangementPutItem = (AccountArrangementPutItem) o;
    return Objects.equals(this.name, accountArrangementPutItem.name) &&
        Objects.equals(this.bankAlias, accountArrangementPutItem.bankAlias) &&
        Objects.equals(this.bookedBalance, accountArrangementPutItem.bookedBalance) &&
        Objects.equals(this.availableBalance, accountArrangementPutItem.availableBalance) &&
        Objects.equals(this.creditLimit, accountArrangementPutItem.creditLimit) &&
        Objects.equals(this.IBAN, accountArrangementPutItem.IBAN) &&
        Objects.equals(this.BBAN, accountArrangementPutItem.BBAN) &&
        Objects.equals(this.BIC, accountArrangementPutItem.BIC) &&
        Objects.equals(this.currency, accountArrangementPutItem.currency) &&
        Objects.equals(this.externalTransferAllowed, accountArrangementPutItem.externalTransferAllowed) &&
        Objects.equals(this.urgentTransferAllowed, accountArrangementPutItem.urgentTransferAllowed) &&
        Objects.equals(this.accruedInterest, accountArrangementPutItem.accruedInterest) &&
        Objects.equals(this.number, accountArrangementPutItem.number) &&
        Objects.equals(this.principalAmount, accountArrangementPutItem.principalAmount) &&
        Objects.equals(this.currentInvestmentValue, accountArrangementPutItem.currentInvestmentValue) &&
        Objects.equals(this.productNumber, accountArrangementPutItem.productNumber) &&
        Objects.equals(this.bankBranchCode, accountArrangementPutItem.bankBranchCode) &&
        Objects.equals(this.accountOpeningDate, accountArrangementPutItem.accountOpeningDate) &&
        Objects.equals(this.accountInterestRate, accountArrangementPutItem.accountInterestRate) &&
        Objects.equals(this.valueDateBalance, accountArrangementPutItem.valueDateBalance) &&
        Objects.equals(this.creditLimitUsage, accountArrangementPutItem.creditLimitUsage) &&
        Objects.equals(this.creditLimitInterestRate, accountArrangementPutItem.creditLimitInterestRate) &&
        Objects.equals(this.creditLimitExpiryDate, accountArrangementPutItem.creditLimitExpiryDate) &&
        Objects.equals(this.debitCards, accountArrangementPutItem.debitCards) &&
        Objects.equals(this.startDate, accountArrangementPutItem.startDate) &&
        Objects.equals(this.termUnit, accountArrangementPutItem.termUnit) &&
        Objects.equals(this.termNumber, accountArrangementPutItem.termNumber) &&
        Objects.equals(this.maturityDate, accountArrangementPutItem.maturityDate) &&
        Objects.equals(this.maturityAmount, accountArrangementPutItem.maturityAmount) &&
        Objects.equals(this.autoRenewalIndicator, accountArrangementPutItem.autoRenewalIndicator) &&
        Objects.equals(this.interestPaymentFrequencyUnit, accountArrangementPutItem.interestPaymentFrequencyUnit) &&
        Objects.equals(this.interestPaymentFrequencyNumber, accountArrangementPutItem.interestPaymentFrequencyNumber) &&
        Objects.equals(this.interestSettlementAccount, accountArrangementPutItem.interestSettlementAccount) &&
        Objects.equals(this.outstandingPrincipalAmount, accountArrangementPutItem.outstandingPrincipalAmount) &&
        Objects.equals(this.monthlyInstalmentAmount, accountArrangementPutItem.monthlyInstalmentAmount) &&
        Objects.equals(this.amountInArrear, accountArrangementPutItem.amountInArrear) &&
        Objects.equals(this.minimumRequiredBalance, accountArrangementPutItem.minimumRequiredBalance) &&
        Objects.equals(this.creditCardAccountNumber, accountArrangementPutItem.creditCardAccountNumber) &&
        Objects.equals(this.validThru, accountArrangementPutItem.validThru) &&
        Objects.equals(this.applicableInterestRate, accountArrangementPutItem.applicableInterestRate) &&
        Objects.equals(this.remainingCredit, accountArrangementPutItem.remainingCredit) &&
        Objects.equals(this.outstandingPayment, accountArrangementPutItem.outstandingPayment) &&
        Objects.equals(this.minimumPayment, accountArrangementPutItem.minimumPayment) &&
        Objects.equals(this.minimumPaymentDueDate, accountArrangementPutItem.minimumPaymentDueDate) &&
        Objects.equals(this.totalInvestmentValue, accountArrangementPutItem.totalInvestmentValue) &&
        Objects.equals(this.accountHolderAddressLine1, accountArrangementPutItem.accountHolderAddressLine1) &&
        Objects.equals(this.accountHolderAddressLine2, accountArrangementPutItem.accountHolderAddressLine2) &&
        Objects.equals(this.accountHolderStreetName, accountArrangementPutItem.accountHolderStreetName) &&
        Objects.equals(this.town, accountArrangementPutItem.town) &&
        Objects.equals(this.postCode, accountArrangementPutItem.postCode) &&
        Objects.equals(this.countrySubDivision, accountArrangementPutItem.countrySubDivision) &&
        Objects.equals(this.accountHolderNames, accountArrangementPutItem.accountHolderNames) &&
        Objects.equals(this.accountHolderCountry, accountArrangementPutItem.accountHolderCountry) &&
        Objects.equals(this.creditAccount, accountArrangementPutItem.creditAccount) &&
        Objects.equals(this.debitAccount, accountArrangementPutItem.debitAccount) &&
        Objects.equals(this.lastUpdateDate, accountArrangementPutItem.lastUpdateDate) &&
        Objects.equals(this.sourceId, accountArrangementPutItem.sourceId) &&
        Objects.equals(this.stateId, accountArrangementPutItem.stateId) &&
        Objects.equals(this.parentId, accountArrangementPutItem.parentId) &&
        Objects.equals(this.externalParentId, accountArrangementPutItem.externalParentId) &&
        Objects.equals(this.productId, accountArrangementPutItem.productId) &&
        Objects.equals(this.cardDetails, accountArrangementPutItem.cardDetails) &&
        Objects.equals(this.interestDetails, accountArrangementPutItem.interestDetails) &&
        Objects.equals(this.reservedAmount, accountArrangementPutItem.reservedAmount) &&
        Objects.equals(this.remainingPeriodicTransfers, accountArrangementPutItem.remainingPeriodicTransfers) &&
        Objects.equals(this.bankBranchCode2, accountArrangementPutItem.bankBranchCode2) &&
        Objects.equals(this.nextClosingDate, accountArrangementPutItem.nextClosingDate) &&
        Objects.equals(this.overdueSince, accountArrangementPutItem.overdueSince) &&
        Objects.equals(this.paymentsPastDue, accountArrangementPutItem.paymentsPastDue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, bankAlias, bookedBalance, availableBalance, creditLimit, IBAN, BBAN, BIC, currency, externalTransferAllowed, urgentTransferAllowed, accruedInterest, number, principalAmount, currentInvestmentValue, productNumber, bankBranchCode, accountOpeningDate, accountInterestRate, valueDateBalance, creditLimitUsage, creditLimitInterestRate, creditLimitExpiryDate, debitCards, startDate, termUnit, termNumber, maturityDate, maturityAmount, autoRenewalIndicator, interestPaymentFrequencyUnit, interestPaymentFrequencyNumber, interestSettlementAccount, outstandingPrincipalAmount, monthlyInstalmentAmount, amountInArrear, minimumRequiredBalance, creditCardAccountNumber, validThru, applicableInterestRate, remainingCredit, outstandingPayment, minimumPayment, minimumPaymentDueDate, totalInvestmentValue, accountHolderAddressLine1, accountHolderAddressLine2, accountHolderStreetName, town, postCode, countrySubDivision, accountHolderNames, accountHolderCountry, creditAccount, debitAccount, lastUpdateDate, sourceId, stateId, parentId, externalParentId, productId, cardDetails, interestDetails, reservedAmount, remainingPeriodicTransfers, bankBranchCode2, nextClosingDate, overdueSince, paymentsPastDue, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountArrangementPutItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    bankAlias: ").append(toIndentedString(bankAlias)).append("\n");
    sb.append("    bookedBalance: ").append(toIndentedString(bookedBalance)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    creditLimit: ").append(toIndentedString(creditLimit)).append("\n");
    sb.append("    IBAN: ").append(toIndentedString(IBAN)).append("\n");
    sb.append("    BBAN: ").append(toIndentedString(BBAN)).append("\n");
    sb.append("    BIC: ").append(toIndentedString(BIC)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    externalTransferAllowed: ").append(toIndentedString(externalTransferAllowed)).append("\n");
    sb.append("    urgentTransferAllowed: ").append(toIndentedString(urgentTransferAllowed)).append("\n");
    sb.append("    accruedInterest: ").append(toIndentedString(accruedInterest)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    principalAmount: ").append(toIndentedString(principalAmount)).append("\n");
    sb.append("    currentInvestmentValue: ").append(toIndentedString(currentInvestmentValue)).append("\n");
    sb.append("    productNumber: ").append(toIndentedString(productNumber)).append("\n");
    sb.append("    bankBranchCode: ").append(toIndentedString(bankBranchCode)).append("\n");
    sb.append("    accountOpeningDate: ").append(toIndentedString(accountOpeningDate)).append("\n");
    sb.append("    accountInterestRate: ").append(toIndentedString(accountInterestRate)).append("\n");
    sb.append("    valueDateBalance: ").append(toIndentedString(valueDateBalance)).append("\n");
    sb.append("    creditLimitUsage: ").append(toIndentedString(creditLimitUsage)).append("\n");
    sb.append("    creditLimitInterestRate: ").append(toIndentedString(creditLimitInterestRate)).append("\n");
    sb.append("    creditLimitExpiryDate: ").append(toIndentedString(creditLimitExpiryDate)).append("\n");
    sb.append("    debitCards: ").append(toIndentedString(debitCards)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    termUnit: ").append(toIndentedString(termUnit)).append("\n");
    sb.append("    termNumber: ").append(toIndentedString(termNumber)).append("\n");
    sb.append("    maturityDate: ").append(toIndentedString(maturityDate)).append("\n");
    sb.append("    maturityAmount: ").append(toIndentedString(maturityAmount)).append("\n");
    sb.append("    autoRenewalIndicator: ").append(toIndentedString(autoRenewalIndicator)).append("\n");
    sb.append("    interestPaymentFrequencyUnit: ").append(toIndentedString(interestPaymentFrequencyUnit)).append("\n");
    sb.append("    interestPaymentFrequencyNumber: ").append(toIndentedString(interestPaymentFrequencyNumber)).append("\n");
    sb.append("    interestSettlementAccount: ").append(toIndentedString(interestSettlementAccount)).append("\n");
    sb.append("    outstandingPrincipalAmount: ").append(toIndentedString(outstandingPrincipalAmount)).append("\n");
    sb.append("    monthlyInstalmentAmount: ").append(toIndentedString(monthlyInstalmentAmount)).append("\n");
    sb.append("    amountInArrear: ").append(toIndentedString(amountInArrear)).append("\n");
    sb.append("    minimumRequiredBalance: ").append(toIndentedString(minimumRequiredBalance)).append("\n");
    sb.append("    creditCardAccountNumber: ").append(toIndentedString(creditCardAccountNumber)).append("\n");
    sb.append("    validThru: ").append(toIndentedString(validThru)).append("\n");
    sb.append("    applicableInterestRate: ").append(toIndentedString(applicableInterestRate)).append("\n");
    sb.append("    remainingCredit: ").append(toIndentedString(remainingCredit)).append("\n");
    sb.append("    outstandingPayment: ").append(toIndentedString(outstandingPayment)).append("\n");
    sb.append("    minimumPayment: ").append(toIndentedString(minimumPayment)).append("\n");
    sb.append("    minimumPaymentDueDate: ").append(toIndentedString(minimumPaymentDueDate)).append("\n");
    sb.append("    totalInvestmentValue: ").append(toIndentedString(totalInvestmentValue)).append("\n");
    sb.append("    accountHolderAddressLine1: ").append(toIndentedString(accountHolderAddressLine1)).append("\n");
    sb.append("    accountHolderAddressLine2: ").append(toIndentedString(accountHolderAddressLine2)).append("\n");
    sb.append("    accountHolderStreetName: ").append(toIndentedString(accountHolderStreetName)).append("\n");
    sb.append("    town: ").append(toIndentedString(town)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("    countrySubDivision: ").append(toIndentedString(countrySubDivision)).append("\n");
    sb.append("    accountHolderNames: ").append(toIndentedString(accountHolderNames)).append("\n");
    sb.append("    accountHolderCountry: ").append(toIndentedString(accountHolderCountry)).append("\n");
    sb.append("    creditAccount: ").append(toIndentedString(creditAccount)).append("\n");
    sb.append("    debitAccount: ").append(toIndentedString(debitAccount)).append("\n");
    sb.append("    lastUpdateDate: ").append(toIndentedString(lastUpdateDate)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    stateId: ").append(toIndentedString(stateId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    externalParentId: ").append(toIndentedString(externalParentId)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    cardDetails: ").append(toIndentedString(cardDetails)).append("\n");
    sb.append("    interestDetails: ").append(toIndentedString(interestDetails)).append("\n");
    sb.append("    reservedAmount: ").append(toIndentedString(reservedAmount)).append("\n");
    sb.append("    remainingPeriodicTransfers: ").append(toIndentedString(remainingPeriodicTransfers)).append("\n");
    sb.append("    bankBranchCode2: ").append(toIndentedString(bankBranchCode2)).append("\n");
    sb.append("    nextClosingDate: ").append(toIndentedString(nextClosingDate)).append("\n");
    sb.append("    overdueSince: ").append(toIndentedString(overdueSince)).append("\n");
    sb.append("    paymentsPastDue: ").append(toIndentedString(paymentsPastDue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

