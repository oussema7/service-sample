/*
 * Arrangement Manager Service API
 * This API allows other DBS services to operate on products
 *
 * The version of the OpenAPI document: 2.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */


package com.microsphere.arrangement.service.api.listener.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.microsphere.arrangement.service.api.listener.v2.model.AdditionalProperties;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * AbstractCardDetails
 */
@JsonPropertyOrder({
  AbstractCardDetails.JSON_PROPERTY_CARD_PROVIDER,
  AbstractCardDetails.JSON_PROPERTY_SECURED,
  AbstractCardDetails.JSON_PROPERTY_AVAILABLE_CASH_CREDIT,
  AbstractCardDetails.JSON_PROPERTY_CASH_CREDIT_LIMIT,
  AbstractCardDetails.JSON_PROPERTY_LAST_PAYMENT_DATE,
  AbstractCardDetails.JSON_PROPERTY_LAST_PAYMENT_AMOUNT,
  AbstractCardDetails.JSON_PROPERTY_LATE_PAYMENT_FEE,
  AbstractCardDetails.JSON_PROPERTY_PREVIOUS_STATEMENT_DATE,
  AbstractCardDetails.JSON_PROPERTY_PREVIOUS_STATEMENT_BALANCE,
  AbstractCardDetails.JSON_PROPERTY_STATEMENT_BALANCE
})
@javax.annotation.Generated(value = "com.backbase.oss.codegen.java.BoatJavaCodeGen", date = "2024-11-14T00:30:51.050595100+01:00[Africa/Tunis]")
public  class AbstractCardDetails extends AdditionalProperties {
  public static final String JSON_PROPERTY_CARD_PROVIDER = "cardProvider";
  private String cardProvider;

  public static final String JSON_PROPERTY_SECURED = "secured";
  private Boolean secured;

  public static final String JSON_PROPERTY_AVAILABLE_CASH_CREDIT = "availableCashCredit";
  private BigDecimal availableCashCredit;

  public static final String JSON_PROPERTY_CASH_CREDIT_LIMIT = "cashCreditLimit";
  private BigDecimal cashCreditLimit;

  public static final String JSON_PROPERTY_LAST_PAYMENT_DATE = "lastPaymentDate";
  private LocalDate lastPaymentDate;

  public static final String JSON_PROPERTY_LAST_PAYMENT_AMOUNT = "lastPaymentAmount";
  private BigDecimal lastPaymentAmount;

  public static final String JSON_PROPERTY_LATE_PAYMENT_FEE = "latePaymentFee";
  private String latePaymentFee;

  public static final String JSON_PROPERTY_PREVIOUS_STATEMENT_DATE = "previousStatementDate";
  private LocalDate previousStatementDate;

  public static final String JSON_PROPERTY_PREVIOUS_STATEMENT_BALANCE = "previousStatementBalance";
  private BigDecimal previousStatementBalance;

  public static final String JSON_PROPERTY_STATEMENT_BALANCE = "statementBalance";
  private BigDecimal statementBalance;


  public AbstractCardDetails cardProvider(String cardProvider) {
    
    this.cardProvider = cardProvider;
    return this;
  }

   /**
   * This field specifies the Card Provider associated with the Account.  *Example*: Maestro, Visa, Master Card, American Express or Discover. 
   * @return cardProvider
  **/
  @NotNull
 @Size(min=1,max=40)  @ApiModelProperty(required = true, value = "This field specifies the Card Provider associated with the Account.  *Example*: Maestro, Visa, Master Card, American Express or Discover. ")
  @JsonProperty(JSON_PROPERTY_CARD_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCardProvider() {
    return cardProvider;
  }


  public void setCardProvider(String cardProvider) {
    this.cardProvider = cardProvider;
  }


  public AbstractCardDetails secured(Boolean secured) {
    
    this.secured = secured;
    return this;
  }

   /**
   * A card can either be Secured or Unsecured.   - *true*: amount deposited in the CC determines the Limit.   - *false*: credit limit is based off various factors including the CC holder’s Credit Score,   Credit History and is determined by the lending bank. 
   * @return secured
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A card can either be Secured or Unsecured.   - *true*: amount deposited in the CC determines the Limit.   - *false*: credit limit is based off various factors including the CC holder’s Credit Score,   Credit History and is determined by the lending bank. ")
  @JsonProperty(JSON_PROPERTY_SECURED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSecured() {
    return secured;
  }


  public void setSecured(Boolean secured) {
    this.secured = secured;
  }


  public AbstractCardDetails availableCashCredit(BigDecimal availableCashCredit) {
    
    this.availableCashCredit = availableCashCredit;
    return this;
  }

   /**
   * The amount of money currently available for a bank cash advance.  This is calculated given the portion of the CashCreditLimit which has been used for Cash Advance Transactions. 
   * minimum: 0
   * @return availableCashCredit
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin("0")  @ApiModelProperty(value = "The amount of money currently available for a bank cash advance.  This is calculated given the portion of the CashCreditLimit which has been used for Cash Advance Transactions. ")
  @JsonProperty(JSON_PROPERTY_AVAILABLE_CASH_CREDIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAvailableCashCredit() {
    return availableCashCredit;
  }


  public void setAvailableCashCredit(BigDecimal availableCashCredit) {
    this.availableCashCredit = availableCashCredit;
  }


  public AbstractCardDetails cashCreditLimit(BigDecimal cashCreditLimit) {
    
    this.cashCreditLimit = cashCreditLimit;
    return this;
  }

   /**
   * The portion of the credit limit available for bank cash advance transactions.. 
   * minimum: 0
   * @return cashCreditLimit
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin("0")  @ApiModelProperty(value = "The portion of the credit limit available for bank cash advance transactions.. ")
  @JsonProperty(JSON_PROPERTY_CASH_CREDIT_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCashCreditLimit() {
    return cashCreditLimit;
  }


  public void setCashCreditLimit(BigDecimal cashCreditLimit) {
    this.cashCreditLimit = cashCreditLimit;
  }


  public AbstractCardDetails lastPaymentDate(LocalDate lastPaymentDate) {
    
    this.lastPaymentDate = lastPaymentDate;
    return this;
  }

   /**
   * The Date the last payment was made on the Credit-based arrangement 
   * @return lastPaymentDate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The Date the last payment was made on the Credit-based arrangement ")
  @JsonProperty(JSON_PROPERTY_LAST_PAYMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getLastPaymentDate() {
    return lastPaymentDate;
  }


  public void setLastPaymentDate(LocalDate lastPaymentDate) {
    this.lastPaymentDate = lastPaymentDate;
  }


  public AbstractCardDetails lastPaymentAmount(BigDecimal lastPaymentAmount) {
    
    this.lastPaymentAmount = lastPaymentAmount;
    return this;
  }

   /**
   * The amount of the last payment that was made on the Credit-based arrangement. 
   * minimum: 0
   * @return lastPaymentAmount
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin("0")  @ApiModelProperty(value = "The amount of the last payment that was made on the Credit-based arrangement. ")
  @JsonProperty(JSON_PROPERTY_LAST_PAYMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getLastPaymentAmount() {
    return lastPaymentAmount;
  }


  public void setLastPaymentAmount(BigDecimal lastPaymentAmount) {
    this.lastPaymentAmount = lastPaymentAmount;
  }


  public AbstractCardDetails latePaymentFee(String latePaymentFee) {
    
    this.latePaymentFee = latePaymentFee;
    return this;
  }

   /**
   * The charge triggered by infractions such as late credit card payments. It can be expressed as fixed amount or as percent.  *Example*:   - *12.32*: as fixed amount   - *3.14%*: as percent 
   * @return latePaymentFee
  **/
  @javax.annotation.Nullable
 @Pattern(regexp="^\\d+(\\.\\d+)?%?$")  @ApiModelProperty(value = "The charge triggered by infractions such as late credit card payments. It can be expressed as fixed amount or as percent.  *Example*:   - *12.32*: as fixed amount   - *3.14%*: as percent ")
  @JsonProperty(JSON_PROPERTY_LATE_PAYMENT_FEE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLatePaymentFee() {
    return latePaymentFee;
  }


  public void setLatePaymentFee(String latePaymentFee) {
    this.latePaymentFee = latePaymentFee;
  }


  public AbstractCardDetails previousStatementDate(LocalDate previousStatementDate) {
    
    this.previousStatementDate = previousStatementDate;
    return this;
  }

   /**
   * The date of the previous billing cycle for the arrangement. 
   * @return previousStatementDate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The date of the previous billing cycle for the arrangement. ")
  @JsonProperty(JSON_PROPERTY_PREVIOUS_STATEMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getPreviousStatementDate() {
    return previousStatementDate;
  }


  public void setPreviousStatementDate(LocalDate previousStatementDate) {
    this.previousStatementDate = previousStatementDate;
  }


  public AbstractCardDetails previousStatementBalance(BigDecimal previousStatementBalance) {
    
    this.previousStatementBalance = previousStatementBalance;
    return this;
  }

   /**
   * The amount owed on the credit card as of the previous billing cycle. 
   * @return previousStatementBalance
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The amount owed on the credit card as of the previous billing cycle. ")
  @JsonProperty(JSON_PROPERTY_PREVIOUS_STATEMENT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPreviousStatementBalance() {
    return previousStatementBalance;
  }


  public void setPreviousStatementBalance(BigDecimal previousStatementBalance) {
    this.previousStatementBalance = previousStatementBalance;
  }


  public AbstractCardDetails statementBalance(BigDecimal statementBalance) {
    
    this.statementBalance = statementBalance;
    return this;
  }

   /**
   * The amount owed on the credit card as of the latest billing cycle.  
   * @return statementBalance
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The amount owed on the credit card as of the latest billing cycle.  ")
  @JsonProperty(JSON_PROPERTY_STATEMENT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getStatementBalance() {
    return statementBalance;
  }


  public void setStatementBalance(BigDecimal statementBalance) {
    this.statementBalance = statementBalance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractCardDetails abstractCardDetails = (AbstractCardDetails) o;
    return Objects.equals(this.cardProvider, abstractCardDetails.cardProvider) &&
        Objects.equals(this.secured, abstractCardDetails.secured) &&
        Objects.equals(this.availableCashCredit, abstractCardDetails.availableCashCredit) &&
        Objects.equals(this.cashCreditLimit, abstractCardDetails.cashCreditLimit) &&
        Objects.equals(this.lastPaymentDate, abstractCardDetails.lastPaymentDate) &&
        Objects.equals(this.lastPaymentAmount, abstractCardDetails.lastPaymentAmount) &&
        Objects.equals(this.latePaymentFee, abstractCardDetails.latePaymentFee) &&
        Objects.equals(this.previousStatementDate, abstractCardDetails.previousStatementDate) &&
        Objects.equals(this.previousStatementBalance, abstractCardDetails.previousStatementBalance) &&
        Objects.equals(this.statementBalance, abstractCardDetails.statementBalance) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardProvider, secured, availableCashCredit, cashCreditLimit, lastPaymentDate, lastPaymentAmount, latePaymentFee, previousStatementDate, previousStatementBalance, statementBalance, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractCardDetails {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    cardProvider: ").append(toIndentedString(cardProvider)).append("\n");
    sb.append("    secured: ").append(toIndentedString(secured)).append("\n");
    sb.append("    availableCashCredit: ").append(toIndentedString(availableCashCredit)).append("\n");
    sb.append("    cashCreditLimit: ").append(toIndentedString(cashCreditLimit)).append("\n");
    sb.append("    lastPaymentDate: ").append(toIndentedString(lastPaymentDate)).append("\n");
    sb.append("    lastPaymentAmount: ").append(toIndentedString(lastPaymentAmount)).append("\n");
    sb.append("    latePaymentFee: ").append(toIndentedString(latePaymentFee)).append("\n");
    sb.append("    previousStatementDate: ").append(toIndentedString(previousStatementDate)).append("\n");
    sb.append("    previousStatementBalance: ").append(toIndentedString(previousStatementBalance)).append("\n");
    sb.append("    statementBalance: ").append(toIndentedString(statementBalance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

