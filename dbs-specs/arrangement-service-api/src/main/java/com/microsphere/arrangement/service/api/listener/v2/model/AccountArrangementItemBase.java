/*
 * Arrangement Manager Service API
 * This API allows other DBS services to operate on products
 *
 * The version of the OpenAPI document: 2.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */


package com.microsphere.arrangement.service.api.listener.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.microsphere.arrangement.service.api.listener.v2.model.AbstractArrangementItemBase;
import com.microsphere.arrangement.service.api.listener.v2.model.CardDetails;
import com.microsphere.arrangement.service.api.listener.v2.model.DebitCardItem;
import com.microsphere.arrangement.service.api.listener.v2.model.InterestDetails;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * AccountArrangementItemBase
 */
@JsonPropertyOrder({
  AccountArrangementItemBase.JSON_PROPERTY_DEBIT_CARDS,
  AccountArrangementItemBase.JSON_PROPERTY_CARD_DETAILS,
  AccountArrangementItemBase.JSON_PROPERTY_INTEREST_DETAILS,
  AccountArrangementItemBase.JSON_PROPERTY_RESERVED_AMOUNT,
  AccountArrangementItemBase.JSON_PROPERTY_REMAINING_PERIODIC_TRANSFERS,
  AccountArrangementItemBase.JSON_PROPERTY_BANK_BRANCH_CODE2,
  AccountArrangementItemBase.JSON_PROPERTY_NEXT_CLOSING_DATE,
  AccountArrangementItemBase.JSON_PROPERTY_OVERDUE_SINCE,
  AccountArrangementItemBase.JSON_PROPERTY_PAYMENTS_PAST_DUE
})
@javax.annotation.Generated(value = "com.backbase.oss.codegen.java.BoatJavaCodeGen", date = "2024-11-14T00:30:51.050595100+01:00[Africa/Tunis]")
public  class AccountArrangementItemBase extends AbstractArrangementItemBase {
  public static final String JSON_PROPERTY_DEBIT_CARDS = "debitCards";
  private List<DebitCardItem> debitCards = null;

  public static final String JSON_PROPERTY_CARD_DETAILS = "cardDetails";
  private CardDetails cardDetails;

  public static final String JSON_PROPERTY_INTEREST_DETAILS = "interestDetails";
  private InterestDetails interestDetails;

  public static final String JSON_PROPERTY_RESERVED_AMOUNT = "reservedAmount";
  private BigDecimal reservedAmount;

  public static final String JSON_PROPERTY_REMAINING_PERIODIC_TRANSFERS = "remainingPeriodicTransfers";
  private BigDecimal remainingPeriodicTransfers;

  public static final String JSON_PROPERTY_BANK_BRANCH_CODE2 = "bankBranchCode2";
  private String bankBranchCode2;

  public static final String JSON_PROPERTY_NEXT_CLOSING_DATE = "nextClosingDate";
  private LocalDate nextClosingDate;

  public static final String JSON_PROPERTY_OVERDUE_SINCE = "overdueSince";
  private LocalDate overdueSince;

  public static final String JSON_PROPERTY_PAYMENTS_PAST_DUE = "paymentsPastDue";
  private Integer paymentsPastDue;


  public AccountArrangementItemBase debitCards(List<DebitCardItem> debitCards) {
    
    this.debitCards = debitCards;
    return this;
  }

  public AccountArrangementItemBase addDebitCardsItem(DebitCardItem debitCardsItem) {
    if (this.debitCards == null) {
      this.debitCards = new ArrayList<>();
    }
    this.debitCards.add(debitCardsItem);
    return this;
  }

   /**
   * Get debitCards
   * @return debitCards
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DEBIT_CARDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DebitCardItem> getDebitCards() {
    return debitCards;
  }


  public void setDebitCards(List<DebitCardItem> debitCards) {
    this.debitCards = debitCards;
  }


  public AccountArrangementItemBase cardDetails(CardDetails cardDetails) {
    
    this.cardDetails = cardDetails;
    return this;
  }

   /**
   * Get cardDetails
   * @return cardDetails
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CARD_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CardDetails getCardDetails() {
    return cardDetails;
  }


  public void setCardDetails(CardDetails cardDetails) {
    this.cardDetails = cardDetails;
  }


  public AccountArrangementItemBase interestDetails(InterestDetails interestDetails) {
    
    this.interestDetails = interestDetails;
    return this;
  }

   /**
   * Get interestDetails
   * @return interestDetails
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_INTEREST_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterestDetails getInterestDetails() {
    return interestDetails;
  }


  public void setInterestDetails(InterestDetails interestDetails) {
    this.interestDetails = interestDetails;
  }


  public AccountArrangementItemBase reservedAmount(BigDecimal reservedAmount) {
    
    this.reservedAmount = reservedAmount;
    return this;
  }

   /**
   * The reservation of a portion of a credit or debit balance for the cost of services not yet rendered. 
   * minimum: 0
   * maximum: 1.0E+18
   * @return reservedAmount
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin("0") @DecimalMax(value="1.0E+18",inclusive=false)  @ApiModelProperty(value = "The reservation of a portion of a credit or debit balance for the cost of services not yet rendered. ")
  @JsonProperty(JSON_PROPERTY_RESERVED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getReservedAmount() {
    return reservedAmount;
  }


  public void setReservedAmount(BigDecimal reservedAmount) {
    this.reservedAmount = reservedAmount;
  }


  public AccountArrangementItemBase remainingPeriodicTransfers(BigDecimal remainingPeriodicTransfers) {
    
    this.remainingPeriodicTransfers = remainingPeriodicTransfers;
    return this;
  }

   /**
   * The limitation in periodic saving transfers or withdrawals. In the case of the US, Regulation D enables for a maximum of 6 monthly savings transfers or withdrawals. 
   * minimum: 0
   * maximum: 1.0E+18
   * @return remainingPeriodicTransfers
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin("0") @DecimalMax(value="1.0E+18",inclusive=false)  @ApiModelProperty(value = "The limitation in periodic saving transfers or withdrawals. In the case of the US, Regulation D enables for a maximum of 6 monthly savings transfers or withdrawals. ")
  @JsonProperty(JSON_PROPERTY_REMAINING_PERIODIC_TRANSFERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getRemainingPeriodicTransfers() {
    return remainingPeriodicTransfers;
  }


  public void setRemainingPeriodicTransfers(BigDecimal remainingPeriodicTransfers) {
    this.remainingPeriodicTransfers = remainingPeriodicTransfers;
  }


  public AccountArrangementItemBase bankBranchCode2(String bankBranchCode2) {
    
    this.bankBranchCode2 = bankBranchCode2;
    return this;
  }

   /**
   * Another country-specific bank identification number or code: the Fedwire Routing Number in the US or another country-specific identifier. 
   * @return bankBranchCode2
  **/
  @javax.annotation.Nullable
 @Size(max=20)  @ApiModelProperty(value = "Another country-specific bank identification number or code: the Fedwire Routing Number in the US or another country-specific identifier. ")
  @JsonProperty(JSON_PROPERTY_BANK_BRANCH_CODE2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBankBranchCode2() {
    return bankBranchCode2;
  }


  public void setBankBranchCode2(String bankBranchCode2) {
    this.bankBranchCode2 = bankBranchCode2;
  }


  public AccountArrangementItemBase nextClosingDate(LocalDate nextClosingDate) {
    
    this.nextClosingDate = nextClosingDate;
    return this;
  }

   /**
   * The last day of the forthcoming billing cycle.
   * @return nextClosingDate
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The last day of the forthcoming billing cycle.")
  @JsonProperty(JSON_PROPERTY_NEXT_CLOSING_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getNextClosingDate() {
    return nextClosingDate;
  }


  public void setNextClosingDate(LocalDate nextClosingDate) {
    this.nextClosingDate = nextClosingDate;
  }


  public AccountArrangementItemBase overdueSince(LocalDate overdueSince) {
    
    this.overdueSince = overdueSince;
    return this;
  }

   /**
   * The date in which the arrangement has been overdue since.
   * @return overdueSince
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "The date in which the arrangement has been overdue since.")
  @JsonProperty(JSON_PROPERTY_OVERDUE_SINCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getOverdueSince() {
    return overdueSince;
  }


  public void setOverdueSince(LocalDate overdueSince) {
    this.overdueSince = overdueSince;
  }


  public AccountArrangementItemBase paymentsPastDue(Integer paymentsPastDue) {
    
    this.paymentsPastDue = paymentsPastDue;
    return this;
  }

   /**
   * The number of payments that have not been made by the cutoff time at the end of the due date.
   * minimum: 0
   * @return paymentsPastDue
  **/
  @javax.annotation.Nullable
 @Min(0)  @ApiModelProperty(value = "The number of payments that have not been made by the cutoff time at the end of the due date.")
  @JsonProperty(JSON_PROPERTY_PAYMENTS_PAST_DUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPaymentsPastDue() {
    return paymentsPastDue;
  }


  public void setPaymentsPastDue(Integer paymentsPastDue) {
    this.paymentsPastDue = paymentsPastDue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountArrangementItemBase accountArrangementItemBase = (AccountArrangementItemBase) o;
    return Objects.equals(this.debitCards, accountArrangementItemBase.debitCards) &&
        Objects.equals(this.cardDetails, accountArrangementItemBase.cardDetails) &&
        Objects.equals(this.interestDetails, accountArrangementItemBase.interestDetails) &&
        Objects.equals(this.reservedAmount, accountArrangementItemBase.reservedAmount) &&
        Objects.equals(this.remainingPeriodicTransfers, accountArrangementItemBase.remainingPeriodicTransfers) &&
        Objects.equals(this.bankBranchCode2, accountArrangementItemBase.bankBranchCode2) &&
        Objects.equals(this.nextClosingDate, accountArrangementItemBase.nextClosingDate) &&
        Objects.equals(this.overdueSince, accountArrangementItemBase.overdueSince) &&
        Objects.equals(this.paymentsPastDue, accountArrangementItemBase.paymentsPastDue) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(debitCards, cardDetails, interestDetails, reservedAmount, remainingPeriodicTransfers, bankBranchCode2, nextClosingDate, overdueSince, paymentsPastDue, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountArrangementItemBase {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    debitCards: ").append(toIndentedString(debitCards)).append("\n");
    sb.append("    cardDetails: ").append(toIndentedString(cardDetails)).append("\n");
    sb.append("    interestDetails: ").append(toIndentedString(interestDetails)).append("\n");
    sb.append("    reservedAmount: ").append(toIndentedString(reservedAmount)).append("\n");
    sb.append("    remainingPeriodicTransfers: ").append(toIndentedString(remainingPeriodicTransfers)).append("\n");
    sb.append("    bankBranchCode2: ").append(toIndentedString(bankBranchCode2)).append("\n");
    sb.append("    nextClosingDate: ").append(toIndentedString(nextClosingDate)).append("\n");
    sb.append("    overdueSince: ").append(toIndentedString(overdueSince)).append("\n");
    sb.append("    paymentsPastDue: ").append(toIndentedString(paymentsPastDue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

