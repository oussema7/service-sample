/*
 * Arrangement Manager Service API
 * This API allows other DBS services to operate on products
 *
 * The version of the OpenAPI document: 2.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */


package com.microsphere.arrangement.service.api.listener.v2.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The property name used for ordering.
 */
public enum OrderByField {
  
  NAME("name"),
  
  BANKALIAS("bankAlias"),
  
  BOOKEDBALANCE("bookedBalance"),
  
  AVAILABLEBALANCE("availableBalance"),
  
  CREDITLIMIT("creditLimit"),
  
  DISPLAYNAME("displayName"),
  
  IBAN("IBAN"),
  
  BBAN("BBAN"),
  
  BIC("BIC"),
  
  CURRENCY("currency"),
  
  EXTERNALTRANSFERALLOWED("externalTransferAllowed"),
  
  URGENTTRANSFERALLOWED("urgentTransferAllowed"),
  
  ACCRUEDINTEREST("accruedInterest"),
  
  PRINCIPALAMOUNT("principalAmount"),
  
  CURRENTINVESTMENTVALUE("currentInvestmentValue"),
  
  PRODUCTNUMBER("productNumber"),
  
  ACCOUNTOPENINGDATE("accountOpeningDate"),
  
  ACCOUNTINTERESTRATE("accountInterestRate"),
  
  VALUEDATEBALANCE("valueDateBalance"),
  
  CREDITLIMITUSAGE("creditLimitUsage"),
  
  CREDITLIMITINTERESTRATE("creditLimitInterestRate"),
  
  CREDITLIMITEXPIRYDATE("creditLimitExpiryDate"),
  
  STARTDATE("startDate"),
  
  TERMUNIT("termUnit"),
  
  TERMNUMBER("termNumber"),
  
  MATURITYDATE("maturityDate"),
  
  MATURITYAMOUNT("maturityAmount"),
  
  AUTORENEWALINDICATOR("autoRenewalIndicator"),
  
  INTERESTPAYMENTFREQUENCYUNIT("interestPaymentFrequencyUnit"),
  
  INTERESTPAYMENTFREQUENCYNUMBER("interestPaymentFrequencyNumber"),
  
  INTERESTSETTLEMENTACCOUNT("interestSettlementAccount"),
  
  OUTSTANDINGPRINCIPALAMOUNT("outstandingPrincipalAmount"),
  
  MONTHLYINSTALMENTAMOUNT("monthlyInstalmentAmount"),
  
  AMOUNTINARREAR("amountInArrear"),
  
  MINIMUMREQUIREDBALANCE("minimumRequiredBalance"),
  
  CREDITCARDACCOUNTNUMBER("creditCardAccountNumber"),
  
  VALIDTHRU("validThru"),
  
  APPLICABLEINTERESTRATE("applicableInterestRate"),
  
  REMAININGCREDIT("remainingCredit"),
  
  OUTSTANDINGPAYMENT("outstandingPayment"),
  
  MINIMUMPAYMENT("minimumPayment"),
  
  MINIMUMPAYMENTDUEDATE("minimumPaymentDueDate"),
  
  TOTALINVESTMENTVALUE("totalInvestmentValue"),
  
  ACCOUNTHOLDERADDRESSLINE1("accountHolderAddressLine1"),
  
  ACCOUNTHOLDERADDRESSLINE2("accountHolderAddressLine2"),
  
  ACCOUNTHOLDERSTREETNAME("accountHolderStreetName"),
  
  POSTCODE("postCode"),
  
  TOWN("town"),
  
  COUNTRYSUBDIVISION("countrySubDivision"),
  
  ACCOUNTHOLDERCOUNTRY("accountHolderCountry"),
  
  CREDITACCOUNT("creditAccount"),
  
  DEBITACCOUNT("debitAccount"),
  
  PRODUCTKINDNAME("productKindName"),
  
  PRODUCTTYPENAME("productTypeName"),
  
  SOURCEID("sourceId");

  private String value;

  OrderByField(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static OrderByField fromValue(String value) {
    for (OrderByField b : OrderByField.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

