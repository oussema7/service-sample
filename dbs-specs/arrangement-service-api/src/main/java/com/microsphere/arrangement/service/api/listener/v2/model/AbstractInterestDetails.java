/*
 * Arrangement Manager Service API
 * This API allows other DBS services to operate on products
 *
 * The version of the OpenAPI document: 2.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */


package com.microsphere.arrangement.service.api.listener.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.microsphere.arrangement.service.api.listener.v2.model.AdditionalProperties;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * AbstractInterestDetails
 */
@JsonPropertyOrder({
  AbstractInterestDetails.JSON_PROPERTY_LAST_YEAR_ACCRUED_INTEREST,
  AbstractInterestDetails.JSON_PROPERTY_DIVIDEND_WITHHELD_Y_T_D,
  AbstractInterestDetails.JSON_PROPERTY_ANNUAL_PERCENTAGE_YIELD,
  AbstractInterestDetails.JSON_PROPERTY_CASH_ADVANCE_INTEREST_RATE,
  AbstractInterestDetails.JSON_PROPERTY_PENALTY_INTEREST_RATE
})
@javax.annotation.Generated(value = "com.backbase.oss.codegen.java.BoatJavaCodeGen", date = "2024-11-14T00:30:51.050595100+01:00[Africa/Tunis]")
public  class AbstractInterestDetails extends AdditionalProperties {
  public static final String JSON_PROPERTY_LAST_YEAR_ACCRUED_INTEREST = "lastYearAccruedInterest";
  private BigDecimal lastYearAccruedInterest;

  public static final String JSON_PROPERTY_DIVIDEND_WITHHELD_Y_T_D = "dividendWithheldYTD";
  private String dividendWithheldYTD;

  public static final String JSON_PROPERTY_ANNUAL_PERCENTAGE_YIELD = "annualPercentageYield";
  private BigDecimal annualPercentageYield;

  public static final String JSON_PROPERTY_CASH_ADVANCE_INTEREST_RATE = "cashAdvanceInterestRate";
  private BigDecimal cashAdvanceInterestRate;

  public static final String JSON_PROPERTY_PENALTY_INTEREST_RATE = "penaltyInterestRate";
  private BigDecimal penaltyInterestRate;


  public AbstractInterestDetails lastYearAccruedInterest(BigDecimal lastYearAccruedInterest) {
    
    this.lastYearAccruedInterest = lastYearAccruedInterest;
    return this;
  }

   /**
   * Last year&#39;s interest that was earned (credit interest) or due (debit interest)
   * minimum: -1.0E+18
   * maximum: 1.0E+18
   * @return lastYearAccruedInterest
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin(value="-1.0E+18",inclusive=false) @DecimalMax(value="1.0E+18",inclusive=false)  @ApiModelProperty(value = "Last year's interest that was earned (credit interest) or due (debit interest)")
  @JsonProperty(JSON_PROPERTY_LAST_YEAR_ACCRUED_INTEREST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getLastYearAccruedInterest() {
    return lastYearAccruedInterest;
  }


  public void setLastYearAccruedInterest(BigDecimal lastYearAccruedInterest) {
    this.lastYearAccruedInterest = lastYearAccruedInterest;
  }


  public AbstractInterestDetails dividendWithheldYTD(String dividendWithheldYTD) {
    
    this.dividendWithheldYTD = dividendWithheldYTD;
    return this;
  }

   /**
   * Total amount of interest that is being withheld up to date and the bank provides 1099 document end of the year for Tax return purpose  *Example*:   - *12.32*: as fixed amount   - *3.14%*: as percent 
   * @return dividendWithheldYTD
  **/
  @javax.annotation.Nullable
 @Pattern(regexp="^\\d+(\\.\\d+)?%?$")  @ApiModelProperty(value = "Total amount of interest that is being withheld up to date and the bank provides 1099 document end of the year for Tax return purpose  *Example*:   - *12.32*: as fixed amount   - *3.14%*: as percent ")
  @JsonProperty(JSON_PROPERTY_DIVIDEND_WITHHELD_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDividendWithheldYTD() {
    return dividendWithheldYTD;
  }


  public void setDividendWithheldYTD(String dividendWithheldYTD) {
    this.dividendWithheldYTD = dividendWithheldYTD;
  }


  public AbstractInterestDetails annualPercentageYield(BigDecimal annualPercentageYield) {
    
    this.annualPercentageYield = annualPercentageYield;
    return this;
  }

   /**
   * The real rate of return earned on a savings deposit or investment taking into account the effect of compounding interest.
   * minimum: -1000000.0
   * maximum: 1000000.0
   * @return annualPercentageYield
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin(value="-1000000.0",inclusive=false) @DecimalMax(value="1000000.0",inclusive=false)  @ApiModelProperty(value = "The real rate of return earned on a savings deposit or investment taking into account the effect of compounding interest.")
  @JsonProperty(JSON_PROPERTY_ANNUAL_PERCENTAGE_YIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAnnualPercentageYield() {
    return annualPercentageYield;
  }


  public void setAnnualPercentageYield(BigDecimal annualPercentageYield) {
    this.annualPercentageYield = annualPercentageYield;
  }


  public AbstractInterestDetails cashAdvanceInterestRate(BigDecimal cashAdvanceInterestRate) {
    
    this.cashAdvanceInterestRate = cashAdvanceInterestRate;
    return this;
  }

   /**
   * The Interest charge that is added monthly on the outstanding cash advance due on a credit card.
   * minimum: -1000000.0
   * maximum: 1000000.0
   * @return cashAdvanceInterestRate
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin(value="-1000000.0",inclusive=false) @DecimalMax(value="1000000.0",inclusive=false)  @ApiModelProperty(value = "The Interest charge that is added monthly on the outstanding cash advance due on a credit card.")
  @JsonProperty(JSON_PROPERTY_CASH_ADVANCE_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCashAdvanceInterestRate() {
    return cashAdvanceInterestRate;
  }


  public void setCashAdvanceInterestRate(BigDecimal cashAdvanceInterestRate) {
    this.cashAdvanceInterestRate = cashAdvanceInterestRate;
  }


  public AbstractInterestDetails penaltyInterestRate(BigDecimal penaltyInterestRate) {
    
    this.penaltyInterestRate = penaltyInterestRate;
    return this;
  }

   /**
   * The Interest charge triggered by infractions such as late credit card payments.
   * minimum: -1000000.0
   * maximum: 1000000.0
   * @return penaltyInterestRate
  **/
  @javax.annotation.Nullable
  @Valid
 @DecimalMin(value="-1000000.0",inclusive=false) @DecimalMax(value="1000000.0",inclusive=false)  @ApiModelProperty(value = "The Interest charge triggered by infractions such as late credit card payments.")
  @JsonProperty(JSON_PROPERTY_PENALTY_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPenaltyInterestRate() {
    return penaltyInterestRate;
  }


  public void setPenaltyInterestRate(BigDecimal penaltyInterestRate) {
    this.penaltyInterestRate = penaltyInterestRate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractInterestDetails abstractInterestDetails = (AbstractInterestDetails) o;
    return Objects.equals(this.lastYearAccruedInterest, abstractInterestDetails.lastYearAccruedInterest) &&
        Objects.equals(this.dividendWithheldYTD, abstractInterestDetails.dividendWithheldYTD) &&
        Objects.equals(this.annualPercentageYield, abstractInterestDetails.annualPercentageYield) &&
        Objects.equals(this.cashAdvanceInterestRate, abstractInterestDetails.cashAdvanceInterestRate) &&
        Objects.equals(this.penaltyInterestRate, abstractInterestDetails.penaltyInterestRate) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastYearAccruedInterest, dividendWithheldYTD, annualPercentageYield, cashAdvanceInterestRate, penaltyInterestRate, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractInterestDetails {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    lastYearAccruedInterest: ").append(toIndentedString(lastYearAccruedInterest)).append("\n");
    sb.append("    dividendWithheldYTD: ").append(toIndentedString(dividendWithheldYTD)).append("\n");
    sb.append("    annualPercentageYield: ").append(toIndentedString(annualPercentageYield)).append("\n");
    sb.append("    cashAdvanceInterestRate: ").append(toIndentedString(cashAdvanceInterestRate)).append("\n");
    sb.append("    penaltyInterestRate: ").append(toIndentedString(penaltyInterestRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

