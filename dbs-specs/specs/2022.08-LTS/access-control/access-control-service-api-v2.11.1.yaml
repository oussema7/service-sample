openapi: 3.0.3
info:
  title: Access Control service API
  description: "Manage user permissions, data groups, function groups and service\
    \ agreements from service to service side"
  version: 2.11.1
  x-icon: shield
servers:
  - url: http://localhost:8080/access-control
    description: The server
tags:
  - name: Retail
  - name: Business
  - name: Wealth
paths:
  /service-api/v2/accesscontrol/accessgroups/data-groups:
    summary: DataGroups
    description: Calls for interaction with data groups.
    get:
      tags:
        - DataGroup
      summary: Data Groups GET.
      description: "# Data Groups GET\r\n\r\nRequest method GET for fetching data\
        \ groups by serviceAgreementId and/or type.\r\n\r\n**Warning: Calling this\
        \ endpoint will bypass the validation of user permissions.**\r\n\r\n**Recommendation:\
        \ Use the corresponding endpoint on presentation service or use Auth Security\
        \ library.**\r\n"
      operationId: getDataGroups
      parameters:
        - name: serviceAgreementId
          in: query
          description: Service Agreement Id
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e0ce5d7eda6f015d7f12229a0001
        - name: type
          in: query
          description: Data group type
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: ARRANGEMENTS
        - name: includeItems
          in: query
          description: Defines if the items of the data groups will be returned in the
            response
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: true
          examples:
            example:
              summary: example
              value: false
      responses:
        "200":
          description: Data groups retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataGroups'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accesscontrol/accessgroups/data-groups/{id}:
    summary: DataGroupById
    description: Calls for interaction with single data group.
    get:
      tags:
        - DataGroup
      summary: Data Group - `GET`.
      description: "# Data Group - `GET`\r\n\r\nRequest method GET for fetching data\
        \ group by internal data group id.\r\n\r\n**Warning: Calling this endpoint\
        \ will bypass the validation of user permissions.**\r\n\r\n**Recommendation:\
        \ Use the corresponding endpoint on presentation service or use Auth Security\
        \ library.**\r\n"
      operationId: getDataGroupById
      parameters:
        - name: id
          in: path
          description: Data group ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791abffb0009
        - name: includeItems
          in: query
          description: Indicates whether data group items should be returned or not.
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: true
          examples:
            example:
              summary: example
      responses:
        "200":
          description: Data group by id retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataGroupItem'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/data-groups/bulk/search:
    summary: BulkSearchDataGroups
    description: Bulk search for Data Groups.
    post:
      tags:
        - DataGroup
      summary: Data Groups Bulk POST.
      description: "# Data Groups Bulk POST\r\n\r\nRequest for fetching data groups\
        \ by ids."
      operationId: postBulkSearchDataGroups
      requestBody:
        description: "# Data Groups Bulk POST\r\n\r\nRequest for fetching data groups\
          \ by ids."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataGroupsIds'
      responses:
        "200":
          description: Data Groups retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataGroups'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accesscontrol/legalentities/root:
    summary: RootLegalEntity
    description: Calls for interaction with root legal entity.
    get:
      tags:
        - LegalEntity
      summary: Legal Entity GET.
      description: "# Legal Entity GET\r\n\r\nRequest method GET for fetching Root\
        \ legal entity."
      operationId: getRootLegalEntity
      responses:
        "200":
          description: Root legal entity retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntityItemBase'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/legalentities/{id}:
    summary: LegalEntity
    description: Calls for interaction with single legal entity.
    get:
      tags:
        - LegalEntity
      summary: Legal Entity GET.
      description: "# Legal Entity GET\r\n\r\nRequest method GET for fetching legal\
        \ entity by legal entity internal id.\r\n\r\n**Warning: Calling this endpoint\
        \ will bypass the validation of user permissions.**\r\n\r\n**Recommendation:\
        \ Use the corresponding endpoint on presentation service or use Auth Security\
        \ library.**\r\n"
      operationId: getLegalEntity
      parameters:
        - name: id
          in: path
          description: Legal entity internal id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791accef0019
      responses:
        "200":
          description: Single legal entity retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntityItem'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/legalentities/{id}/serviceagreements/master:
    summary: MasterServiceAgreement
    description: Calls for interaction with legal entity master service agreement.
    get:
      tags:
        - LegalEntity
      summary: Legal Entities MSA GET.
      description: "# Legal Entities MSA GET\r\n\r\nRequest method GET for fetching\
        \ master service agreement of the given legal entity.\r\n\r\n**Warning: Calling\
        \ this endpoint will bypass the validation of user permissions.**\r\n\r\n\
        **Recommendation: Use the corresponding endpoint on presentation service or\
        \ use Auth Security library.**\r\n"
      operationId: getMasterServiceAgreement
      parameters:
        - name: id
          in: path
          description: Legal entity internal id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791accef0019
      responses:
        "200":
          description: Master service agreement retrieved for given legal Entity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAgreementItemQuery'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/legalentities/segmentation:
    summary: /segmentation
    description: List customers that user has access to
    get:
      tags:
        - LegalEntity
      summary: Legal Entities Segmentation GET.
      description: "# Legal Entities Segmentation GET\r\n\r\nList customers that user\
        \ has access to. \r\n"
      operationId: getSegmentation
      parameters:
        - name: query
          in: query
          description: "Search by name or external ID: partial term for name and whole\
          \ term for external ID"
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Bank
        - name: businessFunction
          in: query
          description: Name of the business function
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
        - name: serviceAgreementId
          in: query
          description: Service agreement id
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791accef0099
        - name: userId
          in: query
          description: User id
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791accef0015
        - name: legalEntityId
          in: query
          description: Legal Entity Id
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2785d787f78015d791accef0015
        - name: privilege
          in: query
          description: Name of the privilege
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: view
        - name: from
          in: query
          description: Page Number. Skip over pages of elements by specifying a start
            value for the query
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 0
          examples:
            example:
              summary: example
              value: 20
        - name: cursor
          in: query
          description: |
            Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from.
          required: false
          style: form
          explode: true
          schema:
            type: string
            default: ""
          examples:
            example:
              summary: example
              value: 76d5be8b-e80d-4842-8ce6-ea67519e8f74
        - name: size
          in: query
          description: "Limit the number of elements on the response. When used in combination\
          \ with cursor, the value\nis allowed to be a negative number to indicate\
          \ requesting records upwards from the starting point indicated\nby the cursor.\n"
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 10
          examples:
            example:
              summary: example
              value: 80
      responses:
        "200":
          description: "# Legal Entities Segmentation GET\r\n\r\nList customers that\
            \ user has access to. \r\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLegalEntities'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* Service\
            \ agreement id or legal entity id must be provided\r\n\r\n| Message |\
            \ key \r\n--- | --- |\r\n|Service Agreement Id or Legal Entity Id must\
            \ be provided|serviceAgreement.id.NOT_PROVIDED|"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: "# Reasons for getting HTTP status code 404:\r\n\r\n* Service\
            \ agreement does not exist\r\n\r\n| Message | key \r\n--- | --- |\r\n\
            |Service agreement does not exist|serviceAgreements.get.error.message.E_NOT_EXISTS|\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/function-groups:
    summary: FunctionGroups
    description: Calls for interaction with function groups.
    get:
      tags:
        - FunctionGroup
      summary: Function Groups GET.
      description: "# Function Groups GET\r\n\r\nRequest method GET for fetching function\
        \ groups by serviceAgreementId.\r\n\r\n**Warning: Calling this endpoint will\
        \ bypass the validation of user permissions.**\r\n\r\n**Recommendation: Use\
        \ the corresponding endpoint on presentation service or use Auth Security\
        \ library.**\r\n"
      operationId: getFunctionGroups
      parameters:
        - name: serviceAgreementId
          in: query
          description: Service Agreement id
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791accef0019
      responses:
        "200":
          description: List of function groups retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFunctionGroups'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accesscontrol/accessgroups/function-groups/{id}:
    summary: FunctionGroupById
    description: Calls for interaction with single function group.
    get:
      tags:
        - FunctionGroup
      summary: Function Group GET.
      description: "# Function Group GET\r\n\r\nRequest method GET for fetching function\
        \ group by id.\r\n\r\n**Warning: Calling this endpoint will bypass the validation\
        \ of user permissions.**\r\n\r\n**Recommendation: Use the corresponding endpoint\
        \ on presentation service or use Auth Security library.**\r\n"
      operationId: getFunctionGroupById
      parameters:
        - name: id
          in: path
          description: Function group id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d793cbd300093
      responses:
        "200":
          description: Function group retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionGroupItem'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/function-groups/bulk:
    summary: BulkFunctionGroups
    description: Bulk operation for Function Groups.
    post:
      tags:
        - FunctionGroup
      summary: Function Groups Bulk POST.
      description: "# Function Groups Bulk POST\r\n\r\nRequest for fetching function\
        \ groups by ids."
      operationId: postBulkFunctionGroups
      requestBody:
        description: "# Function Groups Bulk POST\r\n\r\nRequest for fetching function\
          \ groups by ids."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionGroupsIds'
      responses:
        "200":
          description: Function Groups retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFunctionGroups'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* One of\
            \ the function group ids does not exists\r\n\r\n| Message | key \r\n---\
            \ | --- |\r\n|Function group does not exist.|functionAccessGroup.get.error.message.E_NOT_EXISTS|"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accesscontrol/accessgroups/users/access/resources:
    summary: UserAccessToEntitlementsResource
    description: Checks if user has access to entitlements resource
    post:
      tags:
        - UserQuery
      summary: User Access Hierarchy.
      description: "# User Access Hierarchy\r\n\r\nRequest method POST for checking\
        \ if a provided user has access to the provided list of resource ids.\r\n\
        Returns list of resource ids that the provided user has access to, a sub list\
        \ of the provided ids.\r\n\r\n**Warning:**\r\n * Calling this endpoint will\
        \ bypass the validation of user permissions\r\n   of the user performing the\
        \ action.\r\n * Calling this endpoint will bypass the validation of users\r\
        \n   (existence of user and user belonging in legal entity)\r\n   upon users\
        \ on which the action is performed\r\n\r\n**Recommendation: Use the corresponding\
        \ endpoint on presentation service or use Auth Security library.**\r\n"
      operationId: postUserAccessToEntitlementsResource
      requestBody:
        description: "# User Access Hierarchy\r\n\r\nRequest method POST for checking\
          \ if a provided user has access to the provided list of resource ids.\r\n\
          Returns list of resource ids that the provided user has access to, a sub\
          \ list of the provided ids.\r\n\r\n**Warning:**\r\n * Calling this endpoint\
          \ will bypass the validation of user permissions\r\n   of the user performing\
          \ the action.\r\n * Calling this endpoint will bypass the validation of\
          \ users\r\n   (existence of user and user belonging in legal entity)\r\n\
          \   upon users on which the action is performed\r\n\r\n**Recommendation:\
          \ Use the corresponding endpoint on presentation service or use Auth Security\
          \ library.**\r\n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccessEntitlementsResource'
      responses:
        "200":
          description: Legal Entities that the user has access to
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextLegalEntities'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/users/access/serviceagreement:
    summary: UserAccessToServiceAgreement
    description: Checks if user has access to service agreement
    post:
      tags:
        - UserQuery
      summary: User Access Service agreement.
      description: "# User Access Service agreement\r\n\r\nRequest method POST for\
        \ checking if a given user has access to the given service agreement.\r\n\r\
        \n**Warning:**\r\n * Calling this endpoint will bypass the validation of user\
        \ permissions\r\n   of the user performing the action.\r\n * Calling this\
        \ endpoint will bypass the validation of users\r\n   (existence of user and\
        \ user belonging in legal entity)\r\n   upon users on which the action is\
        \ performed\r\n\r\n**Recommendation: Use the corresponding endpoint on presentation\
        \ service or use Auth Security library.**\r\n"
      operationId: postUserAccessToServiceAgreement
      requestBody:
        description: "# User Access Service agreement\r\n\r\nRequest method POST for\
          \ checking if a given user has access to the given service agreement.\r\n\
          \r\n**Warning:**\r\n * Calling this endpoint will bypass the validation\
          \ of user permissions\r\n   of the user performing the action.\r\n * Calling\
          \ this endpoint will bypass the validation of users\r\n   (existence of\
          \ user and user belonging in legal entity)\r\n   upon users on which the\
          \ action is performed\r\n\r\n**Recommendation: Use the corresponding endpoint\
          \ on presentation service or use Auth Security library.**\r\n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccessServiceAgreement'
      responses:
        "204":
          description: User Access to Service Agreement check
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/users/access/legalentities:
    summary: LegalEntitiesInContext
    description: Get legal entities that user has access to
    post:
      tags:
        - UserQuery
      summary: User Access Legal Entities.
      description: "# User Access Legal Entities\r\n\r\nRequest method POST for checking\
        \ to which legal entities the user has access to.\r\n\r\n**Warning:**\r\n\
        \ * Calling this endpoint will bypass the validation of user permissions\r\
        \n   of the user performing the action.\r\n * Calling this endpoint will bypass\
        \ the validation of users\r\n   (existence of user and user belonging in legal\
        \ entity)\r\n   upon users on which the action is performed\r\n\r\n**Recommendation:\
        \ Use the corresponding endpoint on presentation service or use Auth Security\
        \ library.**\r\n"
      operationId: postLegalEntitiesInContext
      requestBody:
        description: "# User Access Legal Entities\r\n\r\nRequest method POST for\
          \ checking to which legal entities the user has access to.\r\n\r\n**Warning:**\r\
          \n * Calling this endpoint will bypass the validation of user permissions\r\
          \n   of the user performing the action.\r\n * Calling this endpoint will\
          \ bypass the validation of users\r\n   (existence of user and user belonging\
          \ in legal entity)\r\n   upon users on which the action is performed\r\n\
          \r\n**Recommendation: Use the corresponding endpoint on presentation service\
          \ or use Auth Security library.**\r\n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccessLegalEntities'
      responses:
        "200":
          description: Legal Entities in context
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextLegalEntities'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/users/{userId}/service-agreements/{serviceAgreementId}/permissions:
    summary: PersistenceApprovalPermissions
    description: No description available
    get:
      tags:
        - UserQuery
      summary: User Permissions GET.
      description: "# User Permissions GET\r\n\r\nRequest method GET for fetching\
        \ user permissions for given user and service agreement.\r\nResponse contains\
        \ approvalId if there is pending approval for permissions.\r\n\r\n**Warning:**\r\
        \n * Calling this endpoint will bypass the validation of user permissions\r\
        \n   of the user performing the action.\r\n * Calling this endpoint will bypass\
        \ the validation of users\r\n   (existence of user and user belonging in legal\
        \ entity)\r\n   upon users on which the action is performed\r\n\r\n**Recommendation:\
        \ Use the corresponding endpoint on presentation service or use Auth Security\
        \ library.**\r\n"
      operationId: getPersistenceApprovalPermissions
      parameters:
        - name: userId
          in: path
          description: Generated parameter by BOAT. Please specify the URI parameter
            in RAML
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: serviceAgreementId
          in: path
          description: Generated parameter by BOAT. Please specify the URI parameter
            in RAML
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Users permissions successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistenceApprovalPermissions'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/users/{userId}/service-agreements/{serviceAgreementId}/data-item-permissions:
    summary: DataItemPermissions
    description: No description available
    get:
      tags:
        - UserQuery
      summary: User Permissions per Data Item GET.
      description: "# User Permissions per Data Item GET\r\n\r\nRequest method GET\
        \ for fetching user permissions per data item for given\r\nbusinessFunction\
        \ or resource or privilege or dataGroupType or dataItemId.\r\n\r\n**Warning:\
        \ Calling this endpoint will bypass the validation of user permissions.**\r\
        \n\r\n**Recommendation: Use the corresponding endpoint on presentation service\
        \ or use Auth Security library.**\r\n"
      operationId: getDataItemPermissions
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d788166015d791b34e1001b
        - name: serviceAgreementId
          in: path
          description: Service agreement id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d788166015d791b34c1001b
        - name: businessFunction
          in: query
          description: Name of the business function
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
        - name: resource
          in: query
          description: Name of resource
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
        - name: privilege
          in: query
          description: Name of the privilege
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: view
        - name: dataGroupType
          in: query
          description: Name of the data group type
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: CONTACTS
        - name: dataItemId
          in: query
          description: Id of the data item
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d788166015d761b34c1001b
      responses:
        "200":
          description: List of privileges retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataItemPermissions'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/users/privileges/arrangements:
    summary: ArrangementPrivileges
    description: Calls for interaction with user access privilege arrangements.
    get:
      tags:
        - UserQuery
      summary: User Access GET.
      description: "# User Access GET\r\n\r\nRequest method GET for fetching all arrangements\
        \ with privileges\r\nby functionName and resourceName as required,\r\nand\
        \ userId, serviceAgreementId, legalEntityId, arrangementId and privilege as\
        \ optional.\r\n\r\n**Warning:**\r\n * Calling this endpoint will bypass the\
        \ validation of user permissions\r\n   of the user performing the action.\r\
        \n * Calling this endpoint will bypass the validation of users\r\n   (existence\
        \ of user and user belonging in legal entity)\r\n   upon users on which the\
        \ action is performed\r\n\r\n**Recommendation: Use the corresponding endpoint\
        \ on presentation service or use Auth Security library.**\r\n"
      operationId: getArrangementPrivilegesQuery
      parameters:
        - name: userId
          in: query
          description: User ID
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267000e
        - name: serviceAgreementId
          in: query
          description: Service Agreement ID
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267111e
        - name: functionName
          in: query
          description: Name of Function
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: resourceName
          in: query
          description: Name of resource
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: legalEntityId
          in: query
          description: Legal Entity ID
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac2672222
        - name: arrangementId
          in: query
          description: Arrangement ID
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d788166015d791b34a1001b
        - name: privilege
          in: query
          description: Privilege
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: view
      responses:
        "200":
          description: List of arrangements with privileges retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrangementPrivileges'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
      deprecated: true
      x-BbApiDeprecation-deprecatedFromVersion: DBS 2022.02
      x-BbApiDeprecation-description: "According to the deprecation of MSA fallback,\
        \ serviceAgreementId will be a required parameter. The endpoint service-api/v3/accesscontrol/accessgroups/users/privileges/arrangements\
        \ should be used instead as a replacement."
      x-BbApiDeprecation-reason: Deprecation of MSA fallback.
      x-BbApiDeprecation-removedFromVersion: DBS 2023.02
  /service-api/v2/accesscontrol/accessgroups/users/function-groups/by-permissions:
    summary: UsersFunctionGroups
    description: No description available
    get:
      tags:
        - UserQuery
      summary: Users Function Groups - `GET`.
      description: "# Users Function Groups - `GET`\r\n\r\nRequest method GET for\
        \ fetching user internal ids together with assigned function group internal\
        \ ids.\r\n"
      operationId: getUsersFunctionGroups
      parameters:
        - name: serviceAgreementId
          in: query
          description: Service Agreement ID
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267111e
        - name: functionName
          in: query
          description: Function name.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: privilege
          in: query
          description: Name of the privilege
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: view
        - name: dataGroupType
          in: query
          description: Name of the data group type
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: ARRANGEMENTS
        - name: dataItemId
          in: query
          description: Id of the data item
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d788166015d761b34c1001b
      responses:
        "200":
          description: List of users/function groups retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersFunctionGroups'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* Data\
            \ item type and id must be both provided or omitted.\r\n\r\n| Message\
            \ | key |\r\n--- | --- |\r\n|Data item type and id must be both provided\
            \ or omitted|datagroup.parameters.invalid.TYPE_AND_ITEM_ID|\r\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accesscontrol/accessgroups/users/permissions:
    summary: UserPermissionCheck
    description: No description available
    get:
      tags:
        - UserQuery
      summary: User Access GET.
      description: "# User Access GET\r\n\r\nRequest method GET to check if the user\
        \ has the specified privileges to perform a function on a given resource.\r\
        \n\r\n**Warning:**\r\n * Calling this endpoint will bypass the validation\
        \ of user permissions\r\n   of the user performing the action.\r\n * Calling\
        \ this endpoint will bypass the validation of users\r\n   (existence of user\
        \ and user belonging in legal entity)\r\n   upon users on which the action\
        \ is performed\r\n\r\n**Recommendation: Use the corresponding endpoint on\
        \ presentation service or use Auth Security library.**\r\n"
      operationId: getUserPermissionCheckQuery
      parameters:
        - name: userId
          in: query
          description: User ID
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267000e
        - name: serviceAgreementId
          in: query
          description: Service Agreement ID
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267111e
        - name: resource
          in: query
          description: Resource name.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: function
          in: query
          description: function name.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: privileges
          in: query
          description: Comma-separated privileges.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: "view,edit"
      responses:
        "200":
          description: User is permitted to perform the function.
          content: { }
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/accesscontrol/accessgroups/serviceagreements/data-items:
    summary: ServiceAgreementsDataGroups
    description: Calls for interaction with service agreements.
    get:
      tags:
        - ServiceAgreementQuery
      summary: Service Agreements Data Groups - `GET`.
      description: "# Service Agreements Data Groups - `GET`\r\n\r\nRequest method\
        \ GET for fetching service agreement ids with data group ids \r\nand data\
        \ item ids  by user id, data group type, resource name, business function\
        \ name \r\nand privilege.\r\n"
      operationId: getServiceAgreementsDataGroups
      parameters:
        - name: userId
          in: query
          description: User id.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
        - name: dataGroupType
          in: query
          description: Data group type.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: ARRANGEMENTS
        - name: resourceName
          in: query
          description: Resource name.
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Transactions
        - name: functionName
          in: query
          description: Function name.
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Transactions
        - name: privileges
          in: query
          description: List of comma separated privilege names.
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: "view,create"
      responses:
        "200":
          description: Service agreement ids retrieved with data group ids and data
            item ids.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAgreementDataGroupsList'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* Privileges\
            \ provided without business function name or resource name\r\n\r\n| Message\
            \ | key |\r\n--- | --- |\r\n|Privileges cannot be provided without business\
            \ function name or resource name|serviceAgreements.get.parameters.error.message.PRIVILEGES_WITHOUT_FUNCTION_OR_RESOURCE|\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accesscontrol/accessgroups/serviceagreements/{serviceAgreementId}:
    summary: ServiceAgreement
    description: Calls for interaction with single service agreement.
    get:
      tags:
        - ServiceAgreementQuery
      summary: Service Agreements GET.
      description: "# Service Agreements GET\r\n\r\nRequest method GET for fetching\
        \ service agreement by given ID.\r\n\r\n**Warning: Calling this endpoint will\
        \ bypass the validation of user permissions.**\r\n\r\n**Recommendation: Use\
        \ the corresponding endpoint on presentation service or use Auth Security\
        \ library.**\r\n"
      operationId: getServiceAgreement
      parameters:
        - name: serviceAgreementId
          in: path
          description: Service agreement internal id.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267111e
      responses:
        "200":
          description: Service agreement retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAgreementItemQuery'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/serviceagreements/{serviceAgreementId}/participants:
    summary: ServiceAgreementParticipants
    description: No description available
    get:
      tags:
        - ServiceAgreementQuery
      summary: Retrieves Service Agreement participants.
      description: "# Retrieves Service Agreement participants\r\n\r\nRequest method\
        \ GET for retrieving Legal Entities that are participants\r\nin Service Agreement\
        \ together with their roles in the Service Agreement.\r\n\r\n**Warning: Calling\
        \ this endpoint will bypass the validation of user permissions.**\r\n\r\n\
        **Recommendation: Use the corresponding endpoint on presentation service or\
        \ use Auth Security library.**\r\n"
      operationId: getServiceAgreementParticipantsQuery
      parameters:
        - name: serviceAgreementId
          in: path
          description: Service agreement internal id.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267111e
      responses:
        "200":
          description: Service Agreement Participants retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAgreementParticipants'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/serviceagreements/{serviceAgreementId}/admins:
    summary: ServiceAgreementAdmins
    description: No description available
    get:
      tags:
        - ServiceAgreementQuery
      summary: Service Agreement Admins.
      description: "#Service Agreement Admins\r\n\r\nRequest method GET for retrieving\
        \ a list of local admins of the service agreement.\r\n\r\n**Warning: Calling\
        \ this endpoint will bypass the validation of user permissions.**\r\n\r\n\
        **Recommendation: Use the corresponding endpoint on presentation service or\
        \ use Auth Security library.**\r\n"
      operationId: getServiceAgreementAdmins
      parameters:
        - name: serviceAgreementId
          in: path
          description: Service agreement internal id.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267111e
      responses:
        "200":
          description: Service Agreement Admins retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAgreementAdmins'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/serviceagreements/{serviceAgreementId}/users:
    summary: ServiceAgreementUsers
    description: No description available
    get:
      tags:
        - ServiceAgreementQuery
      summary: Service Agreement Users.
      description: "#Service Agreement Users\r\n\r\nRequest method GET for retrieving\
        \ a list of users in the service agreement.\r\n\r\n**Warning: Calling this\
        \ endpoint will bypass the validation of user permissions.**\r\n\r\n**Recommendation:\
        \ Use the corresponding endpoint on presentation service or use Auth Security\
        \ library.**\r\n"
      operationId: getServiceAgreementUsers
      parameters:
        - name: serviceAgreementId
          in: path
          description: Service agreement internal id.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267111e
      responses:
        "200":
          description: Service agreement users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAgreementUsersQuery'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accesscontrol/service-agreements:
    summary: Agreements
    description: Calls for interaction with service agreements.
    get:
      tags:
        - ServiceAgreementsQuery
      summary: Service Agreements GET.
      description: "# Service Agreements GET\r\n\r\nRequest method GET for fetching\
        \ service agreements by creator id, and optionally user id and usersLegalEntityId.\r\
        \n\r\n**Warning:**\r\n * Calling this endpoint will bypass the validation\
        \ of user permissions\r\n   of the user performing the action.\r\n * Calling\
        \ this endpoint will bypass the validation of users\r\n   (existence of user\
        \ and user belonging in legal entity)\r\n   upon users on which the action\
        \ is performed\r\n\r\n**Recommendation: Use the corresponding endpoint on\
        \ presentation service or use Auth Security library.**\r\n"
      operationId: getAgreements
      parameters:
        - name: creatorId
          in: query
          description: Legal entity ID that created the service agreement.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267000e
        - name: userId
          in: query
          description: Id of the user that is exposed (as regular or local admin) in
            the service agreement.
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac26700aa
        - name: userLegalEntityId
          in: query
          description: Legal entity Id of the user that is exposed (as regular or local
            admin) in the service agreement.
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac26700bb
        - name: query
          in: query
          description: The search term used to search.
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: backb
        - name: from
          in: query
          description: Page Number. Skip over pages of elements by specifying a start
            value for the query
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 0
          examples:
            example:
              summary: example
              value: 20
        - name: cursor
          in: query
          description: |
            Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from.
          required: false
          style: form
          explode: true
          schema:
            type: string
            default: ""
          examples:
            example:
              summary: example
              value: 76d5be8b-e80d-4842-8ce6-ea67519e8f74
        - name: size
          in: query
          description: "Limit the number of elements on the response. When used in combination\
          \ with cursor, the value\nis allowed to be a negative number to indicate\
          \ requesting records upwards from the starting point indicated\nby the cursor.\n"
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 10
          examples:
            example:
              summary: example
              value: 80
      responses:
        "200":
          description: Service agreements retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListServiceAgreements'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/accesscontrol/service-agreements/external/{externalId}/business-functions:
    summary: "/external/{externalId}/business-functions"
    description: "# Business Functions by external Service Agreement ID - `GET`\r\n\
      \r\nRequest method GET for fetching Business Functions by external Service Agreement\
      \ ID.\r\n\r\n"
    get:
      tags:
        - ServiceAgreementsQuery
      description: No description available
      operationId: getExternalexternalIdbusinessfunctions
      parameters:
        - name: externalId
          in: path
          description: Generated parameter by BOAT. Please specify the URI parameter
            in RAML
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Service agreement business functions by external id retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFunctions'
        "404":
          description: SA with external ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accesscontrol/service-agreements/id/{internalId}/business-functions:
    summary: "/id/{internalId}/business-functions"
    description: "# Business Functions by Service Agreement ID - `GET`\r\n\r\nRequest\
      \ method GET for fetching Business Functions by internal Service Agreement ID.\r\
      \n\r\n**Warning: Calling this endpoint will bypass the validation of user permissions.**\r\
      \n\r\n**Recommendation: Use the corresponding endpoint on presentation service.**\r\
      \n"
    get:
      tags:
        - ServiceAgreementsQuery
      description: No description available
      operationId: getIdinternalIdbusinessfunctions
      parameters:
        - name: internalId
          in: path
          description: Generated parameter by BOAT. Please specify the URI parameter
            in RAML
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Service agreement business functions by internal id retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFunctions'
        "404":
          description: SA with internal ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accesscontrol/service-agreements/permission-sets/id/{id}:
    summary: GetServiceAgremeentByPermissionSetId
    description: Retrieve all service agreements associate with permission set
    get:
      tags:
        - ServiceAgreementsQuery
      summary: Service Agreements - `GET`.
      description: "# Service Agreements - `GET`\r\n\r\nRequest method GET for fetching\
        \ service agreement by assignable permission set.\r\n"
      operationId: getGetServiceAgremeentByPermissionSetId
      parameters:
        - name: id
          in: path
          description: Permission sets id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 13
        - name: from
          in: query
          description: Page Number. Skip over pages of elements by specifying a start
            value for the query
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 0
          examples:
            example:
              summary: example
              value: 20
        - name: cursor
          in: query
          description: |
            Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from.
          required: false
          style: form
          explode: true
          schema:
            type: string
            default: ""
          examples:
            example:
              summary: example
              value: 76d5be8b-e80d-4842-8ce6-ea67519e8f74
        - name: size
          in: query
          description: "Limit the number of elements on the response. When used in combination\
          \ with cursor, the value\nis allowed to be a negative number to indicate\
          \ requesting records upwards from the starting point indicated\nby the cursor.\n"
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 10
          examples:
            example:
              summary: example
              value: 80
      responses:
        "200":
          description: List of all service agreement where provided permission set
            is assigned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListServiceAgreementByPermissionSet'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* Invalid\
            \ id identifier of assignable permission set\r\n* Invalid page size, size\
            \ must be lower than 1000\r\n\r\n| Message | key\r\n--- | --- |\r\n| Invalid\
            \ id identifier of assignable permission set. | permissionSet.identifier.INVALID_VALUE\r\
            \n| Invalid page size, size must be lower than 1000. | list.page.error.message.E_INVALID_PAGE_SIZE\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: "# Reasons for getting HTTP status code 404:\r\n\r\n* The APS\
            \ doesn't exist.\r\n\r\n| Message | key\r\n--- | --- |\r\n| The APS doesn't\
            \ exist. | permissionSet.identifiers.NOT_EXISTS\r\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/service-agreements/permission-sets/name/{name}:
    summary: GetServiceAgremeentByPermissionSetName
    description: Retrieve all service agreements associate with permission set
    get:
      tags:
        - ServiceAgreementsQuery
      summary: Service Agreements - `GET`.
      description: "# Service Agreements - `GET`\r\n\r\nRequest method GET for fetching\
        \ service agreement by assignable permission set.\r\n"
      operationId: getGetServiceAgremeentByPermissionSetName
      parameters:
        - name: name
          in: path
          description: No description available
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: aps
        - name: from
          in: query
          description: Page Number. Skip over pages of elements by specifying a start
            value for the query
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 0
          examples:
            example:
              summary: example
              value: 20
        - name: cursor
          in: query
          description: |
            Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from.
          required: false
          style: form
          explode: true
          schema:
            type: string
            default: ""
          examples:
            example:
              summary: example
              value: 76d5be8b-e80d-4842-8ce6-ea67519e8f74
        - name: size
          in: query
          description: "Limit the number of elements on the response. When used in combination\
          \ with cursor, the value\nis allowed to be a negative number to indicate\
          \ requesting records upwards from the starting point indicated\nby the cursor.\n"
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 10
          examples:
            example:
              summary: example
              value: 80
      responses:
        "200":
          description: List of all service agreement where provided permission set
            is assigned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListServiceAgreementByPermissionSet'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* Invalid\
            \ page size, size must be lower than 1000\r\n\r\n| Message | key\r\n---\
            \ | --- |\r\n| Invalid page size, size must be lower than 1000. | list.page.error.message.E_INVALID_PAGE_SIZE\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: "# Reasons for getting HTTP status code 404:\r\n\r\n* The APS\
            \ doesn't exist.\r\n\r\n| Message | key\r\n--- | --- |\r\n| The APS doesn't\
            \ exist. | permissionSet.identifiers.NOT_EXISTS\r\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accesscontrol/accessgroups/usercontext/{userId}/serviceAgreements:
    summary: UserContexts
    description: Retrieve the list of service agreements by userId
    get:
      tags:
        - UserContext
      summary: Context SA GET.
      description: "# Context SA GET\r\n\r\nRequest method GET for fetching list of\
        \ service agreements that the user can select for the context.\r\n\r\n**Warning:**\r\
        \n * Calling this endpoint will bypass the validation of user permissions\r\
        \n   of the user performing the action.\r\n * Calling this endpoint will bypass\
        \ the validation of users\r\n   (existence of user and user belonging in legal\
        \ entity)\r\n   upon users on which the action is performed\r\n\r\n**Recommendation:\
        \ Use the corresponding endpoint on presentation service or use Auth Security\
        \ library.**\r\n"
      operationId: getUserContexts
      parameters:
        - name: userId
          in: path
          description: Internal User Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267000e
        - name: cursor
          in: query
          description: |
            Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from.
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 76d5be8b-e80d-4842-8ce6-ea67519e8f74
        - name: query
          in: query
          description: The search term used to search.
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: backb
        - name: from
          in: query
          description: Page Number. Skip over pages of elements by specifying a start
            value for the query
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 0
          examples:
            example:
              summary: example
              value: 20
        - name: size
          in: query
          description: "Limit the number of elements on the response. When used in combination\
          \ with cursor, the value\nis allowed to be a negative number to indicate\
          \ requesting records upwards from the starting point indicated\nby the cursor.\n"
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 10
          examples:
            example:
              summary: example
              value: 80
      responses:
        "200":
          description: User Context Service Agreements GET response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContexts'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accesscontrol/accessgroups/usercontext/{userId}/serviceAgreements/{serviceAgreementId}/validation:
    summary: UserContextValidation
    description: "# Context SA GET\r\n\r\nRequest method GET for validating if the\
      \ user can select the service agreement for context.\r\n\r\n**Warning:**\r\n\
      \ * Calling this endpoint will bypass the validation of user permissions\r\n\
      \   of the user performing the action.\r\n * Calling this endpoint will bypass\
      \ the validation of users\r\n   (existence of user and user belonging in legal\
      \ entity)\r\n   upon users on which the action is performed\r\n\r\n**Recommendation:\
      \ Use the corresponding endpoint on presentation service or use Auth Security\
      \ library.**\r\n"
    get:
      tags:
        - UserContext
      description: No description available
      operationId: getUserContextValidation
      parameters:
        - name: userId
          in: path
          description: Internal User Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267000e
        - name: serviceAgreementId
          in: path
          description: Generated parameter by BOAT. Please specify the URI parameter
            in RAML
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "204":
          description: User Context Validation success response
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/accessgroups/usercontext/data-items/permissions:
    summary: DataItemsPermissions
    description: "# Request method POST, that checks if user have permissions on more\
      \ than one item in operation."
    post:
      tags:
        - UserContext
      description: Permissions for data items
      operationId: getDataItemsPermissions
      requestBody:
        description: DataItemsPermissions body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataItemsPermissions'
            example:
              functionName: SEPA
              privilege: CREATE
              dataItems:
                - itemId: ACCOUNT_ID_1
                  itemType: ARRANGEMENT
                - itemId: PAYEE_ID_1
                  itemType: PAYEE
      responses:
        "204":
          description: Data items permissions success response
        "400":
          description: "### Reasons for getting HTTP status code 400:\r\n\r\n | Message\
            \ | key |\r\n | --- | --- |\r\n | Invalid data group type | dataGroup.save.error.message.E_INVALID_DATA_GROUP_TYPE\
            \ |\r\n | Data items can not be null | permissions.dataItemsPermission.INVALID_DATA_ITEM_NULL\
            \ |\r\n | Data item id or type must be unique | permissions.dataItemsPermission.UNIQUE_ID_AND_TYPE\
            \ |\r\n | Privilege not valid for business function group | permissions.dataItemsPermission.INVALID_PRIVILEGE\
            \ |\r\n\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: "### Reasons for getting HTTP status code 403:\r\n\r\n | Message\
            \ | key |\r\n | --- | --- |\r\n | User does not have permission for provided\
            \ data items | permissions.dataItemsPermission.NO_PERMISSION |\r\n\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/accessgroups/usercontext/data-group-permissions:
    summary: UserContextDataGroupPermissions
    description: "# User context data group permissions - `POST`\r\n\r\nReturns list\
      \ of permissions with data groups and items filtered by user context user id\
      \ and service agreement id (fallback  on MSA if no service agreement provided\
      \ in the context) and data group types, resource name,  business function name\
      \ and privileges provided in the request body.\r\n\r\n###Extendability\r\n\r\
      \nExtendable using REST endpoint handler: \r\n\r\n* Extending handler class:\
      \ com.microsphere.accesscontrol.business.flows.useraccess.GetPermissionDataGroupsFlow\
      \  "
    post:
      tags:
        - UserContext
      summary: Retrieve user context data group permissions.
      description: Retrieve user context data group permissions.
      operationId: getUserContextPermissions
      requestBody:
        description: "# User context data group permissions - `POST`\r\n\r\nReturns\
          \ list of permissions with data groups and items filtered by user context\
          \ user id and service agreement id (fallback  on MSA if no service agreement\
          \ provided in the context) and data group types, resource name,  business\
          \ function name and privileges provided in the request body.\r\n\r\n###Extendability\r\
          \n\r\nExtendable using REST endpoint handler: \r\n\r\n* Extending handler\
          \ class: com.microsphere.accesscontrol.business.flows.useraccess.GetPermissionDataGroupsFlow\
          \  "
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionsRequest'
      responses:
        "200":
          description: Permissions data group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsDataGroup'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n * Data\
            \ group type is invalid\r\n\r\n | Message | key |\r\n | --- | --- |\r\n\
            \ | Invalid data group type | dataGroup.save.error.message.E_INVALID_DATA_GROUP_TYPE\
            \ |\r\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/legalentities:
    summary: LegalEntities
    description: Retrieve all legal entities in the microsphere platform.
    put:
      tags:
        - legalEntities
      summary: Legal Entity Batch Put.
      description: "# Legal Entity Batch Put\r\n\r\nUpdate batch of legal entities."
      operationId: putLegalEntities
      requestBody:
        description: "# Legal Entity Batch Put\r\n\r\nUpdate batch of legal entities."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalEntitiesBatchPut'
        required: true
      responses:
        "207":
          description: MultiStatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntitiesPutResponseBody'
              examples:
                example:
                  value:
                    value:
                      - status: "200"
                        resourceId: SA-001
                      - status: "400"
                        resourceId: SA-002
                        errors:
                          - Invalid property 'id'
                          - Property 'name' cannot be null
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
    post:
      tags:
        - legalEntities
      summary: Add a new legal entity with master service agreement- `POST`.
      description: "# Add a new legal entity with master service agreement - `POST`\r\
        \n\r\n Add a new legal entity with master service agreement.\r\n\r\n### Extendability\r\
        \n\r\nExtendable using REST endpoint handler: \r\n\r\n* Extending handler\
        \ class: com.microsphere.presentation.services.legalentity.business.flows.CreateLegalEntityFlow\r\
        \n"
      operationId: postLegalEntities
      requestBody:
        description: "# Add a new legal entity with master service agreement - `POST`\r\
          \n\r\n Add a new legal entity with master service agreement.\r\n\r\n###\
          \ Extendability\r\n\r\nExtendable using REST endpoint handler: \r\n\r\n\
          * Extending handler class: com.microsphere.presentation.services.legalentity.business.flows.CreateLegalEntityFlow\r\
          \n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalEntityCreateItem'
      responses:
        "201":
          description: '# Legal entity was successfully created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntityItemId'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/legalentities/create:
    summary: CreateLegalEntities
    description: Retrieve all legal entities in the microsphere platform.
    post:
      tags:
        - legalEntities
      summary: Add a new legal entity without master service agreement. - `POST`.
      description: "# Add a new legal entity without master service agreement - `POST`\r\
        \n\r\nAdd a new legal entity without master service agreement.\r\n\r\n###\
        \ Extendability\r\n\r\nExtendable using REST endpoint handler: \r\n\r\n* Extending\
        \ handler class: com.microsphere.presentation.services.legalentity.business.flows.CreateLegalEntityFlow\r\
        \n"
      operationId: postCreateLegalEntities
      requestBody:
        description: "# Add a new legal entity without master service agreement -\
          \ `POST`\r\n\r\nAdd a new legal entity without master service agreement.\r\
          \n\r\n### Extendability\r\n\r\nExtendable using REST endpoint handler: \r\
          \n\r\n* Extending handler class: com.microsphere.presentation.services.legalentity.business.flows.CreateLegalEntityFlow\r\
          \n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalEntityCreateItem'
      responses:
        "201":
          description: '# Legal entity was successfully created.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntityItemId'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/legalentities/{legalEntityId}:
    summary: LegalEntityById
    get:
      tags:
        - legalEntities
      summary: Retrieve a single Legal Entity.
      description: Retrieve a single Legal Entity.
      operationId: getLegalEntityById
      parameters:
        - name: legalEntityId
          in: path
          description: Legal Entity internal ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
      responses:
        "200":
          description: Legal Entity by id retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntityItem'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/legalentities/sub-entities:
    summary: subEntities
    get:
      tags:
        - legalEntities
      summary: Retrieve a list of all children of the given Legal Entity.
      description: Retrieve a list of all children of the given Legal Entity.
      operationId: getSubEntities
      parameters:
        - name: parentEntityId
          in: query
          description: Parent Legal Entity internal ID
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
        - name: cursor
          in: query
          description: |
            Record UUID. As an alternative for specifying 'from' this allows to point to the record to start the selection from.
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 76d5be8b-e80d-4842-8ce6-ea67519e8f74
        - name: from
          in: query
          description: Page Number. Skip over pages of elements by specifying a start
            value for the query
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
          examples:
            example:
              summary: example
              value: 20
        - name: size
          in: query
          description: "Limit the number of elements on the response. When used in combination\
          \ with cursor, the value\nis allowed to be a negative number to indicate\
          \ requesting records upwards from the starting point indicated\nby the cursor.\n"
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
          examples:
            example:
              summary: example
              value: 80
        - name: query
          in: query
          description: The search term used to search.
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: backb
      responses:
        "200":
          description: "# Legal Entities list - `GET`\r\n\r\nInitial call to retrieve\
            \ the list of legal entities (customers) from the microsphere platform.\r\
            \n\r\n### Extendability\r\n\r\nExtendable using Apache Camel:\r\n\r\n\
            * Route Class: com.microsphere.presentation.services.legalentity.routes.ListLegalEntitiesRoute\r\
            \n* Route Id: ListLegalEntities\r\n* Route source endpoint: direct:business.legalEntities.ListLegalEntities\r\
            \n* Route destination endpoint: direct:listLegalEntitiesRequestedInternal\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLegalEntitiesBase'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/legalentities/external/{externalId}:
    summary: LegalEntityByExternalId
    description: '# Retrieve legal entity in the microsphere platform with given criteria.'
    get:
      tags:
        - legalEntities
      summary: Legal Entity by external id - `GET`.
      description: "# Legal Entity by external id - `GET`\r\n\r\nInitial call to retrieve\
        \ a Legal Entity from the microsphere platform with the given Legal Entity external\
        \ reference.\r\n\r\n### Extendability\r\n\r\nExtendable using Apache Camel:\r\
        \n\r\n* Route Class: com.microsphere.presentation.services.legalentity.routes.GetLegalEntityByExternalIdRoute\r\
        \n* Route Id: GetLegalEntityByExternalId\r\n* Route source endpoint: direct:business.legalentities.GetLegalEntityByExternalId\r\
        \n* Route destination endpoint: direct:getLegalEntityByExternalIdRequestedInternal\r\
        \n"
      operationId: getLegalEntityByExternalId
      parameters:
        - name: externalId
          in: path
          description: Legal Entity external ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
      responses:
        "200":
          description: "# Legal Entity by external id - `GET`\r\n\r\nInitial call\
            \ to retrieve a Legal Entity from the microsphere platform with the given\
            \ Legal Entity external reference.\r\n\r\n### Extendability\r\n\r\nExtendable\
            \ using Apache Camel:\r\n\r\n* Route Class: com.microsphere.presentation.services.legalentity.routes.GetLegalEntityByExternalIdRoute\r\
            \n* Route Id: GetLegalEntityByExternalId\r\n* Route source endpoint: direct:business.legalentities.GetLegalEntityByExternalId\r\
            \n* Route destination endpoint: direct:getLegalEntityByExternalIdRequestedInternal\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntityItemBase'
        "403":
          description: "# Reasons for getting HTTP status code 403:\r\n\r\n* User\
            \ does not have permissions to perform the action.\r\n\r\n| Message |\
            \ key |\r\n| --- | --- |\r\n| User does not have access to Manage Entitlements\
            \ | entitlements.access.error.message.E_NOT_ACCESS\r\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      tags:
        - legalEntities
      summary: Update legal entity.
      description: "# Update legal entity.\r\nUpdates the type of the Legal Entity\
        \ by it's external ID."
      operationId: putLegalEntityByExternalId
      parameters:
        - name: externalId
          in: path
          description: Legal Entity external ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
      requestBody:
        description: "# Update legal entity.\r\nUpdates the type of the Legal Entity\
          \ by it's external ID."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalEntityUpdateItem'
      responses:
        "200":
          description: Legal entity was successfully updated.
          content: { }
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/legalentities/external/{externalId}/serviceagreements/master:
    summary: MasterServiceAgreementByExternalLegalEntity
    get:
      tags:
        - legalEntities
      summary: Retrieve the master service agreement for a external Legal Entity.
      description: Retrieve the master service agreement for a external Legal Entity.
      operationId: getMasterServiceAgreementByExternalLegalEntity
      parameters:
        - name: externalId
          in: path
          description: Legal Entity external ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
      responses:
        "200":
          description: Successfully returned master service agreement for provided
            legal entity external ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetServiceAgreement'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/legalentities/batch/delete:
    summary: LegalEntitiesBatchDelete
    description: Remove list of legal entities
    post:
      tags:
        - legalEntities
      summary: Legal Entity POST.
      description: "# Legal Entity POST.\r\n\r\nPOST request to delete batch legal\
        \ entities."
      operationId: postLegalEntitiesBatchDelete
      requestBody:
        description: "# Legal Entity POST.\r\n\r\nPOST request to delete batch legal\
          \ entities."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LegalEntitiesBatchDelete'
      responses:
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "207":
          description: MultiStatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LegalEntitiesBatchDeletePostResponseBody'
              examples:
                example:
                  value:
                    value:
                      - status: "200"
                        resourceId: SA-001
                      - status: "400"
                        resourceId: SA-002
                        errors:
                          - Invalid property 'id'
                          - Property 'name' cannot be null
  /service-api/v2/accessgroups/data-groups:
    summary: DataGroups
    description: Calls for interaction with data groups.
    put:
      tags:
        - DataGroups
      summary: Update Data Group details - `PUT`.
      description: "# Update Data Group details - `PUT`\r\n\r\nUpdates details for\
        \ a specific data group.\r\nUpdate may be done by: data group internal id\
        \ or (data group name and referenced service agreement external id)\r\n\r\n\
        Extendable using Apache Camel:\r\n\r\n* Route Class: com.microsphere.presentation.services.accessgroups.routes.datagroup.UpdateDataGroupByIdGroupRoute\r\
        \n* Route Id: UpdateDataGroupByIdGroupRoute\r\n* Route source endpoint: direct:accessgroup.datagroup.update\r\
        \n* Route destination endpoint: \r\n   - direct:accessgroup.datagroup.update.validate\r\
        \n   - direct:accessgroup.datagroup.update.persist"
      operationId: putDataGroups
      requestBody:
        description: "# Update Data Group details - `PUT`\r\n\r\nUpdates details for\
          \ a specific data group.\r\nUpdate may be done by: data group internal id\
          \ or (data group name and referenced service agreement external id)\r\n\r\
          \nExtendable using Apache Camel:\r\n\r\n* Route Class: com.microsphere.presentation.services.accessgroups.routes.datagroup.UpdateDataGroupByIdGroupRoute\r\
          \n* Route Id: UpdateDataGroupByIdGroupRoute\r\n* Route source endpoint:\
          \ direct:accessgroup.datagroup.update\r\n* Route destination endpoint: \r\
          \n   - direct:accessgroup.datagroup.update.validate\r\n   - direct:accessgroup.datagroup.update.persist"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationDataGroupUpdate'
      responses:
        "200":
          description: Data group updated successfully.
          content: { }
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* Request\
            \ does not honor the contract, check the example in the Request tab.\r\
            \n* Name not unique\r\n* Service agreement does not exist\r\n* Data group\
            \ with specified name and external service agreement is already in pending\
            \ state.\r\n* Data group type “CUSTOMERS” is not allowed\r\n\r\n| Message\
            \ | key |\r\n| --- | --- |\r\n| Invalid data group identifiers | dataGroup.identifier.error.message.E_INVALID_DATA_GROUP_IDENTIFIERS\r\
            \n| Invalid service agreement | dataGroup.update.error.message.E_INVALID_SERVICE_AGREEMENT\r\
            \n| Invalid data group type | dataGroup.save.error.message.E_INVALID_DATA_GROUP_TYPE\r\
            \n| Invalid data group items | dataGroup.save.error.message.E_INVALID_DATA_GROUP_ITEMS\r\
            \n| Data Access Group with given name already exists | dataAccessGroup.save.error.message.E_ALREADY_EXISTS\r\
            \n| Service agreement does not exist | serviceAgreements.get.error.message.E_NOT_EXISTS\r\
            \n| There is pending action of data group. | dataGroup.update.approval.error.message.ALREADY_IN_PENDING_STATE\r\
            \n| Data group type is not allowed. | dataGroup.save.error.message.E_NOT_ALLOWED_DATA_GROUP_TYPE\r\
            \n| The Data Group type must be specified. | dataGroup.get.error.message.E_DATA_GROUP_TYPE_NOT_SPECIFIED\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    post:
      tags:
        - DataGroups
      summary: Create Data Group - `POST`.
      description: "# Create Data Group - `POST`\r\n\r\nCreates a new data group.\r\
        \n\r\n###Extendability\r\n\r\nExtendable using Apache Camel:\r\n\r\n* Route\
        \ Class: com.microsphere.presentation.services.accessgroups.routes.datagroup.AddDataGroupRoute\r\
        \n* Route Id: AddDataGroupRoute\r\n* Route source endpoint: \r\n  - direct:accessgroup.datagroup.add\r\
        \n* Route destination endpoint:\r\n  - direct:accessgroup.datagroup.add.validate\r\
        \n  - direct:accessgroup.datagroup.add.persist"
      operationId: postDataGroups
      requestBody:
        description: "# Create Data Group - `POST`\r\n\r\nCreates a new data group.\r\
          \n\r\n###Extendability\r\n\r\nExtendable using Apache Camel:\r\n\r\n* Route\
          \ Class: com.microsphere.presentation.services.accessgroups.routes.datagroup.AddDataGroupRoute\r\
          \n* Route Id: AddDataGroupRoute\r\n* Route source endpoint: \r\n  - direct:accessgroup.datagroup.add\r\
          \n* Route destination endpoint:\r\n  - direct:accessgroup.datagroup.add.validate\r\
          \n  - direct:accessgroup.datagroup.add.persist"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataGroupItemSystemBase'
      responses:
        "201":
          description: New data group created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdItem'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accessgroups/data-groups/{id}:
    summary: DataGroupById
    description: Manage Data Group
    delete:
      tags:
        - DataGroups
      summary: Delete Data Group - `DELETE`.
      description: "# Delete Data Group - `DELETE`\r\n\r\nDeletes the specific data\
        \ group by internal data group id.\r\n\r\n###Extendability\r\n\r\nExtendable\
        \ using Apache Camel:\r\n\r\n* Route Class: com.microsphere.presentation.services.accessgroups.routes.datagroup.DeleteDataGroupRoute\r\
        \n* Route Id: DeleteDataGroupRoute\r\n* Route source endpoint: direct:business.DeleteDataGroup\r\
        \n* Route destination endpoint: direct:deleteDataGroupRequestedInternal"
      operationId: deleteDataGroupById
      parameters:
        - name: id
          in: path
          description: Data Group Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
      responses:
        "200":
          description: Data Group deleted successfully.
          content: { }
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accessgroups/data-groups/batch/update/data-items:
    summary: DataGroupItemsUpdate
    description: Call for update data groups items.
    put:
      tags:
        - DataGroups
      summary: Data Group Item Batch Update - `PUT`.
      description: "# Data Group Item Batch Update - `PUT`\r\n\r\nBatch update of\
        \ data group item by providing a list of\r\n - dataGroupIdentifier\r\n - action\r\
        \n - type\r\n - dataItems (containing internal or external data items ids)\r\
        \nThis identifier will be included as a part of data group object containing\r\
        \none of the data group identifiers (name identifier or internal Id identifier).\r\
        \n\r\nData items identifiers must all be internal or all external for one\
        \ data group identifier."
      operationId: putDataGroupItemsUpdate
      requestBody:
        description: "# Data Group Item Batch Update - `PUT`\r\n\r\nBatch update of\
          \ data group item by providing a list of\r\n - dataGroupIdentifier\r\n -\
          \ action\r\n - type\r\n - dataItems (containing internal or external data\
          \ items ids)\r\nThis identifier will be included as a part of data group\
          \ object containing\r\none of the data group identifiers (name identifier\
          \ or internal Id identifier).\r\n\r\nData items identifiers must all be\
          \ internal or all external for one data group identifier."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataGroupsItemUpdatePut'
      responses:
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* Request\
            \ does not honor the contract, check the example in the Request tab.\r\
            \ The Data Group type must be specified. \r\n \r\n* Invalid or empty data\
            \ group items \r\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "207":
          description: "# HTTP status code 200 is returned for successfully updated\
            \ data group items\r\n\r\n# Reasons for getting HTTP status code 400 inside\
            \ one or more batch response items:\r\n\r\n* Request does not honor the\
            \ contract, check the example in the Request tab.\r\n* Invalid data group/data\
            \ item identifier\r\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataGroupItemsUpdatePutResponseBody'
              examples:
                example:
                  value:
                    value:
                      - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
                        status: "200"
                        errors: [ ]
                        action: add
                        externalServiceAgreementId: External ID of SA-1
                      - resourceId: efc1b037dbad49df9f62907ba7af2497
                        status: "404"
                        action: remove
                        externalServiceAgreementId: External ID of SA-2
                        errors:
                          - Resource does not exist
  /service-api/v2/accessgroups/data-groups/batch/delete:
    summary: DataGroupsDelete
    description: Call for delete data groups.
    post:
      tags:
        - DataGroups
      summary: Data Groups Batch Delete - `POST`.
      description: "# Data Groups Batch Delete - `POST`\r\n\r\nBatch delete of data\
        \ groups.\r\nDelete may be done by: data group internal id or (data group\
        \ name and referenced service agreement external id)."
      operationId: postDataGroupsDelete
      requestBody:
        description: "# Data Groups Batch Delete - `POST`\r\n\r\nBatch delete of data\
          \ groups.\r\nDelete may be done by: data group internal id or (data group\
          \ name and referenced service agreement external id)."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataGroupsDelete'
      responses:
        "207":
          description: MultiStatusExtended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataGroupsDeletePostResponseBody'
              examples:
                example:
                  value:
                    value:
                      - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
                        status: "200"
                        errors: [ ]
                        action: add
                        externalServiceAgreementId: External ID of SA-1
                      - resourceId: efc1b037dbad49df9f62907ba7af2497
                        status: "404"
                        action: remove
                        externalServiceAgreementId: External ID of SA-2
                        errors:
                          - Resource does not exist
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/data-groups/type/{type}/search:
    summary: /search
    description: Search data groups
    post:
      tags:
        - DataGroups
      summary: Search data groups  - `POST`.
      description: "# Search data groups  - `POST`\r\n\r\nFilters data groups with\
        \ specific type, by service agreement or by data item\r\n- `serviceAgreementIdentifier`\
        \ can be internal or external id or name of service agreement\r\n- `dataItemIdentifier`\
        \ can be internal or external data item id."
      operationId: postSearch
      parameters:
        - name: type
          in: path
          description: Type of the data group.
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
      requestBody:
        description: "# Search data groups  - `POST`\r\n\r\nFilters data groups with\
          \ specific type, by service agreement or by data item\r\n- `serviceAgreementIdentifier`\
          \ can be internal or external id or name of service agreement\r\n- `dataItemIdentifier`\
          \ can be internal or external data item id.\r\n- `LegalEntityIdentifier`\
          \ can be external legal entity id."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationSearchDataGroupsRequest'
      responses:
        "200":
          description: "List of data groups that fulfill the serach criteria, grouped\
            \ by service agreements."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationServiceAgreementWithDataGroups'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* No service\
            \ agreement or data item identifier is provided in request body.\r\n *\
            \ Can not search PAYEES data item type without providing service agreement\
            \ identifier.\r\n\r\n | Message | key |\r\n| --- | --- |\r\n|  No service\
            \ agreement or data item identifier is provided | dataGroups.search.request.invalid\
            \ |\r\n | Invalid data group type | dataGroup.save.error.message.E_INVALID_DATA_GROUP_TYPE|\r\
            \n | Service agreement identifier must be provided for this data item\
            \ type | datagroup.search.error.message.MISSING_SERVICE_AGREEMENT_IDENTIFIER|\r\
            \n "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/function-groups/{id}:
    summary: FunctionGroupById
    description: Manage Function Group
    delete:
      tags:
        - FunctionGroups
      summary: Delete Function Group - `DELETE`.
      description: "# Delete Function Group - `DELETE`\r\n\r\nDeletes the specific\
        \ function group.\r\n\r\n### Extendability\r\n\r\nExtendable using Apache\
        \ Camel:\r\n\r\n* Route Class: com.microsphere.presentation.services.accessgroups.routes.functiongroup.DeleteFunctionGroupByIdRoute\r\
        \n* Route Id: DeleteFunctionGroupByIdRoute\r\n* Route source endpoint: direct:business.DeleteFunctionGroupById\r\
        \n* Route destination endpoint: direct:deleteFunctionGroupByIdRequestedInternal"
      operationId: deleteFunctionGroupById
      parameters:
        - name: id
          in: path
          description: Function Group Id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
      responses:
        "200":
          description: Function group deleted successfully.
          content: { }
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accessgroups/function-groups/ingest:
    summary: PresentationIngestFunctionGroup
    description: Ingest function Group
    post:
      tags:
        - FunctionGroups
      summary: Creates a new function group.
      description: Creates a new function group.
      operationId: postPresentationIngestFunctionGroup
      requestBody:
        description: Creates a new function group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationIngestFunctionGroup'
      responses:
        "201":
          description: New function group created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdItem'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* Job role\
            \ template can't be created for custom service agreement.\r\n* Either\
            \ apsId or apsName should be sent.\r\n* Function Group with given name\
            \ already exists\r\n* Invalid validity period.\r\n* Function Group can\
            \ not be created/updated - Invalid Business Function\r\n* Function Group\
            \ can not be created/updated - invalid or not applicable Privilege\r\n\
            * There is a pending record of function group with same name\r\n* Service\
            \ agreement does not exist\r\n\r\n| Message | key \r\n--- | --- |\r\n\
            | Job role template can't be created for custom service agreement. | functionGroup.create.error.message.JRT_NOT_ALLOWED_FOR_CUSTOM_SA\r\
            \n| Either apsId or apsName should be sent. | functionGroup.create.error.message.NEITHER_OF_APS_IDENTIFIERS_PROVIDED\r\
            \n| Function Group with given name already exists. | functionGroup.save.error.message.E_ALREADY_EXISTS\r\
            \n| Invalid validity period. | datetime.valid.period.INVALID_VALUE\r\n\
            | Function Group can not be created/updated - Invalid Business Function\
            \ | functionGroup.create.update.error.message.E_FUNCTION_NOT_EXISTS\r\n\
            | Function Group can not be created/updated - invalid or not applicable\
            \ Privilege | permission.get.error.E_INVALID_OR_NOT_APPLICABLE_PRIVILEGE\r\
            \n| There is a pending record of function group with same name | functionGroup.create.approval.error.message.ALREADY_IN_PENDING_STATE\r\
            \n| Service agreement does not exist | serviceAgreements.get.error.message.E_NOT_EXISTS\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/accessgroups/function-groups/batch/update:
    summary: FunctionGroupsUpdate
    description: Call for update function groups.
    put:
      tags:
        - FunctionGroups
      summary: Function Groups Batch - Put.
      description: "# Function Groups Batch - Put\r\n\r\nUpdate batch of function\
        \ groups."
      operationId: putFunctionGroupsUpdate
      requestBody:
        description: "# Function Groups Batch - Put\r\n\r\nUpdate batch of function\
          \ groups."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionGroupsUpdatePut'
      responses:
        "207":
          description: "# HTTP status code 207 is returned for successfully updated\
            \ function groups\r\n\r\n\r\n# Reasons for getting HTTP status code 400\
            \ inside one or more batch response items:\r\n\r\n* Request does not honor\
            \ the contract, check the example in the Request tab.\r\n* Invalid function\
            \ group/data group identifier\r\n* Name is not unique\r\n* Business function\
            \ does not exist\r\n* The APS doesn't exist.\r\n* There is a pending record\
            \ of function group.\r\n* Invalid validity period.\r\n* Function Group\
            \ can not be created/updated - invalid or not applicable Privilege.\r\n\
            \r\n| Messages |\r\n| --- |\r\n| At least one function group must be provided\
            \ |\r\n| Invalid function group/data group identifier. |\r\n| Invalid\
            \ function group identifiers |\r\n| Function Group with given name already\
            \ exists |\r\n| Function Group can not be created/updated - Invalid Business\
            \ Function |\r\n| The APS doesn't exist. |\r\n| There is a pending record\
            \ of function group. |\r\n| Invalid validity period. |\r\n| Function Group\
            \ can not be created/updated - invalid or not applicable Privilege. |\r\
            \n\r\n\r\n# Reasons for getting HTTP status code 404 inside one or more\
            \ batch response items:\r\n\r\n* Function group does not exist\r\n\r\n\
            | Message |\r\n| --- |\r\n| Function group does not exist. |\r\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionGroupsUpdatePutResponseBody'
              examples:
                example:
                  value:
                    value:
                      - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
                        status: "200"
                        errors: [ ]
                        action: add
                        externalServiceAgreementId: External ID of SA-1
                      - resourceId: efc1b037dbad49df9f62907ba7af2497
                        status: "404"
                        action: remove
                        externalServiceAgreementId: External ID of SA-2
                        errors:
                          - Resource does not exist
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/function-groups/batch/delete:
    summary: FunctionGroupsDelete
    description: Function Groups Batch
    post:
      tags:
        - FunctionGroups
      summary: Function Groups Batch - Delete.
      description: "# Function Groups Batch - Delete\r\n\r\nBatch delete of function\
        \ groups by list of provided Function Group IDs."
      operationId: postFunctionGroupsDelete
      requestBody:
        description: "# Function Groups Batch - Delete\r\n\r\nBatch delete of function\
          \ groups by list of provided Function Group IDs."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FunctionGroupDelete'
      responses:
        "207":
          description: MultiStatusExtended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionGroupsDeletePostResponseBody'
              examples:
                example:
                  value:
                    value:
                      - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
                        status: "200"
                        errors: [ ]
                        action: add
                        externalServiceAgreementId: External ID of SA-1
                      - resourceId: efc1b037dbad49df9f62907ba7af2497
                        status: "404"
                        action: remove
                        externalServiceAgreementId: External ID of SA-2
                        errors:
                          - Resource does not exist
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/users/privileges:
    summary: Privileges
    description: List User privileges
    get:
      tags:
        - Users
      summary: List User privileges for given Business function - `GET`.
      description: "# List User privileges for given Business function - `GET`\r\n\
        \r\nProvides a list of user privileges for given business function (eg. Contacts).\r\
        \n\r\n###Extendability\r\n\r\nExtendable using Apache Camel:\r\n\r\n* Route\
        \ Class: com.microsphere.presentation.services.accessgroups.routes.useraccess.ListPrivilegesRoute\r\
        \n* Route Id: ListPrivilegesRoute\r\n* Route source endpoint: direct:business.ListPrivileges\r\
        \n* Route destination endpoint: direct:listPrivilegesRequestedInternal"
      operationId: getPrivileges
      parameters:
        - name: userId
          in: query
          description: User ID
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ab6ad0002
        - name: serviceAgreementId
          in: query
          description: Service Agreement Id
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d788166015d791b0b9f0003
        - name: functionName
          in: query
          description: Name of Function
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
        - name: resourceName
          in: query
          description: Name of Resource
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
      responses:
        "200":
          description: User privileges for given business function listed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPrivileges'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      deprecated: true
      x-BbApiDeprecation-deprecatedFromVersion: DBS 2022.02
      x-BbApiDeprecation-description: "According to the deprecation of MSA fallback,\
        \ serviceAgreementId will be a required parameter. The endpoint service-api/v3/accessgroups/users/privileges\
        \ should be used instead as a replacement."
      x-BbApiDeprecation-reason: Deprecation of MSA fallback.
      x-BbApiDeprecation-removedFromVersion: DBS 2023.02
  /service-api/v2/accessgroups/users/privileges/arrangements:
    summary: ArrangementPrivileges
    description: List Arrangements
    get:
      tags:
        - Users
      summary: List Arrangements that user has access to - `GET`.
      description: "# List Arrangements that user has access to - `GET`\r\n\r\nProvides\
        \ (retrieve) list of Arrangements along with appropriate privilege(s) that\
        \ given User has access to.\r\n\r\n###Extendability\r\n\r\nExtendable using\
        \ Apache Camel:\r\n\r\n* Route Class: com.microsphere.presentation.services.accessgroups.routes.useraccess.GetArrangementPrivilegesRoute\r\
        \n* Route Id: GetArrangementPrivilegesRoute\r\n* Route source endpoint: direct:business.GetArrangementPrivileges\r\
        \n* Route destination endpoint: direct:getArrangementPrivilegesRequestedInternal"
      operationId: getArrangementPrivileges
      parameters:
        - name: userId
          in: query
          description: User Id
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ab6ad0002
        - name: serviceAgreementId
          in: query
          description: Service Agreement Id
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ab6123456
        - name: functionName
          in: query
          description: Name of function
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: resourceName
          in: query
          description: Name of resource
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: privilegeName
          in: query
          description: Name of privilege
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: view
      responses:
        "200":
          description: Arrangements with their privileges for the given user have
            been successfully listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrangementPrivileges'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      deprecated: true
      x-BbApiDeprecation-deprecatedFromVersion: DBS 2022.02
      x-BbApiDeprecation-description: "According to the deprecation of MSA fallback,\
        \ serviceAgreementId will be a required parameter. The endpoint service-api/v3/accessgroups/users/privileges/arrangements\
        \ should be used instead as a replacement."
      x-BbApiDeprecation-reason: Deprecation of MSA fallback.
      x-BbApiDeprecation-removedFromVersion: DBS 2023.02
  /service-api/v2/accessgroups/users/privileges/arrangements/{id}:
    summary: ArrangementPermissionCheck
    description: Checks permissions for a single arrangement item.
    get:
      tags:
        - Users
      summary: Arrangement permission check.
      description: "# Arrangement permission check.\r\n\r\nChecks permissions for\
        \ a single arrangement item."
      operationId: getArrangementPermissionCheck
      parameters:
        - name: id
          in: path
          description: Arrangement ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d788166015d791b34a1001b
        - name: userId
          in: query
          description: User ID
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267000e
        - name: serviceAgreementId
          in: query
          description: Service Agreement ID
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ac267111e
        - name: resource
          in: query
          description: Resource name.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: function
          in: query
          description: function name.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: privilege
          in: query
          description: Privilege name.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: view
      responses:
        "200":
          description: User has access to the given arrangement.
          content: { }
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
      deprecated: true
      x-BbApiDeprecation-deprecatedFromVersion: DBS 2022.02
      x-BbApiDeprecation-description: "According to the deprecation of MSA fallback,\
        \ serviceAgreementId will be a required parameter. The endpoint service-api/v3/accessgroups/users/privileges/arrangements/{id}\
        \ should be used instead as a replacement."
      x-BbApiDeprecation-reason: Deprecation of MSA fallback.
      x-BbApiDeprecation-removedFromVersion: DBS 2023.02
  /service-api/v2/accessgroups/users/user-privileges:
    summary: UserPrivileges
    description: List User privileges for given Business function
    get:
      tags:
        - Users
      summary: List User privileges for given Business function - `GET`.
      description: "# List User privileges for given Business function - `GET`\r\n\
        \r\nProvides a list of user privileges for given business function (eg. Contacts).\r\
        \n\r\n###Extendability\r\n\r\nExtendable using Apache Camel:\r\n\r\n* Route\
        \ Class: com.microsphere.presentation.services.accessgroups.routes.useraccess.ListPrivilegesRoute\r\
        \n* Route Id: ListPrivilegesRoute\r\n* Route source endpoint: direct:business.ListPrivileges\r\
        \n* Route destination endpoint: direct:listPrivilegesRequestedInternal"
      operationId: getUserPrivileges
      parameters:
        - name: functionName
          in: query
          description: Name of Function
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
        - name: resourceName
          in: query
          description: Name of Resource
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
      responses:
        "200":
          description: User privileges for given business function listed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPrivileges'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/users/user-privileges/arrangements:
    summary: ArrangementUserPrivileges
    description: List Arrangements that user has access to
    get:
      tags:
        - Users
      summary: List Arrangements that user has access to - `GET`.
      description: "# List Arrangements that user has access to - `GET`\r\n\r\nProvides\
        \ (retrieve) list of Arrangements along with appropriate privilege(s) that\
        \ given User has access to.\r\n\r\n###Extendability\r\n\r\nExtendable using\
        \ Apache Camel:\r\n\r\n* Route Class: com.microsphere.presentation.services.accessgroups.routes.useraccess.GetArrangementPrivilegesRoute\r\
        \n* Route Id: GetArrangementPrivilegesRoute\r\n* Route source endpoint: direct:business.GetArrangementPrivileges\r\
        \n* Route destination endpoint: direct:getArrangementPrivilegesRequestedInternal"
      operationId: getArrangementUserPrivileges
      parameters:
        - name: functionName
          in: query
          description: Name of function
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: resourceName
          in: query
          description: Name of resource
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: privilegeName
          in: query
          description: Name of privilege
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: view
      responses:
        "200":
          description: Arrangements with their privileges for the given user have
            been successfully listed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrangementPrivileges'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/accessgroups/users/user-privileges/arrangements/{id}:
    summary: ArrangementUserPermissionCheck
    description: Checks permissions for a single arrangement item.
    get:
      tags:
        - Users
      summary: Arrangement permission check.
      description: "# Arrangement permission check.\r\n\r\nChecks permissions for\
        \ a single arrangement item."
      operationId: getArrangementUserPermissionCheck
      parameters:
        - name: id
          in: path
          description: Arrangement ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d788166015d791b34a1001b
        - name: resource
          in: query
          description: Resource name.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: function
          in: query
          description: function name.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Product Summary
        - name: privilege
          in: query
          description: Privilege name.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: view
      responses:
        "200":
          description: User has access to the given arrangement.
          content: { }
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/users/permissions:
    summary: UserPermissionCheck
    description: Check if User is allowed to perform given action
    get:
      tags:
        - Users
      summary: Check if User is allowed to perform given action - `GET`.
      description: "# Check if User is allowed to perform given action - `GET`\r\n\
        \r\nChecks if the user has the specific privileges for given business function.\r\
        \n\r\n###Extendability\r\n\r\nExtendable using Apache Camel:\r\n\r\n* Route\
        \ Class: com.microsphere.presentation.services.accessgroups.routes.useraccess.ValidatePermissionsRoute\r\
        \n* Route Id: ValidatePermissionsRoute\r\n* Route source endpoint: direct:business.ValidatePermissions\r\
        \n* Route destination endpoint: direct:validatePermissionsRequestedInternal\r\
        \n"
      operationId: getUserPermissionCheck
      parameters:
        - name: userId
          in: query
          description: User Id
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ab6ad0002
        - name: serviceAgreementId
          in: query
          description: Service Agreement Id
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8a48e2685d787f78015d791ab6123456
        - name: functionName
          in: query
          description: Name of Function
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
        - name: resourceName
          in: query
          description: Name of Resource
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
        - name: privileges
          in: query
          description: comma-separated privileges.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: "view,create,execute"
      responses:
        "200":
          description: User is allowed perform this action.
          content: { }
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      deprecated: true
      x-BbApiDeprecation-deprecatedFromVersion: DBS 2022.02
      x-BbApiDeprecation-description: "According to the deprecation of MSA fallback,\
        \ serviceAgreementId will be a required parameter. The endpoint service-api/v3/accessgroups/users/permissions\
        \ should be used instead as a replacement."
      x-BbApiDeprecation-reason: Deprecation of MSA fallback.
      x-BbApiDeprecation-removedFromVersion: DBS 2023.02
  /service-api/v2/accessgroups/users/permissions/user-permissions:
    summary: AssignUserPermissions
    description: Manage user-permissions
    put:
      tags:
        - Users
      summary: Updates permissions for a list of users. - Put.
      description: "# Updates permissions for a list of users. - Put\r\n\r\nUpdates\
        \ permissions for a list of users."
      operationId: putAssignUserPermissions
      requestBody:
        description: "# Updates permissions for a list of users. - Put\r\n\r\nUpdates\
          \ permissions for a list of users."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUserPermissions'
      responses:
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "207":
          description: MultiStatusExtended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignUserPermissionsPutResponseBody'
              examples:
                example:
                  value:
                    value:
                      - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
                        status: "200"
                        errors: [ ]
                        action: add
                        externalServiceAgreementId: External ID of SA-1
                      - resourceId: efc1b037dbad49df9f62907ba7af2497
                        status: "404"
                        action: remove
                        externalServiceAgreementId: External ID of SA-2
                        errors:
                          - Resource does not exist
  /service-api/v2/accessgroups/users/permissions/summary:
    summary: UserPermissionsSummary
    description: User Permissions Summary
    get:
      tags:
        - Users
      summary: User Permissions Summary - `GET`.
      description: "# User Permissions Summary - `GET`\r\n\r\nReturns aggregated summary\
        \ of user permissions.\r\nReturned data structure will contain all allowed\
        \ Resources + Business Functions + Permissions.\r\n\r\n###Extendability\r\n\
        \r\nExtendable using Apache Camel:\r\n\r\n* Route Class: com.microsphere.presentation.services.accessgroups.routes.useraccess.GetUserPrivilegesSummaryRoute\r\
        \n* Route Id: GetUserPrivilegesSummaryRoute\r\n* Route source endpoint: direct:business.getUserPrivilegesSummary\r\
        \n* Route destination endpoint: direct:getUserPrivilegesSummaryRequestedInternal"
      operationId: getUserPermissionsSummary
      responses:
        "200":
          description: response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsSummary'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/users/user-permissions:
    summary: CheckUserPermission
    description: Check if User is allowed to perform given action
    get:
      tags:
        - Users
      summary: Check if User is allowed to perform given action - `GET`.
      description: "# Check if User is allowed to perform given action - `GET`\r\n\
        \r\nChecks if the user has the specific privileges for given business function.\r\
        \n\r\n###Extendability\r\n\r\nExtendable using Apache Camel:\r\n\r\n* Route\
        \ Class: com.microsphere.presentation.services.accessgroups.routes.useraccess.ValidatePermissionsRoute\r\
        \n* Route Id: ValidatePermissionsRoute\r\n* Route source endpoint: direct:business.ValidatePermissions\r\
        \n* Route destination endpoint: direct:validatePermissionsRequestedInternal\r\
        \n"
      operationId: getCheckUserPermission
      parameters:
        - name: functionName
          in: query
          description: Name of Function
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
        - name: resourceName
          in: query
          description: Name of Resource
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: Contacts
        - name: privileges
          in: query
          description: comma-separated privileges.
          required: true
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: "view,create,execute"
      responses:
        "200":
          description: User is allowed perform this action.
          content: { }
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/accessgroups/serviceagreements/{serviceAgreementId}:
    summary: ServiceAgreementItem
    description: Manage Service Agreements
    put:
      tags:
        - ServiceAgreement
      summary: "Updates name, description and external Id for a specific service agreement."
      description: "Updates name, description and external Id for a specific service\
        \ agreement."
      operationId: putServiceAgreementItem
      parameters:
        - name: serviceAgreementId
          in: path
          description: Service Agreement ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
      requestBody:
        description: "Updates name, description and external Id for a specific service\
          \ agreement."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAgreementPut'
      responses:
        "200":
          description: Service Agreement updated successfully.
          content: { }
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accessgroups/serviceagreements/{serviceAgreementId}/function-groups/{functionGroupId}/users:
    get:
      tags:
        - ServiceAgreement
      summary: Users with assigned Function Group.
      description: "# Retrieves information about users with assigned Function Group\
        \ in Service Agreement by serviceAgreementId and functionGroupId. - `GET`.\n\
        ### Warning:\n* Calling this endpoint will bypass the validation of user permissions\
        \ of the user performing the action.\n### Extendability\n  Extendable using\
        \ REST endpoint handler:\n* Extending handler class: com.microsphere.accesscontrol.business.flows.serviceagreement.ServiceAgreementUsersAssignedFunctionGroupFlow\n"
      operationId: getUsers
      parameters:
        - name: serviceAgreementId
          in: path
          description: Service Agreement ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 8b46n8e55a0eb056477a0ef668992221
        - name: functionGroupId
          in: path
          description: Function Group ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 436t75e55a0eb056477a0ef668231d52
        - name: from
          in: query
          description: Page Number. Skip over pages of elements by specifying a start
            value for the query.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 0
          examples:
            example:
              summary: example
              value: 20
        - name: size
          in: query
          description: Limit the number of elements in the response.
          required: false
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            default: 10
          examples:
            example:
              summary: example
              value: 80
      responses:
        "200":
          description: Successfully retrieved users for service agreement by serviceAgreementId
            and functionGroupId.
          headers:
            X-Total-Count:
              description: Overall count of users with assigned Function Group for
                specified Service Agreement
              required: true
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersWithAssignedFunctionGroupResponse'
        "400":
          description: |
            # Reasons for getting HTTP status code 400:
            * Invalid from parameter
            * Invalid size parameter

            | Message | key
            |--- | --- |
            | Invalid from parameter.         | user.get.error.message.E_INVALID_FROM_PARAMETER|
            | Invalid size parameter.         | user.get.error.message.E_INVALID_SIZE_PARAMETER|
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: |
            # Reasons for getting HTTP status code 404:
            * SA with provided serviceAgreementId does not exist.
            * Function group does not exist.

            | Message | key |
            |--- | --- |
            | Service agreement does not exist. | serviceAgreements.get.error.message.E_NOT_EXISTS  |
            | Function group does not exist.    | functionAccessGroup.get.error.message.E_NOT_EXISTS|
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accessgroups/serviceagreements/ingest/service-agreements/participants:
    summary: PresentationIngestServiceAgreementParticipants
    description: batch update service agreement participants
    put:
      tags:
        - ServiceAgreement
      summary: batch update service agreement participants.
      description: batch update service agreement participants
      operationId: putPresentationIngestServiceAgreementParticipants
      requestBody:
        description: batch update service agreement participants
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationParticipantBatchUpdate'
      responses:
        "207":
          description: MultiStatusExtended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationIngestServiceAgreementParticipantsPutResponseBody'
              examples:
                example:
                  value:
                    value:
                      - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
                        status: "200"
                        errors: [ ]
                        action: add
                        externalServiceAgreementId: External ID of SA-1
                      - resourceId: efc1b037dbad49df9f62907ba7af2497
                        status: "404"
                        action: remove
                        externalServiceAgreementId: External ID of SA-2
                        errors:
                          - Resource does not exist
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedAltError'
  /service-api/v2/accessgroups/serviceagreements/ingest/service-agreements/admins:
    summary: PresentationServiceAgreementAdminsBatchUpdate
    description: No description available
    put:
      tags:
        - ServiceAgreement
      summary: Add or Remove admins in service agreements batch.
      description: "# Add or Remove admins in service agreements batch\r\n\r\nAdds/removes\
        \ admins in service agreements batch"
      operationId: putPresentationServiceAgreementAdminsBatchUpdate
      requestBody:
        description: "# Add or Remove admins in service agreements batch\r\n\r\nAdds/removes\
          \ admins in service agreements batch"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationServiceAgreementUsersBatchUpdate'
      responses:
        "207":
          description: MultiStatusExtended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationServiceAgreementAdminsBatchUpdatePutResponseBody'
              examples:
                example:
                  value:
                    value:
                      - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
                        status: "200"
                        errors: [ ]
                        action: add
                        externalServiceAgreementId: External ID of SA-1
                      - resourceId: efc1b037dbad49df9f62907ba7af2497
                        status: "404"
                        action: remove
                        externalServiceAgreementId: External ID of SA-2
                        errors:
                          - Resource does not exist
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/serviceagreements/ingest/service-agreements/users:
    summary: PresentationServiceAgreementUsersBatchUpdate
    description: No description available
    put:
      tags:
        - ServiceAgreement
      summary: Add or Remove users in service agreements batch.
      description: "# Add or Remove users in service agreements batch\r\n\r\nAdds/removes\
        \ users in service agreements batch"
      operationId: putPresentationServiceAgreementUsersBatchUpdate
      requestBody:
        description: "# Add or Remove users in service agreements batch\r\n\r\nAdds/removes\
          \ users in service agreements batch"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationServiceAgreementUsersBatchUpdate'
      responses:
        "207":
          description: MultiStatusExtended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationServiceAgreementUsersBatchUpdatePutResponseBody'
              examples:
                example:
                  value:
                    value:
                      - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
                        status: "200"
                        errors: [ ]
                        action: add
                        externalServiceAgreementId: External ID of SA-1
                      - resourceId: efc1b037dbad49df9f62907ba7af2497
                        status: "404"
                        action: remove
                        externalServiceAgreementId: External ID of SA-2
                        errors:
                          - Resource does not exist
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/serviceagreements/ingest/serviceagreements:
    summary: ServiceAgreementIngest
    description: No description available
    post:
      tags:
        - ServiceAgreement
      summary: Ingest Service Agreement.
      description: "# Ingest Service Agreement\r\n\r\nCreates new Service Agreement\
        \ (required to provide Legal Entity participants together with Admins)."
      operationId: postServiceAgreementIngest
      requestBody:
        description: "# Ingest Service Agreement\r\n\r\nCreates new Service Agreement\
          \ (required to provide Legal Entity participants together with Admins)."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicesAgreementIngest'
      responses:
        "201":
          description: Service Agreement has been successfully ingested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdItem'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* Request\
            \ does not honor the contract, check the example in the Request tab.\r\
            \n* Legal Entity as part of Service Agreement can share Users and/or Accounts.\
            \ If the LE shares Users that means that its Users can be added in the\
            \ given SA and to be assigned with permissions. if the LE shares Accounts\
            \ that means that its Accounts can be added and PG \r\n* Creator of Service\
            \ Agreement must be direct or indirect ancestor of the participant Legal\
            \ Entities in Service Agreement.\r\n* Invalid LE participation (some of\
            \ the admins or users are not valid)\r\n* Invalid start/end date time\r\
            \n* Invalid id or name identifier of assignable permission set\r\n* Both\
            \ or none of the identifiers sent for regular/admin user assignable permission\
            \ set.\r\n\r\n| Message | key |\r\n|--- | --- |\r\n|Legal entities hierarchy\
            \ missing.|legalentity.get.error.message.E_INVALID_LEGAL_HIERARCHY|\r\n\
            |You can not add participants that are not under the creator legal entity\
            \ hierarchy |serviceAgreements.save.error.message.E_INVALID_PARTICIPANT_HIERARCHY|\r\
            \n|LE Participant must share Users and/or Accounts|serviceAgreement.participant.add.error.message.E_LE_NOT_VALID_PARTICIPANT|\r\
            \n|Participant can not expose users if sharing users is not available.|serviceAgreement.ingest.error.message.INVALID_SHARING_USERS|\r\
            \n|Unexpected participants sharing options, participant should share both\
            \ user and accounts.|serviceAgreement.ingest.error.message.INVALID_PARTICIPANTS_SHARING|\r\
            \n|Unable to create service agreement of this type. Maximum 1 per legal\
            \ entity is allowed.|serviceAgreement.ingest.error.message.INVALID_MAXIMUM_SERVICE_AGREEMENTS|\r\
            \n|External ID already exists|serviceAgreements.save.error.message.E_EXTERNAL_ID_ALREADY_EXISTS|\r\
            \n|Invalid participant|participant.update.error.message.E_INVALID_PARTICIPANT|\r\
            \n|Wrong date/time format|datetime.valid.period.INVALID_FORMAT|\r\n|Invalid\
            \ validity period.|datetime.valid.period.INVALID_VALUE|\r\n|Invalid id\
            \ or name identifier of assignable permission set.|permissionSet.identifier.INVALID_VALUE|\r\
            \n|Both or none of the identifiers sent for regular/admin user assignable\
            \ permission set.|permissionSet.identifier.INVALID_IDENTIFIERS|\r\n|You\
            \ cannot pass creator legal entity id for master service agreement|serviceAgreements.ingest.error.message.INVALID_PARAMETER_FOR_MASTER_SA|\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/serviceagreements/external/{externalId}:
    summary: ServiceAgreementExternalId
    description: Calls for interaction with single service agreement.
    get:
      tags:
        - ServiceAgreement
      summary: Service agreement retrieved.
      description: Service agreement retrieved.
      operationId: getServiceAgreementExternalId
      parameters:
        - name: externalId
          in: path
          description: No description available
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: SA.CompanyA-CompanyB
      responses:
        "200":
          description: Service agreement by external id retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAgreementItem'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accessgroups/service-agreements/{id}/users/{userId}/permissions:
    summary: AssignUsersPermissions
    description: No description available
    put:
      tags:
        - ServiceAgreements
      summary: Updates all permission for a users in a given service agreement.
      description: Updates all permission for a users in a given service agreement.
      operationId: putAssignUsersPermissions
      parameters:
        - name: id
          in: path
          description: No description available
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
        - name: userId
          in: path
          description: Generated parameter by BOAT. Please specify the URI parameter
            in RAML
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updates all permission for a users in a given service agreement.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOfFunctionGroupsWithDataGroups'
      responses:
        "200":
          description: Users permissions successfully to the Service Agreement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationApprovalStatus'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /service-api/v2/accessgroups/service-agreements/{id}/participants:
    summary: ServiceAgreementParticipants
    description: No description available
    get:
      tags:
        - ServiceAgreements
      summary: Retrieves Legal Entities that are participants in Service Agreement.
      description: Retrieves Legal Entities that are participants in Service Agreement.
      operationId: getServiceAgreementParticipants
      parameters:
        - name: id
          in: path
          description: No description available
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
      responses:
        "200":
          description: Service Agreement participants retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAgreementParticipants'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accessgroups/service-agreements/usercontext/participants:
    summary: ContextServiceAgreementParticipants
    description: No description available
    get:
      tags:
        - ServiceAgreements
      summary: Retrieves Legal Entities that are participants in Service Agreement
        from the context.
      description: Retrieves Legal Entities that are participants in Service Agreement
        from the context.
      operationId: getContextServiceAgreementParticipants
      responses:
        "200":
          description: Service Agreement participants retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAgreementParticipants'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /service-api/v2/accessgroups/service-agreements/batch/delete:
    summary: /batch/delete
    description: No description available
    post:
      tags:
        - ServiceAgreements
      summary: Batch Delete Of Service Agreement.
      description: "#Batch Delete Of Service Agreement.\r\n\r\nPOST request to batch\
        \ delete of service agreement."
      operationId: postBatchdelete
      requestBody:
        description: "#Batch Delete Of Service Agreement.\r\n\r\nPOST request to batch\
          \ delete of service agreement."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAgreementBatchDelete'
      responses:
        "207":
          description: MultiStatus
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessgroupsService-agreementsBatchDeletePostPostResponseBody'
              examples:
                example:
                  value:
                    value:
                      - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
                        status: "200"
                        errors: [ ]
                      - resourceId: efc1b037dbad49df9f62907ba7af2497
                        status: "404"
                        errors:
                          - Resource does not exist
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/permission-sets:
    summary: PermissionSet
    description: Assignable permission set.
    get:
      tags:
        - PermissionSet
      summary: Assignable Permission Sets - `GET`.
      description: "# Assignable Permission Sets - `GET`\r\n\r\nRetrieves all assignable\
        \ permission sets. Filter by name.\r\nIf assignable permission set name provided\
        \ as filter does not exist, then empty list is returned."
      operationId: getPermissionSet
      parameters:
        - name: name
          in: query
          description: Name of Applicable Permission Set
          required: false
          style: form
          explode: true
          schema:
            type: string
          examples:
            example:
              summary: example
              value: My first APS
      responses:
        "200":
          description: "# Assignable Permission Sets - `GET`\r\n\r\nRetrieves all\
            \ assignable permission sets. Filter by name.\r\nIf assignable permission\
            \ set name provided as filter does not exist, then empty list is returned."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationPermissionSetsGet'
    put:
      tags:
        - PermissionSet
      summary: Assignable permission set - `PUT`.
      description: "# Assignable permission set - `PUT`\r\n\r\nEndpoint for assigning\
        \ and removing assignable permission sets,\r\nto/from service agreement.\r\
        \n You can update assignable permission set by:\r\n - `IdIdentifier` - internal\
        \ id of assignable permission set\r\n - `NameIdentifier` - name of assignable\
        \ permission set"
      operationId: putPermissionSet
      requestBody:
        description: "# Assignable permission set - `PUT`\r\n\r\nEndpoint for assigning\
          \ and removing assignable permission sets,\r\nto/from service agreement.\r\
          \n You can update assignable permission set by:\r\n - `IdIdentifier` - internal\
          \ id of assignable permission set\r\n - `NameIdentifier` - name of assignable\
          \ permission set"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationPermissionSetPut'
      responses:
        "200":
          description: Assignable permission sets updated successfully
          content: { }
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n* Invalid APS\
            \ set up.\r\n* Provided identifiers for the APS are invalid.\r\n\r\n|\
            \ Messages | Key |\r\n| --- | --- |\r\n| At least one business function/privilege\
            \ is contained in one or more function groups. | permissionSet.aps.PRIVILEGE_CONTAINED_IN_FUNCTION_GROUP\
            \ |\r\n| Provided identifiers for the APS are invalid. | delete.permissionSet.identifiers.INVALID_IDENTIFIER|\r\
            \n\r\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: "# Reasons for getting HTTP status code 404:\r\n\r\n* Service\
            \ agreement with provided external id not found.\r\n\r\n| Message | Key\
            \ |\r\n| --- | --- |\r\n| Service agreement does not exist | serviceAgreements.get.error.message.E_NOT_EXISTS\
            \ |"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    post:
      tags:
        - PermissionSet
      summary: Assignable permission set - `POST`.
      description: "# Assignable permission set - `POST`\r\n\r\nCreates new assignable\
        \ permission set and retrieve created assignable permission set id.\r\n"
      operationId: postPermissionSet
      requestBody:
        description: "# Assignable permission set - `POST`\r\n\r\nCreates new assignable\
          \ permission set and retrieve created assignable permission set id.\r\n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationPermissionSet'
      responses:
        "201":
          description: No description available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationId'
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* Request\
            \ does not honor the contract, check the example in the Request tab.\r\
            \n* Permission set name should be unique\r\n* Invalid business function\
            \ privilege pair\r\n\r\n| Message | key\r\n--- | --- |\r\n| Permission\
            \ set name already exists | permissionSet.save.error.message.E_NAME_ALREADY_EXISTS\r\
            \n| Invalid business function privilege pair | permissionSet.save.error.message.E_INVALID_PERMISSION\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
  /service-api/v2/accessgroups/permission-sets/{identifierType}/{identifier}:
    summary: ByIdentifier
    description: No description available
    delete:
      tags:
        - PermissionSet
      summary: Assignable permission set - `DELETE`.
      description: "# Assignable permission set - `DELETE`\r\n\r\nDeletes assignable\
        \ permission set by internal id or name. This endpoint requires a\r\nvalid\
        \ token to perform the deletion.\r\n\r\nTo generate a valid\r\ntoken, use:\
        \ //accessgroup-integration-spec/v2/accessgroups/access-token\r\nGET. Add\
        \ the generated token as query parameter AccessControlToken."
      operationId: deleteByIdentifier
      parameters:
        - name: identifierType
          in: path
          description: 'defines type(id/name) with which identifier will be defined '
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: id
        - name: identifier
          in: path
          description: name of the permission set or id
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
              value: 13
        - name: X-AccessControl-Token
          in: header
          description: Access token for verification of the command
          required: true
          style: simple
          explode: false
          schema:
            type: string
          examples:
            example:
              summary: example
      responses:
        "204":
          description: Permission set deleted successfully
        "400":
          description: "# Reasons for getting HTTP status code 400:\r\n\r\n* The APS\
            \ is associated to at least one Service Agreement.\r\n* The APS is system\
            \ default and cannot be deleted.\r\n* invalid identifiers\r\n\r\n| Message\
            \ | key\r\n--- | --- |\r\n| The APS is system default and cannot be deleted.\
            \ | delete.permissionSet.identifiers.NOT_CUSTOM\r\n| The APS is associated\
            \ to at least one Service Agreement | delete.permissionSet.identifiers.ASSIGNED_TO_SERVICE_AGREEMENT\r\
            \n| Invalid Access Token | token.delete.validation.INVALID_ACCESS_TOKEN\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        "404":
          description: "# Reasons for getting HTTP status code 404:\r\n\r\n* The APS\
            \ doesn't exist.\r\n* Provided identifiers for the APS are invalid. \r\
            \n\r\n| Message | key\r\n--- | --- |\r\n\r\n| Provided identifiers for\
            \ the APS are invalid. | delete.permissionSet.identifiers.INVALID_IDENTIFIER\r\
            \n| The APS doesn't exist. | delete.permissionSet.identifiers.NOT_EXISTS\r\
            \n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
components:
  schemas:
    AccessResourceType:
      type: string
      description: Type of the resource
      enum:
        - NONE
        - USER
        - ACCOUNT
        - USER_OR_ACCOUNT
        - USER_AND_ACCOUNT
    ArrangementPrivilegeItem:
      required:
        - arrangementId
        - privileges
      type: object
      properties:
        arrangementId:
          type: string
        privileges:
          type: array
          items:
            $ref: '#/components/schemas/Privilege'
      description: Arrangement with privileges
    ContextLegalEntities:
      type: object
      description: List of legal entity ids
      example:
        legalEntities:
          - 8946e686-d31e-4216-b3dd-5d66161d5253
          - 0955e686-d31e-4216-b3dd-5d66161d536d
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            legalEntities:
              type: array
              items:
                $ref: '#/components/schemas/Uuid'
    DataGroupItem:
      required:
        - description
        - id
        - items
        - name
        - serviceAgreementId
        - type
      type: object
      description: Data group item
      example:
        id: f57ed0ea-65ab-4620-a42a-d00a0521bbb9
        name: Account group 1
        description: Simple account group
        serviceAgreementId: 29e1e665-e98e-479a-a167-cd8164f3627e
        type: CONTACTS
        items:
          - "000001"
          - "000002"
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
            name:
              type: string
              description: Name of data group
            description:
              type: string
              description: Description of data group
            serviceAgreementId:
              $ref: '#/components/schemas/Uuid'
            type:
              $ref: '#/components/schemas/Type'
            approvalId:
              type: string
              description: Id of approval request.
            items:
              type: array
              description: Items that belong to the data group
              items:
                type: string
            metadata:
              $ref: '#/components/schemas/Metadata'
    DataGroupsIds:
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: '#/components/schemas/Uuid'
      example:
        ids:
          - 149f7e8d26904fc38bd0fdfc83394116
          - 540949a03a7846abb69e7c667bc73688
    FunctionGroupItem:
      required:
        - description
        - name
        - serviceAgreementId
        - type
      description: Function group item
      example:
        id: 8a48e2685d787f78015d793cbd300093
        name: Verifier
        description: Some description for Verifier
        serviceAgreementId: 0955e686-d31e-4216-b3dd-5d66161d536d
        type: DEFAULT
        permissions:
          - functionId: "1004"
            assignedPrivileges:
              - privilege: execute
          - functionId: "1008"
            assignedPrivileges:
              - privilege: view
              - privilege: execute
        validFrom: 2018-08-31T07:48:23Z
        validUntil: 2018-09-31T07:48:23Z
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
            serviceAgreementId:
              $ref: '#/components/schemas/Uuid'
            name:
              type: string
              description: Name of function group
            description:
              type: string
              description: Description of function group
            type:
              type: string
              description: Type of function group
              enum:
                - DEFAULT
                - SYSTEM
                - TEMPLATE
            permissions:
              type: array
              description: Applicable permissions for the function group
              items:
                $ref: '#/components/schemas/Permission'
            validFrom:
              type: string
              description: Start date and time of the function group.
              format: date-time
            validUntil:
              type: string
              description: End date and time of the function group.
              format: date-time
            approvalId:
              maxLength: 36
              minLength: 1
              type: string
              description: Id of approval request.
            metadata:
              $ref: '#/components/schemas/Metadata'
    FunctionGroupsIds:
      required:
        - ids
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: '#/components/schemas/Uuid'
      example:
        ids:
          - 149f7e8d26904fc38bd0fdfc83394116
          - 540949a03a7846abb69e7c667bc73688
    FunctionsGetResponseBody:
      required:
        - functionCode
        - functionId
        - name
        - privileges
        - resource
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            functionId:
              type: string
              description: Internal id of business function
            functionCode:
              type: string
              description: Code of business function
            resource:
              type: string
              description: Name of resource
            resourceCode:
              type: string
              description: Code of resource
            name:
              type: string
              description: Business function name
            privileges:
              type: array
              description: Applicable privileges for business function
              items:
                $ref: '#/components/schemas/PersistencePrivilege'
    GetContexts:
      required:
        - elements
        - totalElements
      type: object
      example:
        elements:
          - serviceAgreementName: SA Name 1
            serviceAgreementId: 8b4fc047-c98a-4e58-975a-6d3f2bde4ebe
            serviceAgreementMaster: true
          - serviceAgreementName: SA Name 2
            serviceAgreementId: 2af85687-5ca0-4815-baf6-7e873413de49
            serviceAgreementMaster: false
        totalElements: 2
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            elements:
              type: array
              description: List of user contexts
              items:
                $ref: '#/components/schemas/Usercontextitem'
            totalElements:
              type: integer
              description: total number of elements matching the query
              format: int64
    GetDataGroups:
      type: array
      description: Data Groups
      example:
        - id: 8a48e2685d787f78015d791ab69e0001
          name: Data group 1
          description: Data group 1 description
          serviceAgreementId: 0955e686-d31e-4216-b3dd-5d66161d536d
          type: ARRANGEMENTS
          approvalId: 0955e686-d3ae-4216-b3dd-5d66161d5399
          items:
            - I000001
            - I000002
        - id: 8a48e2685d787f78015d791ab69e0001
          name: Data group 2
          description: Data group 2 description
          serviceAgreementId: 0955e686-d31e-4216-b3dd-5d66161d536d
          type: CONTACTS
          items:
            - I000001
            - I000002
            - I000003
      items:
        $ref: '#/components/schemas/DataGroupItem'
    GetFunctionGroups:
      type: array
      description: Function Groups
      example:
        - id: 8a48e2685d787f78015d791b1c59002b
          name: Manage Entitlements - (1)
          description: Group for controlling entitlements only.
          legalEntityId: 8a48e2685d787f78015d791abffb0009
          serviceAgreementId: 8a48e2685d787f78015d791abffb2221
          type: DEFAULT
          permissions:
            - functionId: "1004"
              assignedPrivileges:
                - privilege: view
                - privilege: execute
            - functionId: "1006"
              assignedPrivileges:
                - privilege: view
        - id: 8a48e2685d787f78015d793cbd300093
          name: Verifier
          description: Some description for Verifier
          serviceAgreementId: 8a48e2685d787f78015d791ac4e54511
          type: TEMPLATE
          permissions:
            - functionId: "1004"
              assignedPrivileges:
                - privilege: execute
            - functionId: "1008"
              assignedPrivileges:
                - privilege: view
                - privilege: execute
      items:
        $ref: '#/components/schemas/FunctionGroupItem'
    GetFunctions:
      type: array
      example:
        - functionId: "1001"
          resource: Account
          resourceCode: account
          functionCode: list.accounts
          name: List
          privileges:
            - privilege: execute
              supportsLimit: true
            - privilege: view
              supportsLimit: false
        - functionId: "1002"
          functionCode: domestic.payments
          resource: Payments
          name: Domestic Payments
          privileges:
            - privilege: create
              supportsLimit: true
      items:
        $ref: '#/components/schemas/FunctionsGetResponseBody'
    GetLegalEntities:
      type: array
      description: List of legal entities
      example:
        - id: 8a48e2685d787f78015d791ab69e0001
          externalId: C000001
          name: Bank
          parentId: 8a48e2685d787f78015d791ab69e1111
          type: BANK
          isParent: true
        - id: 8a48e2685d787f78015d791abce70005
          externalId: C000002
          name: Company A
          type: CUSTOMER
          parentId: 8a48e2685d787f78015d791ab69e1111
          isParent: false
        - id: 8a48e2685d787f78015d791abffb0009
          externalId: C000003
          name: Company B
          type: CUSTOMER
          parentId: 8a48e2685d787f78015d791ab69e1111
          isParent: true
      items:
        $ref: '#/components/schemas/LegalEntityItem'
    GetUsersFunctionGroups:
      type: array
      description: List of user/function groups
      example:
        - userId: 8a48e2685d787f78015d791ac267000e
          functionGroupIds:
            - 0955e686d31e4216b3dd5d66161d536d
            - k4k459rkd31e4216b3dd5d66161d536d
        - userId: 914ae2685d787f78015d791ac267000e
          functionGroupIds:
            - 0955e686d31e4216b3dd5d66161d536d
      items:
        $ref: '#/components/schemas/UserFunctionGroups'
    UserFunctionGroups:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            userId:
              type: string
              description: Internal id of the user.
            functionGroupIds:
              type: array
              description: List of internal function group ids.
              items:
                type: string
                description: Internal id of the function group.
    LegalEntityBase:
      required:
        - externalId
        - id
        - name
        - type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        externalId:
          $ref: '#/components/schemas/ExternalId'
        name:
          minLength: 1
          type: string
          description: Name of the legal entity
        type:
          $ref: '#/components/schemas/LegalEntityType'
      description: Legal entity item
    LegalEntityItem:
      required:
        - externalId
        - id
        - name
        - type
      description: Legal entity item
      example:
        id: f41c4f3fea444cd2bfcf861dd13d2a4c
        externalId: C000001
        name: Bank
        parentId: e9299302-56d3-40e8-a070-585dabbdc4aa
        type: CUSTOMER
        isParent: true
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            parentId:
              $ref: '#/components/schemas/Uuid'
            isParent:
              type: boolean
              description: Defines whether the legal entity is parent
            id:
              $ref: '#/components/schemas/Uuid'
            externalId:
              $ref: '#/components/schemas/ExternalId'
            name:
              minLength: 1
              type: string
              description: Name of the legal entity
            type:
              $ref: '#/components/schemas/LegalEntityType'
    LegalEntityItemBase:
      required:
        - externalId
        - id
        - name
        - type
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
            externalId:
              $ref: '#/components/schemas/ExternalId'
            name:
              minLength: 1
              type: string
              description: Name of the legal entity
            type:
              $ref: '#/components/schemas/LegalEntityType'
          example:
            id: 8a48e2685d787f78015d791accef0019
            externalId: C000005
            type: CUSTOMER
            name: Company D
    LegalEntityType:
      type: string
      description: Type of the legal entity. Bank or Customer.
      enum:
        - CUSTOMER
        - BANK
    ListServiceAgreementByPermissionSet:
      type: array
      example:
        - id: a1198a20-5a40-4eb7-b47f-a553db920429
          externalId: external-id-1
          name: Broker deal 1
          isMaster: true
          regularUserAps:
            - 1
          adminUserAps:
            - 2
        - id: a4258a20-5a40-4eb7-b47f-a553db920429
          externalId: external-id-2
          name: extSA
          isMaster: false
          regularUserAps:
            - 3
            - 4
            - 9
          adminUserAps:
            - 4
            - 7
      items:
        $ref: '#/components/schemas/ServiceAgreementByPermissionSet'
    ServiceAgreementByPermissionSet:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              type: string
              description: Service agreement internal id
            externalId:
              type: string
              description: Service agreement external id
            name:
              type: string
              description: Service agreement name
            isMaster:
              type: boolean
              description: Is Service agreement master
            regularUserAps:
              type: array
              description: Assigned permission set ids assigned to service agreement
                as regular user
              items:
                type: number
            adminUserAps:
              type: array
              description: Assigned permission set ids assigned to service agreement
                as admin user
              items:
                type: number
    ListServiceAgreements:
      required:
        - serviceAgreements
        - totalElements
      type: object
      description: List of service agreements
      example:
        serviceAgreements:
          - id: 8a48e2685d787f78015d791ab6ad0002
            name: Company A SA
            description: Service Agreement description
            creatorLegalEntity: 8a48e2685d787f78015d791ab69e0001
            creatorLegalEntityName: MicroSphere
            isMaster: true
            status: ENABLED
            numberOfParticipants: 1
            validFrom: 2018-08-31T07:48:23Z
            validUntil: 2018-09-31T07:48:23Z
          - id: 8a48e2685d787f78015d791b1c64002c
            name: First Service Agreement.
            description: Service Agreement description
            creatorLegalEntity: 8a48e2685d787f78015d791b1c65002d
            creatorLegalEntityName: Endava
            isMaster: false
            status: ENABLED
            numberOfParticipants: 3
            validFrom: 2018-01-01T07:48:23Z
        totalElements: 100
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            totalElements:
              type: integer
              description: total number of elements matching the query
              format: int64
            serviceAgreements:
              type: array
              items:
                $ref: '#/components/schemas/PersistenceServiceAgreement'
    Permission:
      required:
        - assignedPrivileges
        - functionId
      type: object
      properties:
        functionId:
          type: string
        assignedPrivileges:
          type: array
          items:
            $ref: '#/components/schemas/Privilege'
    PersistenceApprovalPermissions:
      required:
        - items
      type: object
      example:
        items:
          - functionGroupId: 0955e686d31e4216b3dd5d66161d536d
            dataGroupIds:
              - 0955e686d31e4216b3dd5d66161d536d
          - functionGroupId: 8675e686d31e378823ac5d66161d536d
            dataGroupIds: [ ]
          - functionGroupId: nc38743g8f34g843f3874f347834783d
            dataGroupIds: [ ]
            selfApprovalPolicies:
              - businessFunctionName: Intra Company Payments
                canSelfApprove: true
                bounds:
                  - amount: 42.08
                    currencyCode: USD
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            approvalId:
              $ref: '#/components/schemas/Uuid'
            items:
              type: array
              items:
                $ref: '#/components/schemas/PersistenceApprovalPermissionsGetResponseBody'
    PersistenceApprovalPermissionsGetResponseBody:
      required:
        - functionGroupId
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            functionGroupId:
              $ref: '#/components/schemas/Uuid'
            dataGroupIds:
              minLength: 0
              type: array
              items:
                $ref: '#/components/schemas/Uuid'
            selfApprovalPolicies:
              $ref: '#/components/schemas/SelfApprovalPolicies'
    SelfApprovalPolicies:
      type: array
      items:
        $ref: '#/components/schemas/SelfApprovalPolicy'
    SelfApprovalPolicy:
      required:
        - businessFunctionName
        - canSelfApprove
      type: object
      properties:
        businessFunctionName:
          type: string
          description: Name of business function
        canSelfApprove:
          type: boolean
          description: Self approval permission toggle
        bounds:
          type: array
          items:
            $ref: '#/components/schemas/Bound'
    Bound:
      required:
        - amount
        - currencyCode
      type: object
      properties:
        amount:
          minimum: 0
          type: number
          description: The amount in the specified currency
          format: decimal
          example: 42.23
        currencyCode:
          pattern: "^[A-Z]{3}$"
          type: string
          description: The alpha-3 code (complying with ISO 4217) of the currency
            that qualifies the amount
          format: iso-4217
          example: EUR
    PersistenceDataGroupDataItems:
      type: object
      properties:
        id:
          type: string
          description: Data group id
        items:
          type: array
          description: List of data item ids
          items:
            type: string
            description: Data item id
      description: An object which contain data group id and data item ids.
    PersistenceDataItem:
      type: object
      description: Data item object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
            dataType:
              type: string
              description: Type of the data item
    PersistencePrivilege:
      required:
        - privilege
        - supportsLimit
      type: object
      description: Privilege
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            privilege:
              type: string
            supportsLimit:
              type: boolean
    PersistenceServiceAgreement:
      required:
        - description
        - id
        - name
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            numberOfParticipants:
              type: number
              description: number of legal entities participating in the service agreement
            creatorLegalEntityName:
              type: string
              description: Service agreement creator legal entity name
            creatorLegalEntity:
              $ref: '#/components/schemas/Uuid'
            status:
              $ref: '#/components/schemas/Status'
            id:
              $ref: '#/components/schemas/Uuid'
            externalId:
              $ref: '#/components/schemas/ExternalId'
            name:
              minLength: 1
              type: string
              description: Service agreement name
            description:
              minLength: 1
              type: string
              description: Service agreement description
            isMaster:
              type: boolean
              description: Is master service agreement
            validFrom:
              type: string
              description: Start date and time of the service agreement.
              format: date-time
            validUntil:
              type: string
              description: End date and time of the service agreement.
              format: date-time
          description: Service agreement
    PersistenceServiceAgreementDataGroups:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            serviceAgreementId:
              type: string
              description: Service agreement id
            dataGroups:
              type: array
              description: List of data group ids with data item ids
              items:
                $ref: '#/components/schemas/PersistenceDataGroupDataItems'
          description: An object which contain service agreement id with data group
            ids and data item ids.
    PersistenceUserDataItemPermission:
      type: object
      description: User access object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            dataItem:
              $ref: '#/components/schemas/PersistenceDataItem'
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/PersistenceUserPermission'
    PersistenceUserPermission:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            resource:
              type: string
            businessFunction:
              type: string
            functionId:
              type: string
              description: Internal id of business function
            functionCode:
              type: string
              description: Code of business function
            privileges:
              type: array
              items:
                type: string
    Privilege:
      required:
        - privilege
      type: object
      description: Privilege
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            privilege:
              type: string
    ServiceAgreementAdmins:
      required:
        - admins
      type: object
      example:
        admins:
          - 37e910ca-3a34-445d-9893-2ad8c9215e2b
          - 1cf8e198-50b6-4f42-9672-e364d5241b71
          - c2e34ee1-61c9-4073-9148-36be7b03f17d
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            admins:
              type: array
              items:
                $ref: '#/components/schemas/Uuid'
    ServiceAgreementBase:
      required:
        - description
        - id
        - name
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        externalId:
          $ref: '#/components/schemas/ExternalId'
        name:
          minLength: 1
          type: string
          description: Service agreement name
        description:
          minLength: 1
          type: string
          description: Service agreement description
        isMaster:
          type: boolean
          description: Is master service agreement
        validFrom:
          type: string
          description: Start date and time of the service agreement.
          format: date-time
        validUntil:
          type: string
          description: End date and time of the service agreement.
          format: date-time
      description: Service agreement item
    ServiceAgreementDataGroupsList:
      type: array
      description: List of service agreement ids with data group ids and data item
        ids.
      example:
        - serviceAgreementId: 01d70d09997b41cb83ea0e1db84626b3
          dataGroups:
            - id: 01d70d09997b41cb83eb0e1db84626b3
              items:
                - 01d70d09997b41cb83eb0e1db84626b3
                - 01d70d09997b41cb83eb0e1db84626b3
            - id: 01d70d09997b41cb83eb0e1db84626b3
              items:
                - 01d70d09997b41cb83eb0e1db84626b3
                - 01d70d09997b41cb83eb0e1db84626b3
        - serviceAgreementId: 01d70d09997b41cb83ea0e1db84626b3
          dataGroups:
            - id: 01d70d09997b41cb83eb0e1db84626b3
              items:
                - 01d70d09997b41cb83eb0e1db84626b3
                - 01d70d09997b41cb83eb0e1db84626b3
            - id: 01d70d09997b41cb83eb0e1db84626b3
              items:
                - 01d70d09997b41cb83eb0e1db84626b3
                - 01d70d09997b41cb83eb0e1db84626b3
      items:
        $ref: '#/components/schemas/PersistenceServiceAgreementDataGroups'
    Type:
      maxLength: 36
      minLength: 1
      pattern: ^\S+$
      type: string
      description: Data group type
    UserAccessEntitlementsResource:
      required:
        - accessResourceType
        - legalEntityIds
        - userLegalEntityId
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            contextServiceAgreementId:
              $ref: '#/components/schemas/Uuid'
            userLegalEntityId:
              $ref: '#/components/schemas/Uuid'
            legalEntityIds:
              type: array
              description: List of legal entity ids to check
              items:
                $ref: '#/components/schemas/Uuid'
            accessResourceType:
              $ref: '#/components/schemas/AccessResourceType'
          example:
            contextServiceAgreementId: 8946e686-d31e-4216-b3dd-5d66161d5253
            userLegalEntityId: 0955e686-d31e-4216-b3dd-5d66161d536d
            legalEntityIds:
              - 8a48e2685d787f78015d791ab6ad0002
              - 8a48e2685d787f78015d791ab6ad2583
            accessResourceType: USER
    UserAccessLegalEntities:
      required:
        - accessResourceType
        - userLegalEntityId
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            contextServiceAgreementId:
              $ref: '#/components/schemas/Uuid'
            userLegalEntityId:
              $ref: '#/components/schemas/Uuid'
            accessResourceType:
              $ref: '#/components/schemas/AccessResourceType'
          example:
            contextServiceAgreementId: 8946e686-d31e-4216-b3dd-5d66161d5253
            userLegalEntityId: 0955e686-d31e-4216-b3dd-5d66161d536d
            accessResourceType: USER
    UserAccessServiceAgreement:
      required:
        - accessResourceType
        - serviceAgreementId
        - userLegalEntityId
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            contextServiceAgreementId:
              $ref: '#/components/schemas/Uuid'
            serviceAgreementId:
              $ref: '#/components/schemas/Uuid'
            userLegalEntityId:
              $ref: '#/components/schemas/Uuid'
            accessResourceType:
              $ref: '#/components/schemas/AccessResourceType'
          example:
            contextServiceAgreementId: 8946e686-d31e-4216-b3dd-5d66161d5253
            serviceAgreementId: 8a48e2685d787f78015d791ab6ad0002
            userLegalEntityId: 0955e686-d31e-4216-b3dd-5d66161d536d
            accessResourceType: USER
    Usercontextitem:
      required:
        - serviceAgreementId
        - serviceAgreementMaster
        - serviceAgreementName
      type: object
      description: Context Service Agreement item
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            serviceAgreementName:
              type: string
              description: Service Agreement name
            serviceAgreementId:
              $ref: '#/components/schemas/Uuid'
            serviceAgreementMaster:
              type: boolean
              description: Service Agreement Master
            externalId:
              $ref: '#/components/schemas/ExternalId'
            description:
              maxLength: 255
              minLength: 1
              type: string
              description: Brief text to describe service agreement
    UserDataItemPermissions:
      type: array
      description: Permissions list
      example:
        - dataItem:
            id: 9fa0961eb3d04dd3a5e48748d27e7275
            dataType: ARRANGEMENTS
          permissions:
            - resource: Payments
              businessFunction: SEPA CT
              privileges:
                - view
            - resource: Payments
              businessFunction: Domestic Payments
              privileges:
                - view
                - create
        - dataItem:
            id: 9fa0961eb3d046d3a5e48748d27e7275
            dataType: ARRANGEMENTS
          permissions:
            - resource: Payments
              businessFunction: Domestic Payments
              privileges:
                - approve
      items:
        $ref: '#/components/schemas/PersistenceUserDataItemPermission'
    Uuid:
      pattern: "^[0-9a-f]{32}$|^[0-9a-f-]{36}$"
      type: string
      description: Universally Unique Identifier.
    AdditionalProperties:
      type: object
      additionalProperties:
        type: string
    AdditionalPropertiesAware:
      type: object
      properties:
        additions:
          $ref: '#/components/schemas/AdditionalProperties'
    Metadata:
      maxProperties: 10
      minProperties: 0
      type: object
      additionalProperties:
        maxLength: 80
        minLength: 1
        type: string
      description: Metadata for specific entities. Do not use it for custom extensions.
        Use additions instead.
    AccessToken:
      maxLength: 36
      minLength: 1
      pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      type: string
      description: Universally Unique IDentifier.
    BatchResponseItem:
      required:
        - resourceId
        - status
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            resourceId:
              minLength: 1
              type: string
              description: Id of the resource
            status:
              type: string
              description: Http status codes available for response
              enum:
                - "200"
                - "400"
                - "404"
                - "500"
              x-enum-varnames:
                - HTTP_STATUS_OK
                - HTTP_STATUS_BAD_REQUEST
                - HTTP_STATUS_NOT_FOUND
                - HTTP_STATUS_INTERNAL_SERVER_ERROR
            errors:
              type: array
              description: List of error messages
              items:
                type: string
                description: Error message
    ExternalIdentifier:
      maxLength: 64
      minLength: 1
      pattern: "^[^\\r\\n]{1,64}$"
      type: string
      description: External legal entity identifier.
    GetLegalEntitiesBase:
      type: array
      example:
        - id: c7a382786d514262b75ab9531b749a2b
          externalId: Bank
          name: Bank
          type: BANK
        - id: dbc9e566d44f4cd9a1f09ad3f6729f15
          externalId: KPMG
          name: KPMG
          type: CUSTOMER
        - id: 77f8c4cd11c8436ba77f8ca34e6a173d
          externalId: MicroSphere
          name: MicroSphere
          type: CUSTOMER
        - id: c9fc30f4e5fb492c97ed0a05f926aecc
          externalId: MicroSphere Amsterdam
          name: MicroSphere Amsterdam
          type: CUSTOMER
        - id: 0f6d14f40e064deeaee351befd53d3e7
          externalId: MicroSphere Cardiff
          name: MicroSphere Cardiff
          type: CUSTOMER
      items:
        $ref: '#/components/schemas/LegalEntityItemBase'
    GetServiceAgreement:
      required:
        - description
        - id
        - name
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
            externalId:
              $ref: '#/components/schemas/ExternalIdentifier'
            name:
              maxLength: 128
              minLength: 1
              type: string
            description:
              maxLength: 255
              minLength: 1
              type: string
            creatorLegalEntity:
              $ref: '#/components/schemas/Uuid'
            isMaster:
              type: boolean
              default: false
            status:
              $ref: '#/components/schemas/Status'
            validFromDate:
              type: string
              description: Start date of the service agreement.
            validFromTime:
              type: string
              description: Start time of the service agreement.
            validUntilDate:
              type: string
              description: End date of the service agreement.
            validUntilTime:
              type: string
              description: End time of the service agreement.
    LegalEntitiesBatchDelete:
      required:
        - externalIds
      type: object
      properties:
        externalIds:
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentifier'
        accessToken:
          $ref: '#/components/schemas/AccessToken'
      example:
        externalIds:
          - U00001 - old
          - U00002 - old
        accessToken: 540949a0-3a78-46ab-b69e-7c667bc73688
    LegalEntitiesBatchDeletePostResponseBody:
      type: array
      example:
        - status: "200"
          resourceId: SA-001
        - status: "400"
          resourceId: SA-002
          errors:
            - Invalid property 'id'
            - Property 'name' cannot be null
      items:
        $ref: '#/components/schemas/BatchResponseItem'
    LegalEntitiesBatchPut:
      type: array
      example:
        - externalId: ext1
          legalEntity:
            externalId: ext1
            name: BB Skopje
            parentExternalId: BackbaseAmsterdam
            type: CUSTOMER
        - externalId: ext2
          legalEntity:
            externalId: ext2
            name: MicroSphere Skopje
            parentExternalId: BackbaseAmsterdam
            type: CUSTOMER
      items:
        $ref: '#/components/schemas/LegalEntityPut'
    LegalEntitiesPutResponseBody:
      type: array
      example:
        - status: "200"
          resourceId: SA-001
        - status: "400"
          resourceId: SA-002
          errors:
            - Invalid property 'id'
            - Property 'name' cannot be null
      items:
        $ref: '#/components/schemas/BatchResponseItem'
    LegalEntityCreateItem:
      required:
        - externalId
        - name
        - type
      type: object
      example:
        externalId: ext1
        name: MicroSphere Skopje
        parentExternalId: MicroSphere Amsterdam
        type: CUSTOMER
        activateSingleServiceAgreement: true
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            externalId:
              $ref: '#/components/schemas/ExternalIdentifier'
            name:
              maxLength: 128
              minLength: 1
              pattern: ^\S(.*(\S))?$
              type: string
              description: Legal Entity name
            parentExternalId:
              $ref: '#/components/schemas/ExternalIdentifier'
            type:
              $ref: '#/components/schemas/LegalEntityType'
            activateSingleServiceAgreement:
              type: boolean
              description: Defines whether a master service agreement is activated or
                disabled for a legal entity.
    LegalEntityExternalData:
      type: array
      example:
        - id: c7a382786d514262b75ab9531b749a2b
          externalId: Bank
          name: Bank
          type: BANK
        - id: 77f8c4cd11c8436ba77f8ca34e6a173d
          externalId: MicroSphere
          name: MicroSphere
          type: CUSTOMER
        - externalId: MicroSphere Amsterdam
          name: MicroSphere Amsterdam
        - externalId: MicroSphere Cardiff
          name: MicroSphere Cardiff
      items:
        $ref: '#/components/schemas/LegalEntityExternalDataItem'
    LegalEntityExternalDataItem:
      required:
        - externalId
        - name
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        externalId:
          $ref: '#/components/schemas/ExternalIdentifier'
        name:
          maxLength: 128
          minLength: 1
          type: string
        type:
          $ref: '#/components/schemas/LegalEntityType'
    LegalEntityItemId:
      required:
        - id
      type: object
      description: Object that defines an id attribute only.
      example:
        id: 0955e686-d31e-4216-b3dd-5d66161d536d
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
    LegalEntityPut:
      required:
        - externalId
        - legalEntity
      type: object
      properties:
        legalEntity:
          $ref: '#/components/schemas/LegalEntityCreateItem'
        externalId:
          $ref: '#/components/schemas/ExternalIdentifier'
    LegalEntityUpdateItem:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/LegalEntityType'
      description: Legal entity update item.
      example:
        type: BANK
    AccessgroupsService-agreementsBatchDeletePostPostResponseBody:
      type: array
      example:
        - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
          status: "200"
          errors: [ ]
        - resourceId: efc1b037dbad49df9f62907ba7af2497
          status: "404"
          errors:
            - Resource does not exist
      items:
        $ref: '#/components/schemas/BatchResponseItem'
    AccessgroupsServiceagreementsBatchDeletePostPostResponseBody:
      type: array
      example:
        - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
          status: "200"
          errors: [ ]
        - resourceId: efc1b037dbad49df9f62907ba7af2497
          status: "404"
          errors:
            - Resource does not exist
      items:
        $ref: '#/components/schemas/BatchResponseItem'
    ApprovalStatus:
      type: string
      description: Presentation approval status
      enum:
        - APPROVED
        - PENDING
        - REJECTED
      x-enum-varnames:
        - APPROVED
        - PENDING
        - REJECTED
    ArrangementPrivileges:
      type: array
      example:
        - arrangementId: 9fa0961eb3d04dd3a5e48748d27e7275
          privileges:
            - privilege: view
        - arrangementId: 149f7e8d26904fc38bd0fdfc83394116
          privileges:
            - privilege: view
      items:
        $ref: '#/components/schemas/ArrangementPrivilegesGetResponseBody'
    ArrangementPrivilegesGetResponseBody:
      required:
        - arrangementId
        - privileges
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            arrangementId:
              maxLength: 36
              minLength: 1
              type: string
            privileges:
              type: array
              items:
                $ref: '#/components/schemas/Privilege'
    AssignUserPermissions:
      type: array
      example:
        - externalServiceAgreementId: EX-SA-001
          externalUserId: U0000012
          functionGroupDataGroups:
            - functionGroupIdentifier:
                idIdentifier: 5643e686-d31e-4216-b3ff-5d66161d897d
              dataGroupIdentifiers:
                - nameIdentifier:
                    externalServiceAgreementId: EX-SA-001
                    name: Inputer
                    dataGroupType: CONTACTS
        - externalServiceAgreementId: EX-SA-002
          externalUserId: U0000068
          functionGroupDataGroups:
            - functionGroupIdentifier:
                nameIdentifier:
                  externalServiceAgreementId: EX-SA-002
                  name: fg-name1
              dataGroupIdentifiers:
                - nameIdentifier:
                    externalServiceAgreementId: EX-SA-002
                    name: dg-name1
                    dataGroupType: CONTACTS
                - nameIdentifier:
                    externalServiceAgreementId: EX-SA-002
                    name: dg-name2
                    dataGroupType: CONTACTS
      items:
        $ref: '#/components/schemas/PresentationAssignUserPermissions'
    AssignUserPermissionsPutResponseBody:
      type: array
      example:
        - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
          status: "200"
          errors: [ ]
          action: add
          externalServiceAgreementId: External ID of SA-1
        - resourceId: efc1b037dbad49df9f62907ba7af2497
          status: "404"
          action: remove
          externalServiceAgreementId: External ID of SA-2
          errors:
            - Resource does not exist
      items:
        $ref: '#/components/schemas/BatchResponseItemExtended'
    BatchResponseItemExtended:
      required:
        - externalServiceAgreementId
        - resourceId
        - status
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            externalServiceAgreementId:
              maxLength: 64
              minLength: 1
              type: string
              description: External Service Agreement ID.
            action:
              $ref: '#/components/schemas/PresentationAction'
            resourceId:
              minLength: 1
              type: string
              description: Id of the resource
            status:
              type: string
              description: Http status codes available for response
              enum:
                - "200"
                - "400"
                - "404"
                - "500"
              x-enum-varnames:
                - HTTP_STATUS_OK
                - HTTP_STATUS_BAD_REQUEST
                - HTTP_STATUS_NOT_FOUND
                - HTTP_STATUS_INTERNAL_SERVER_ERROR
            errors:
              type: array
              description: List of error messages
              items:
                type: string
                description: Error message
    BbAccessControl:
      required:
        - function
        - privilege
        - resource
      type: object
      properties:
        resource:
          type: string
          description: "Resource being protected, e.g. 'User'"
        function:
          type: string
          description: "Business function, e.g. 'Manage Users'"
        privilege:
          type: string
          description: "The privilege required, e.g. 'view'"
    BbApiDeprecation:
      required:
        - deprecatedFromVersion
        - description
        - reason
        - removedFromVersion
      type: object
      properties:
        deprecatedFromVersion:
          type: string
          description: Version of the product from which the endpoint has been deprecated
            and should no longer be used
          deprecated: true
        removedFromVersion:
          type: string
          description: Version of the product from which the API endpoint will be
            removed
        reason:
          type: string
          description: The reason the API endpoint was deprecated
          deprecated: true
        description:
          type: string
          description: "Any further information, e.g. migration information"
    CreateStatus:
      type: string
      description: Status of the entity
      default: ENABLED
      enum:
        - ENABLED
        - DISABLED
    Dataaccessgroupsforfunctionaccessgroupitem:
      required:
        - functionAccessGroupId
      type: object
      properties:
        functionAccessGroupId:
          $ref: '#/components/schemas/Uuid'
        dataAccessGroupIds:
          type: array
          items:
            $ref: '#/components/schemas/Uuid'
    Datagroupitembasedetails:
      required:
        - description
        - name
        - type
      type: object
      properties:
        name:
          maxLength: 128
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Data group name
        description:
          maxLength: 255
          minLength: 1
          pattern: ^(\S|\n)((.|\n)*(\S|\n))?$
          type: string
          description: Data group description
        type:
          $ref: '#/components/schemas/DataGroupType'
        items:
          type: array
          description: Data group items
          items:
            maxLength: 64
            minLength: 1
            type: string
    DataGroupItemsUpdatePutResponseBody:
      type: array
      example:
        - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
          status: "200"
          errors: [ ]
          action: add
          externalServiceAgreementId: External ID of SA-1
        - resourceId: efc1b037dbad49df9f62907ba7af2497
          status: "404"
          action: remove
          externalServiceAgreementId: External ID of SA-2
          errors:
            - Resource does not exist
      items:
        $ref: '#/components/schemas/BatchResponseItemExtended'
    DataGroupItemSystemBase:
      required:
        - description
        - name
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            serviceAgreementId:
              $ref: '#/components/schemas/Uuid'
            externalServiceAgreementId:
              $ref: '#/components/schemas/ExternalId'
            areItemsInternalIds:
              type: boolean
              description: "If true all items are with internal ids, otherwise are external\
              \ ids"
              default: true
            name:
              maxLength: 128
              minLength: 1
              pattern: ^\S(.*(\S))?$
              type: string
              description: Data group name
            description:
              maxLength: 255
              minLength: 1
              pattern: ^(\S|\n)((.|\n)*(\S|\n))?$
              type: string
              description: Data group description
            type:
              $ref: '#/components/schemas/DataGroupType'
            items:
              type: array
              description: Data group items
              items:
                maxLength: 64
                minLength: 1
                type: string
            metadata:
              $ref: '#/components/schemas/Metadata'
          example:
            name: Data group 1
            description: Simple data group
            externalServiceAgreementId: 0955e686d31e4216b3dd5d66161d536d
            type: ARRANGEMENTS
            areItemsInternalIds: true
            items:
              - 8eb58b1d048d4112a2f7591d465c3f14
              - 68e8d8bc50ff4106ac76cc9a9e63748c
    DataGroupsDelete:
      type: array
      example:
        - idIdentifier: 0955e686-d31e-4216-b3dd-5d66161d536d
        - nameIdentifier:
            name: Data Group 1
            externalServiceAgreementId: "001"
            dataGroupType: CONTACTS
      items:
        $ref: '#/components/schemas/PresentationDataGroupIdentifier'
    DataGroupsDeletePostResponseBody:
      type: array
      example:
        - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
          status: "200"
          errors: [ ]
          action: add
          externalServiceAgreementId: External ID of SA-1
        - resourceId: efc1b037dbad49df9f62907ba7af2497
          status: "404"
          action: remove
          externalServiceAgreementId: External ID of SA-2
          errors:
            - Resource does not exist
      items:
        $ref: '#/components/schemas/BatchResponseItemExtended'
    DataGroupsItemUpdatePut:
      type: array
      description: Data group items update by identifier put
      example:
        - dataGroupIdentifier:
            idIdentifier: 540949a03a7846abb69e7c667bc73688
          action: add
          type: ARRANGEMENTS
          dataItems:
            - internalIdIdentifier: 540949a03a7846abb69e7c667bc73688
            - internalIdIdentifier: 540949a03a7846abb69e7c667bc73688
        - dataGroupIdentifier:
            nameIdentifier:
              externalServiceAgreementId: external-service-agreement-id
              name: All Accounts
              dataGroupType: ARRANGEMENTS
          action: remove
          type: ARRANGEMENTS
          dataItems:
            - externalIdIdentifier: external-arrangement-id-1
            - externalIdIdentifier: external-arrangement-id-2
      items:
        $ref: '#/components/schemas/PresentationDataGroupItemPutRequestBody'
    DataGroupType:
      maxLength: 36
      minLength: 1
      pattern: ^\S+$
      type: string
      description: Data group type
    DataItemId:
      maxLength: 36
      minLength: 1
      type: string
      description: Data item id.
    ExternalId:
      maxLength: 64
      minLength: 1
      pattern: "^[^\\r\\n]{1,64}$"
      type: string
      description: External Unique Identifier.
    FunctionGroupDelete:
      type: array
      description: Id's that should be deleted
      example:
        - idIdentifier: 0955e686-d31e-4216-b3dd-5d66161d536d
        - nameIdentifier:
            name: Inputer
            externalServiceAgreementId: "001"
      items:
        $ref: '#/components/schemas/PresentationIdentifier'
    FunctionGroupsDeletePostResponseBody:
      type: array
      example:
        - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
          status: "200"
          errors: [ ]
          action: add
          externalServiceAgreementId: External ID of SA-1
        - resourceId: efc1b037dbad49df9f62907ba7af2497
          status: "404"
          action: remove
          externalServiceAgreementId: External ID of SA-2
          errors:
            - Resource does not exist
      items:
        $ref: '#/components/schemas/BatchResponseItemExtended'
    FunctionGroupsUpdatePut:
      type: array
      example:
        - identifier:
            idIdentifier: 0955e686-d31e-4216-b3dd-5d66161d536d
          functionGroup:
            name: Inputer
            description: Some description for inputer
            permissions:
              - functionName: SEPA CT
                privileges:
                  - view
                  - edit
              - functionName: Domestic Payments
                privileges:
                  - view
                  - edit
            validFromDate: 2017-03-31
            validFromTime: 07:48:23
            validUntilDate: 2020-03-31
            validUntilTime: 07:48:23
        - identifier:
            nameIdentifier:
              externalServiceAgreementId: "001"
              name: Inputer
          functionGroup:
            name: Inputer
            description: Some description for inputer
            permissions:
              - functionName: SEPA CT
                privileges:
                  - view
                  - edit
              - functionName: Domestic Payments
                privileges:
                  - view
                  - edit
            validFromDate: 2017-03-31
            validFromTime: 07:48:23
            validUntilDate: 2020-03-31
            validUntilTime: 07:48:23
      items:
        $ref: '#/components/schemas/PresentationFunctionGroupPutRequestBody'
    FunctionGroupsUpdatePutResponseBody:
      type: array
      example:
        - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
          status: "200"
          errors: [ ]
          action: add
          externalServiceAgreementId: External ID of SA-1
        - resourceId: efc1b037dbad49df9f62907ba7af2497
          status: "404"
          action: remove
          externalServiceAgreementId: External ID of SA-2
          errors:
            - Resource does not exist
      items:
        $ref: '#/components/schemas/BatchResponseItemExtended'
    Functiongroupupdate:
      required:
        - description
        - name
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            name:
              maxLength: 128
              minLength: 1
              pattern: ^\S(.*(\S))?$
              type: string
              description: Function group name
            description:
              maxLength: 255
              minLength: 1
              pattern: ^(\S|\n)((.|\n)*(\S|\n))?$
              type: string
              description: Function group description
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/PresentationPermissionFunctionGroupUpdate'
            validFromDate:
              type: string
              description: Start date of the function group.
            validFromTime:
              type: string
              description: Start time of the function group.
            validUntilDate:
              type: string
              description: End date of the function group.
            validUntilTime:
              type: string
              description: End time of the function group.
            metadata:
              $ref: '#/components/schemas/Metadata'
    GetPrivileges:
      type: array
      example:
        - privilege: execute
        - privilege: read
      items:
        $ref: '#/components/schemas/PrivilegesGetResponseBody'
    GetServiceAgreements:
      type: array
      example:
        - id: 951293e6521940e3ae0608f93ff0b215
          externalId: external-id-1
          name: Broker deal 1
          description: Agreement between MicroSphere and Apple
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e42bbe96147
          externalId: external-id-2
          name: Broker deal 2
          description: Agreement between MicroSphere and HP
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae0a1e42bbe96147
          externalId: external-id-3
          name: Tyler Boyd Associates
          description: Description of service agreement
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae1a1e42bbe96147
          externalId: external-id-4
          name: Tyler Boyd Associates UAE
          description: Description of service agreement
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae2a1e42bbe96147
          externalId: external-id-5
          name: Tyler Boyd Associates US
          description: Description of service agreement
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae3a1e42bbe96147
          externalId: external-id-6
          name: Tyler Boyd Associates US Salary Services
          description: Description of service agreement
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae4a1e42bbe96147
          externalId: external-id-7
          name: Tyler Boyd Associates US Training
          description: Description of service agreement
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae5a1e42bbe96147
          externalId: external-id-8
          name: Tyler Boyd Associates UK
          description: Description of service agreement
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae6a1e42bbe96147
          externalId: external-id-9
          name: Tyler Boyd Associates UK Sales
          description: Description of service agreement
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae7a1e42bbe96147
          externalId: external-id-10
          name: Tyler Boyd Associates UK Marketing
          description: Description of service agreement
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae9a1e42bbe96147
          externalId: external-id-11
          name: Broker deal 11
          description: Agreement between MicroSphere and Microsoft
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a0e42bbe96147
          externalId: external-id-12
          name: Broker deal 12
          description: Agreement between MicroSphere and Packard-Bell
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a2e42bbe96147
          externalId: external-id-13
          name: Tyler Boyd Associates ROI
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a3e42bbe96147
          externalId: external-id-14
          name: Tyler Boyd Associates ROI Services
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a4e42bbe96147
          externalId: external-id-15
          name: Tyler Boyd Associates ROI Finance
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a5e42bbe96147
          externalId: external-id-16
          name: Tyler Boyd Associates ROI HR
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a6e42bbe96147
          externalId: external-id-17
          name: Tyler Boyd Associates EU
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a7e42bbe96147
          externalId: external-id-18
          name: Tyler Boyd Associates EU North
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a8e42bbe96147
          externalId: external-id-19
          name: Tyler Boyd Associates EU East
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a9e02bbe96147
          externalId: external-id-20
          name: Tyler Boyd Associates EU South
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e12bbe96147
          externalId: external-id-21
          name: Broker deal 21
          description: Agreement between MicroSphere and Google
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e22bbe96147
          externalId: external-id-22
          name: Broker deal 22
          description: Agreement between MicroSphere and Dell
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e32bbe96147
          externalId: external-id-23
          name: Tyler Boyd Associates EU West
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e52bbe96147
          externalId: external-id-24
          name: Tyler Boyd Associates EU Central
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e62bbe96147
          externalId: external-id-25
          name: Tyler Boyd Associates CAN
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e72bbe96147
          externalId: external-id-26
          name: Tyler Boyd Associates CAN Finance
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e82bbe96147
          externalId: external-id-27
          name: Tyler Boyd Associates BRA
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e92bbe96147
          externalId: external-id-28
          name: Tyler Boyd Associates URU
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e41bbe96147
          externalId: external-id-29
          name: Tyler Boyd Associates ARG
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
        - id: 9e4fb91794574b98ae8a1e43bbe96147
          externalId: external-id-30
          name: Tyler Boyd Associates AUS
          description: Description of service agreement
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
      items:
        $ref: '#/components/schemas/ServiceAgreementItem'
    GetServiceAgreementsByCreatorOrLegalEntity:
      type: array
      example:
        - id: 951293e6521940e3ae0608f93ff0b215
          externalId: external-id-1
          name: Broker deal 1
          description: Agreement between MicroSphere and Apple
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
          validFromDate: 2017-03-31
          validFromTime: 08:00:00
          validUntilDate: 2019-03-31
          validUntilTime: 08:00:00
        - id: 9e4fb91794574b98ae8a1e42bbe96147
          externalId: external-id-2
          name: Broker deal 2
          description: Agreement between MicroSphere and HP
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName
          numberOfParticipants: 4
          validFromDate: 2018-03-31
          validFromTime: 08:00:00
          validUntilDate: 2019-03-31
          validUntilTime: 08:00:00
        - id: 9e4fb91794574b98ae8a1e42bbe96148
          externalId: external-id-3
          name: Broker deal 3
          description: Agreement between MicroSphere and Tyler Boyd Associates
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: true
          status: ENABLED
          creatorLegalEntityName: someName4
          numberOfParticipants: 1
          validFromDate: 2018-10-31
          validFromTime: 09:00:00
        - id: 9e4fb91794574b98ae8a1e42bbe96149
          externalId: external-id-4
          name: Broker deal 4
          description: Agreement between MicroSphere and Tyler Boyd Associates UAE
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
          validUntilDate: 2020-06-29
          validUntilTime: 20:00:00
        - id: 9e4fb91794574b98ae8a1e42bbe96150
          externalId: external-id-5
          name: Broker deal 5
          description: Agreement between MicroSphere and Tyler Boyd Associates US
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName
          numberOfParticipants: 4
          validFromDate: 2015-01-01
          validFromTime: 08:00:00
          validUntilDate: 2019-12-31
          validUntilTime: 08:00:00
        - id: 9e4fb91794574b98ae8a1e42bbe96151
          externalId: external-id-6
          name: Broker deal 6
          description: Agreement between MicroSphere and Tyler Boyd Associates US Salary
            Services
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: true
          status: ENABLED
          creatorLegalEntityName: someName4
          numberOfParticipants: 1
        - id: 9e4fb91794574b98ae8a1e42bbe96152
          externalId: external-id-7
          name: Broker deal 7
          description: Agreement between MicroSphere and Tyler Boyd Associates US Training
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
        - id: 9e4fb91794574b98ae8a1e42bbe96153
          externalId: external-id-8
          name: Broker deal 8
          description: Agreement between MicroSphere and Tyler Boyd Associates UK
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName
          numberOfParticipants: 4
        - id: 9e4fb91794574b98ae8a1e42bbe96154
          externalId: external-id-9
          name: Broker deal 9
          description: Agreement between MicroSphere and Tyler Boyd Associates UK Sales
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: true
          status: ENABLED
          creatorLegalEntityName: someName4
          numberOfParticipants: 1
        - id: 9e4fb91794574b98ae8a1e42bbe96155
          externalId: external-id-10
          name: Broker deal 10
          description: Agreement between MicroSphere and Tyler Boyd Associates UK Marketing
          creatorLegalEntity: 0955e686-d31e-4216-b3dd-5d66161d536d
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
        - id: 9e4fb91794574b98ae8a1e42bbe96156
          externalId: external-id-11
          name: Broker deal 11
          description: Agreement between MicroSphere and Microsoft
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
          validFromDate: 2017-03-01
          validFromTime: 10:00:00
        - id: 9e4fb91794574b98ae8a1e42bbe96157
          externalId: external-id-12
          name: Broker deal 12
          description: Agreement between MicroSphere and Packard-Bell
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName
          numberOfParticipants: 4
        - id: 9e4fb91794574b98ae8a1e42bbe96158
          externalId: external-id-13
          name: Broker deal 13
          description: Agreement between MicroSphere and Packard-Bell US
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: true
          status: ENABLED
          creatorLegalEntityName: someName4
          numberOfParticipants: 1
        - id: 9e4fb91794574b98ae8a1e42bbe96159
          externalId: external-id-14
          name: Broker deal 14
          description: Agreement between MicroSphere and Packard-Bell UAE
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
        - id: 9e4fb91794574b98ae8a1e42bbe96160
          externalId: external-id-15
          name: Broker deal 15
          description: Agreement between MicroSphere and Packard-Bell US Foreign Exchange
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName
          numberOfParticipants: 4
          validFromDate: 2017-03-31
          validFromTime: 08:00:00
          validUntilDate: 2019-03-31
          validUntilTime: 08:00:00
        - id: 9e4fb91794574b98ae8a1e42bbe96161
          externalId: external-id-16
          name: Broker deal 16
          description: Agreement between MicroSphere and Packard-Bell US Salary Services
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: true
          status: ENABLED
          creatorLegalEntityName: someName4
          numberOfParticipants: 1
        - id: 9e4fb91794574b98ae8a1e42bbe96162
          externalId: external-id-17
          name: Broker deal 17
          description: Agreement between MicroSphere and Packard-Bell US Training
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
        - id: 9e4fb91794574b98ae8a1e42bbe96163
          externalId: external-id-18
          name: Broker deal 18
          description: Agreement between MicroSphere and Packard-Bell UK
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName
          numberOfParticipants: 4
        - id: 9e4fb91794574b98ae8a1e42bbe96164
          externalId: external-id-19
          name: Broker deal 19
          description: Agreement between MicroSphere and Packard-Bell UK Sales
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: true
          status: ENABLED
          creatorLegalEntityName: someName4
          numberOfParticipants: 1
        - id: 9e4fb91794574b98ae8a1e42bbe96165
          externalId: external-id-20
          name: Broker deal 20
          description: Agreement between MicroSphere and Packard-Bell UK Marketing
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
        - id: 9e4fb91794574b98ae8a1e42bbe96166
          externalId: external-id-21
          name: Broker deal 21
          description: Agreement between MicroSphere and Jenkins
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
        - id: 9e4fb91794574b98ae8a1e42bbe96167
          externalId: external-id-22
          name: Broker deal 22
          description: Agreement between MicroSphere and Blue Ocean
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName
          numberOfParticipants: 4
        - id: 9e4fb91794574b98ae8a1e42bbe96168
          externalId: external-id-23
          name: Broker deal 23
          description: Agreement between MicroSphere and Dell US
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: true
          status: ENABLED
          creatorLegalEntityName: someName4
          numberOfParticipants: 1
        - id: 9e4fb91794574b98ae8a1e42bbe96169
          externalId: external-id-24
          name: Broker deal 24
          description: Agreement between MicroSphere and Dell UAE
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
        - id: 9e4fb91794574b98ae8a1e42bbe96170
          externalId: external-id-25
          name: Broker deal 25
          description: Agreement between MicroSphere and Dell AUS
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName
          numberOfParticipants: 4
        - id: 9e4fb91794574b98ae8a1e42bbe96171
          externalId: external-id-26
          name: Broker deal 26
          description: Agreement between MicroSphere and Dell US Salary Services
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: true
          status: ENABLED
          creatorLegalEntityName: someName4
          numberOfParticipants: 1
        - id: 9e4fb91794574b98ae8a1e42bbe96172
          externalId: external-id-27
          name: Broker deal 27
          description: Agreement between MicroSphere and Dell US Training
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
        - id: 9e4fb91794574b98ae8a1e42bbe96173
          externalId: external-id-28
          name: Broker deal 28
          description: Agreement between MicroSphere and Dell UK
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName
          numberOfParticipants: 4
        - id: 9e4fb91794574b98ae8a1e42bbe96174
          externalId: external-id-29
          name: Broker deal 29
          description: Agreement between MicroSphere and Dell UK Sales
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: true
          status: ENABLED
          creatorLegalEntityName: someName4
          numberOfParticipants: 1
        - id: 9e4fb91794574b98ae8a1e42bbe96175
          externalId: external-id-30
          name: Broker deal 30
          description: Agreement between MicroSphere and Dell UK Marketing
          creatorLegalEntity: 9371efe0-e295-47f7-822f-934532646b98
          isMaster: false
          status: ENABLED
          creatorLegalEntityName: someName1
          numberOfParticipants: 3
      items:
        $ref: '#/components/schemas/PresentationServiceAgreement'
    GetUsers:
      type: array
      example:
        - id: 0955e686d31e4216b3dd5d66161d536d
          serviceAgreementId: 7555e686d31e8932b3dd5d66161d536d
          userId: 9885e686d31e4216b3dd5d66161d536d
          dataAccessGroupsByFunctionAccessGroup:
            - functionAccessGroupId: 0955e686d31e4216b3dd5d66161d536d
              dataAccessGroupIds:
                - 0955e686d31e4216b3dd5d66161d536d
      items:
        $ref: '#/components/schemas/UsersGetResponseBody'
    IdItem:
      required:
        - id
      type: object
      description: Object that defines an id attribute only.
      example:
        id: 0955e686d31e4216b3dd5d66161d536d
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
    LegalEntityAdmins:
      required:
        - admins
        - id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        admins:
          type: array
          items:
            $ref: '#/components/schemas/Uuid'
    ListOfFunctionGroupsWithDataGroups:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/PresentationFunctionDataGroup'
      example:
        items:
          - functionGroupId: 5643e686-d31e-4216-b3ff-5d66161d897d
            dataGroupIds:
              - id: a0c96e49-b457-4bc2-8c7b-d6cacc2ae2d5
              - id: 3a574e27-fd89-4233-b0ab-38dc232166ce
          - functionGroupId: 538cd923-de00-4f5a-a41e-65ac2a9ae001
            dataGroupIds: [ ]
    Participant:
      required:
        - id
        - sharingAccounts
        - sharingUsers
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        sharingUsers:
          type: boolean
          description: Boolean value if the Participant is sharing users
        sharingAccounts:
          type: boolean
          description: Boolean value if the participant is sharing accounts
        admins:
          type: array
          items:
            maxLength: 36
            minLength: 0
            type: string
    ParticipantIngest:
      required:
        - externalId
        - sharingAccounts
        - sharingUsers
      type: object
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        sharingUsers:
          type: boolean
          description: Boolean value if the Participant is sharing users
        sharingAccounts:
          type: boolean
          description: Boolean value if the participant is sharing accounts
        admins:
          type: array
          items:
            $ref: '#/components/schemas/ExternalId'
        users:
          type: array
          description: User external ids
          items:
            $ref: '#/components/schemas/ExternalId'
    PermissionsSummary:
      type: array
      example:
        - resource: Contacts
          function: Contacts
          permissions:
            view: true
            edit: true
        - resource: Payments
          function: US Domestic Wire
          permissions:
            create: true
            view: true
            approve: true
        - resource: Payments
          function: US Foreign Wire
          permissions:
            create: true
            view: true
            approve: true
        - resource: Payments
          function: SEPA CT
          permissions:
            create: true
            view: true
            approve: true
        - resource: Entitlements
          function: Manage Data Groups
          permissions:
            view: true
            edit: true
            create: true
            delete: true
        - resource: Entitlements
          function: Manage Function Groups
          permissions:
            view: true
            edit: true
            create: true
            delete: true
        - resource: Limits
          function: Manage Limits
          permissions:
            view: true
            edit: true
            create: true
            delete: true
        - resource: Actions
          function: Manage Action Recipes
          permissions:
            execute: true
            view: true
            edit: true
            create: true
            delete: true
        - resource: User
          function: Manage Users
          permissions:
            execute: true
            view: true
            edit: true
            create: true
            delete: true
        - resource: Service Agreement
          function: Assign Users
          permissions:
            execute: true
            view: true
            edit: true
            create: true
            delete: true
        - resource: Service Agreement
          function: Assign Permissions
          permissions:
            execute: true
            view: true
            edit: true
            create: true
            delete: true
            approve: true
        - resource: Service Agreement
          function: Manage Service Agreements
          permissions:
            execute: true
            view: true
            edit: true
            create: true
            delete: true
        - resource: Legal Entity
          function: Manage Legal Entities
          permissions:
            view: true
        - resource: Approvals
          function: Assign Approval Policies
          permissions:
            create: true
            delete: true
            edit: true
            view: true
      items:
        $ref: '#/components/schemas/UserPermissionsSummaryGetResponseBody'
    UserPermissionsSummaryGetResponseBody:
      required:
        - function
        - permissions
        - resource
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            resource:
              maxLength: 32
              minLength: 1
              type: string
              description: Resource name
            function:
              maxLength: 32
              minLength: 1
              type: string
              description: Business function name
            permissions:
              type: object
              additionalProperties:
                type: boolean
              description: Allowed user permissions
    PresentationAction:
      type: string
      description: Presentation action
      enum:
        - add
        - remove
      x-enum-varnames:
        - ADD
        - REMOVE
    PresentationApprovalAction:
      type: string
      enum:
        - CREATE
        - EDIT
        - DELETE
      x-enum-varnames:
        - CREATE
        - EDIT
        - DELETE
    PresentationApprovalCategory:
      type: string
      description: Category of approval
      enum:
        - Assign Permissions
        - Manage Data Groups
        - Manage Limits
        - Manage Shadow Limits
        - Unlock User
        - Manage Function Groups
      x-enum-varnames:
        - ASSIGN_PERMISSIONS
        - MANAGE_DATA_GROUPS
        - MANAGE_LIMITS
        - MANAGE_SHADOW_LIMITS
        - UNLOCK_USER
        - MANAGE_FUNCTION_GROUPS
    PresentationApprovalDetails:
      type: array
      description: Approvals list
      example:
        - creatorUserFullName: User 1
          creatorUserId: 5643e686d31e4216b3ff5d66161d1234
          createdAt: 2019-01-01T12:00:00Z
          action: EDIT
          category: Assign Permissions
          approvalId: 2df100c6-b12b-4102-8831-db417acf12b6
        - creatorUserFullName: User 2
          creatorUserId: 5643e686d31e4216b3ff5d66161d1234
          createdAt: 2019-01-01T12:00:00Z
          action: EDIT
          category: Manage Data Groups
          approvalId: 2df100c6-b12b-4102-8831-db417acf12b7
        - creatorUserFullName: User 3
          creatorUserId: 5643e686d31e4216b3ff5d66161d1234
          createdAt: 2019-01-01T12:00:00Z
          action: EDIT
          category: Unlock User
          approvalId: 2df100c6-b12b-4102-8831-db417acf12b8
        - creatorUserFullName: User 4
          creatorUserId: 5643e686d31e4216b3ff5d66161d1234
          createdAt: 2019-01-01T12:00:00Z
          action: EDIT
          category: Manage Limits
          approvalId: 2df100c6-b12b-4102-8831-db417acf12b9
        - creatorUserFullName: User 5
          creatorUserId: 5643e686d31e4216b3ff5d66161d1234
          createdAt: 2019-01-01T12:00:00Z
          action: EDIT
          category: Manage Shadow Limits
          approvalId: 2df100c6-b12b-4102-8831-db417acf12b1
        - creatorUserFullName: User 6
          creatorUserId: 5643e686d31e3567b3ff5d66161d1234
          createdAt: 2019-01-01T12:00:00Z
          action: EDIT
          category: Manage Function Groups
          approvalId: 2df100c6-b12b-4102-8831-db417acf12c4
      items:
        $ref: '#/components/schemas/PresentationApprovalItem'
    PresentationApprovalItem:
      type: object
      properties:
        creatorUserFullName:
          maxLength: 255
          minLength: 1
          type: string
          description: Full name of the user who created the approval.
        creatorUserId:
          $ref: '#/components/schemas/Uuid'
        createdAt:
          type: string
        action:
          $ref: '#/components/schemas/PresentationApprovalAction'
        category:
          $ref: '#/components/schemas/PresentationApprovalCategory'
        approvalId:
          $ref: '#/components/schemas/Uuid'
      description: Approval details
    PresentationApprovalLogItem:
      type: object
      properties:
        approverId:
          type: string
          description: This is the user id of the approver that approved the action.
        approverFullName:
          type: string
          description: This is the name of the user that approved the action.
        approvedAt:
          type: string
      description: Approver information.
    PresentationApprovalPermissions:
      required:
        - items
      type: object
      properties:
        approvalId:
          type: string
          description: Id of approval request.
        items:
          type: array
          items:
            $ref: '#/components/schemas/PresentationFunctionDataGroup'
      example:
        items:
          - functionGroupId: 98f8531d-9bf4-4f3f-a49b-7cf331d6eead
            dataGroupIds:
              - id: 138a7683-e9da-4ffa-a257-b78626790cd7
          - functionGroupId: 00779897-253c-4bbb-b0c7-3c47fd0b0b08
            dataGroupIds: [ ]
    PresentationApprovalStatus:
      type: object
      example:
        approvalStatus: PENDING
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            approvalStatus:
              $ref: '#/components/schemas/ApprovalStatus'
    PresentationAssignUserPermissions:
      required:
        - externalServiceAgreementId
        - externalUserId
        - functionGroupDataGroups
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            externalUserId:
              $ref: '#/components/schemas/ExternalId'
            externalServiceAgreementId:
              $ref: '#/components/schemas/ExternalId'
            functionGroupDataGroups:
              type: array
              description: Function/Data group pairs
              items:
                $ref: '#/components/schemas/PresentationFunctionGroupDataGroup'
    PresentationDataGroupApprovalItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          description: Name of data group
        description:
          type: string
          description: Description of data group
      description: Data Groups Id and Name.
    PresentationDataGroupDetails:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
            name:
              type: string
            description:
              type: string
            metadata:
              $ref: '#/components/schemas/Metadata'
    PresentationDataGroupItemPutRequestBody:
      required:
        - action
        - dataGroupIdentifier
        - type
      type: object
      properties:
        dataGroupIdentifier:
          $ref: '#/components/schemas/PresentationDataGroupIdentifier'
        action:
          $ref: '#/components/schemas/PresentationAction'
        type:
          maxLength: 36
          minLength: 1
          pattern: ^\S+$
          type: string
          description: Data group type
        dataItems:
          type: array
          items:
            $ref: '#/components/schemas/PresentationItemIdentifier'
      description: Data group items by identifier update put
    PresentationDataGroupUpdate:
      required:
        - dataGroupIdentifier
        - description
        - name
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            name:
              maxLength: 128
              minLength: 1
              type: string
            description:
              maxLength: 255
              minLength: 1
              pattern: ^(\S|\n)((.|\n)*(\S|\n))?$
              type: string
            type:
              $ref: '#/components/schemas/DataGroupType'
            dataGroupIdentifier:
              $ref: '#/components/schemas/PresentationDataGroupIdentifier'
            dataItems:
              type: array
              items:
                $ref: '#/components/schemas/PresentationItemIdentifier'
            metadata:
              $ref: '#/components/schemas/Metadata'
          description: Data group update put
          example:
            name: Current Accounts
            description: Contains all Current Accounts
            type: ARRANGEMENTS
            dataGroupIdentifier:
              idIdentifier: 540949a03a7846abb69e7c667bc73688
            dataItems:
              - internalIdIdentifier: 540949a03a7846abb69e7c667bc73688
              - internalIdIdentifier: 540949a03a7846abb69e7c667bc73688
    PresentationFunctionDataGroup:
      required:
        - dataGroupIds
        - functionGroupId
      type: object
      properties:
        functionGroupId:
          $ref: '#/components/schemas/Uuid'
        dataGroupIds:
          minLength: 0
          type: array
          items:
            $ref: '#/components/schemas/PresentationGenericObjectId'
    PresentationFunctionGroupDataGroup:
      required:
        - functionGroupIdentifier
      type: object
      properties:
        functionGroupIdentifier:
          $ref: '#/components/schemas/PresentationIdentifier'
        dataGroupIdentifiers:
          type: array
          description: Identifiers of the data groups that belong to the given function
            group
          items:
            $ref: '#/components/schemas/PresentationDataGroupIdentifier'
      description: Function/Data group pair
    PresentationFunctionGroupPutRequestBody:
      required:
        - functionGroup
        - identifier
      type: object
      properties:
        functionGroup:
          $ref: '#/components/schemas/Functiongroupupdate'
        identifier:
          $ref: '#/components/schemas/PresentationIdentifier'
      description: Function group update put
    PresentationFunctionGroupsDataGroupsExtendedPair:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          description: Name of function group
        description:
          type: string
          description: Description of function group
        type:
          type: string
          enum:
            - REGULAR
            - TEMPLATE
        newDataGroups:
          type: array
          items:
            $ref: '#/components/schemas/PresentationDataGroupApprovalItem'
        removedDataGroups:
          type: array
          items:
            $ref: '#/components/schemas/PresentationDataGroupApprovalItem'
        unmodifiedDataGroups:
          type: array
          items:
            $ref: '#/components/schemas/PresentationDataGroupApprovalItem'
      description: Function Groups and Data Groups Pairs.
    PresentationFunctionGroupsDataGroupsPair:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          description: Name of function group
        description:
          type: string
          description: Description of function group
        type:
          type: string
          enum:
            - REGULAR
            - TEMPLATE
        dataGroups:
          type: array
          items:
            $ref: '#/components/schemas/PresentationDataGroupApprovalItem'
      description: Function Groups and Data Groups Pairs.
    PresentationGenericObjectId:
      required:
        - id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
    PresentationId:
      type: object
      description: Object that defines an id attribute only.
      example:
        id: 1234
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              type: number
              description: Internal id of the entity.
    PresentationIdentifier:
      type: object
      properties:
        idIdentifier:
          $ref: '#/components/schemas/IdIdentifier'
        nameIdentifier:
          $ref: '#/components/schemas/NameIdentifier'
    PresentationDataGroupIdentifier:
      type: object
      properties:
        idIdentifier:
          $ref: '#/components/schemas/IdIdentifier'
        nameIdentifier:
          $ref: '#/components/schemas/DataGroupNameIdentifier'
    IdIdentifier:
      maxLength: 36
      minLength: 1
      pattern: ^\S(.*(\S))?$
      type: string
      description: Entity ID.
    NameIdentifier:
      required:
        - externalServiceAgreementId
        - name
      type: object
      properties:
        externalServiceAgreementId:
          maxLength: 64
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Id of Service Agreement on which entity belongs.
        name:
          maxLength: 128
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Entity name.
    DataGroupNameIdentifier:
      allOf:
        - $ref: '#/components/schemas/NameIdentifier'
        - type: object
          properties:
            dataGroupType:
              $ref: '#/components/schemas/DataGroupType'
    PresentationIngestFunctionGroup:
      required:
        - description
        - externalServiceAgreementId
        - name
      type: object
      example:
        name: Function group
        description: Some description for Function group
        externalServiceAgreementId: External
        permissions:
          - functionId: "10001"
            privileges:
              - view
              - edit
        validFromDate: 2017-03-31
        validFromTime: 07:48:23
        validUntilDate: 2020-03-31
        validUntilTime: 07:48:23
        apsName: My APS
        type: TEMPLATE
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            name:
              maxLength: 128
              minLength: 1
              pattern: ^\S(.*(\S))?$
              type: string
              description: Function group name
            description:
              maxLength: 255
              minLength: 1
              pattern: ^\S(.*(\S))?$
              type: string
              description: Function group description
            externalServiceAgreementId:
              $ref: '#/components/schemas/ExternalId'
            permissions:
              type: array
              items:
                $ref: '#/components/schemas/PresentationPermission'
            validFromDate:
              type: string
              description: Start date of the function group.
            validFromTime:
              type: string
              description: Start time of the function group.
            validUntilDate:
              type: string
              description: End date of the function group.
            validUntilTime:
              type: string
              description: End time of the function group.
            apsId:
              type: number
              description: Assignable Permission Set Id
            apsName:
              maxLength: 128
              type: string
              description: Assignable Permission Set name
            type:
              type: string
              default: REGULAR
              enum:
                - REGULAR
                - TEMPLATE
            metadata:
              $ref: '#/components/schemas/Metadata'
    PresentationIngestServiceAgreementParticipantsPutResponseBody:
      type: array
      example:
        - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
          status: "200"
          errors: [ ]
          action: add
          externalServiceAgreementId: External ID of SA-1
        - resourceId: efc1b037dbad49df9f62907ba7af2497
          status: "404"
          action: remove
          externalServiceAgreementId: External ID of SA-2
          errors:
            - Resource does not exist
      items:
        $ref: '#/components/schemas/BatchResponseItemExtended'
    PresentationItemIdentifier:
      type: object
      properties:
        internalIdIdentifier:
          $ref: '#/components/schemas/DataItemId'
        externalIdIdentifier:
          $ref: '#/components/schemas/ExternalId'
    LegalEntityIdentifier:
      type: object
      properties:
        externalIdIdentifier:
          minLength: 1
          type: string
          description: Legal Entity External Identifier
        shares:
          type: string
          description: "Optionally specifies for the legal entity what it is sharing\
            \ in the service agreements to be returned. If not specified, then service\
            \ agreements and data groups are returned where this legal entity is sharing\
            \ accounts."
          default: accounts
          enum:
            - accounts
            - users
            - usersAndAccounts
    PresentationParticipantBatchUpdate:
      type: object
      properties:
        participants:
          maxItems: 200
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/PresentationParticipantPutBody'
      example:
        participants:
          - action: add
            externalServiceAgreementId: external-service-agreement-id-001
            externalParticipantId: legal-entity-external-id-001
            sharingUsers: true
            sharingAccounts: false
          - action: remove
            externalServiceAgreementId: external-service-agreement-id-002
            externalParticipantId: legal-entity-external-id-002
    PresentationParticipantPutBody:
      required:
        - action
        - externalParticipantId
        - externalServiceAgreementId
      type: object
      properties:
        action:
          $ref: '#/components/schemas/PresentationAction'
        externalServiceAgreementId:
          $ref: '#/components/schemas/ExternalId'
        externalParticipantId:
          $ref: '#/components/schemas/ExternalId'
        sharingUsers:
          type: boolean
          description: Boolean value if the Participant is sharing users
        sharingAccounts:
          type: boolean
          description: Boolean value if the Participant is sharing accounts
      description: Add Participants in Service Agreement
    PresentationPermission:
      required:
        - functionId
        - privileges
      type: object
      properties:
        functionId:
          maxLength: 36
          minLength: 1
          type: string
        privileges:
          type: array
          items:
            maxLength: 16
            minLength: 1
            type: string
    PresentationPermissionFunctionGroupUpdate:
      required:
        - functionName
        - privileges
      type: object
      properties:
        functionName:
          maxLength: 36
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
        privileges:
          type: array
          items:
            maxLength: 16
            minLength: 1
            type: string
    PresentationPermissionItem:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            functionId:
              type: string
              description: Business function id.
            functionName:
              type: string
              description: Function name.
            resourceName:
              type: string
              description: Resource name.
            privileges:
              type: array
              description: Assignable permissions.
              items:
                maxLength: 16
                minLength: 1
                type: string
                description: privilege
    PresentationPermissionsApprovalDetailsItem:
      type: object
      properties:
        approvalId:
          maxLength: 36
          minLength: 1
          type: string
          description: ID of the approval.
        creatorUserFullName:
          maxLength: 255
          minLength: 1
          type: string
          description: "Full name of the user who created the approval. Deprecated\
            \ since 2.18.0, planned for removal in 2.19.0. This property is no longer\
            \ used and will be ignored."
        creatorUserId:
          $ref: '#/components/schemas/Uuid'
        createdAt:
          type: string
          description: "Deprecated since 2.18.0, planned for removal in 2.19.0. This\
            \ property is no longer used and will be ignored."
        userId:
          $ref: '#/components/schemas/Uuid'
        userFullName:
          maxLength: 255
          minLength: 1
          type: string
          description: User full name to whom the permissions are assigned
        serviceAgreementId:
          $ref: '#/components/schemas/Uuid'
        serviceAgreementName:
          type: string
          description: Service Agreement name.
        serviceAgreementDescription:
          maxLength: 255
          minLength: 1
          type: string
          description: Service Agreement descriptioin.
        action:
          $ref: '#/components/schemas/PresentationApprovalAction'
        category:
          $ref: '#/components/schemas/PresentationApprovalCategory'
        newFunctionGroups:
          type: array
          items:
            $ref: '#/components/schemas/PresentationFunctionGroupsDataGroupsPair'
        removedFunctionGroups:
          type: array
          items:
            $ref: '#/components/schemas/PresentationFunctionGroupsDataGroupsPair'
        modifiedFunctionGroups:
          type: array
          items:
            $ref: '#/components/schemas/PresentationFunctionGroupsDataGroupsExtendedPair'
        unmodifiedFunctionGroups:
          type: array
          items:
            $ref: '#/components/schemas/PresentationFunctionGroupsDataGroupsPair'
        requiredApproves:
          type: integer
          description: Number of required approves for the action to be successful.
          format: int32
        completedApproves:
          type: integer
          description: Number of approves that the action has.
          format: int32
        approvalLog:
          type: array
          description: "Deprecated since 2.18.0, planned for removal in 2.19.0. This\
            \ property is no longer used and will be ignored."
          items:
            $ref: '#/components/schemas/PresentationApprovalLogItem'
      description: Approval details
      example:
        approvalId: 606d4532-f8d9-4a5f-36kl-887baf88fa24
        creatorUserFullName: John Snow
        creatorUserId: 69ef5b3c-3997-4ee9-9f11-cb14447cf572
        createdAt: 2018-09-28T16:41:41.090Z
        userId: 606d4532-f8d9-4a5f-840a-887baf88fa24
        userFullName: Jack Sparrow
        serviceAgreementId: 606d4532-f8d9-4a5f-840a-887baf88fa24
        serviceAgreementName: MicroSphere SA
        serviceAgreementDescription: Detailed desscription of the SA.
        action: EDIT
        category: Assign Permissions
        newFunctionGroups:
          - id: c18dda63-27fa-4e4f-8882-24b24b0d46df
            name: FGName
            type: REGULAR
            description: Function Group Description
            dataGroups:
              - id: c18dda63-27fa-4e4f-8882-24b24b0d46df
                name: DGName
                description: Function Group Description
        removedFunctionGroups:
          - id: 0955e686-d31e-4216-b3dd-5d66161d536d
            name: FGName
            type: TEMPLATE
            description: Function Group Description
            dataGroups:
              - id: d9b299b0-ca28-4683-a3c1-9a339abfb5e4
                name: DGName
                description: Data Group Description
        modifiedFunctionGroups:
          - id: d9b299b0-ca28-4683-a3c1-9a339abfb5e4
            name: FGName
            type: TEMPLATE
            description: Function Group Description
            newDataGroups:
              - id: 5690bd25-b9db-493a-9659-3d5e505c7358
                name: DGName
                description: Data Group Description
            removedDataGroups:
              - id: 5f5c3714-289e-4f0c-bdb0-0b5a749f8beb
                name: DGName
                description: Data Group Description
            unmodifiedDataGroups:
              - id: 10c387f2-4348-483e-ba98-f9b73926df4b
                name: DGName
                description: Data Group Description
        unmodifiedFunctionGroups:
          - id: 08cb2ed4-2691-4a28-8219-37378917e58d
            name: FGName
            type: REGULAR
            description: Function Group Description
            dataGroups:
              - id: 619f3d39-9647-46c7-ac70-6218382ebc4d
                name: DGName
                description: Data Group Description
        requiredApproves: 3
        completedApproves: 1
        approvalLog:
          - approverId: 619f3d39-9647-46c7-ac70-6218382ebc4d
            approverFullName: Donald Trump
            approvedAt: 2018-10-15T16:41:41.090Z
    PresentationPermissionSet:
      required:
        - description
        - name
      type: object
      properties:
        name:
          maxLength: 128
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Assignable permission set name
        description:
          maxLength: 255
          minLength: 1
          pattern: ^(\S|\n)((.|\n)*(\S|\n))?$
          type: string
          description: Assignable permission set description
        permissions:
          type: array
          description: List of paired business function id and privileges
          items:
            $ref: '#/components/schemas/PresentationPermissionSetItem'
      description: Assignable permission set
      example:
        name: My first APS
        description: Some description for My first assignable permission set
        permissions:
          - functionId: "1"
            privileges:
              - view
              - create
              - delete
          - functionId: "2"
            privileges:
              - view
              - create
              - delete
    PresentationPermissionSetItem:
      required:
        - functionId
        - privileges
      type: object
      properties:
        functionId:
          maxLength: 36
          minLength: 1
          type: string
          description: Business function id
        privileges:
          type: array
          description: List of privileges
          items:
            maxLength: 16
            minLength: 1
            type: string
    PresentationPermissionSetPut:
      required:
        - externalServiceAgreementId
      type: object
      properties:
        externalServiceAgreementId:
          type: string
          description: External service agreement id.
        regularUserAps:
          $ref: '#/components/schemas/PresentationUserApsIdentifiers'
        adminUserAps:
          $ref: '#/components/schemas/PresentationUserApsIdentifiers'
      example:
        externalServiceAgreementId: sa-ex-01
        regularUserAps:
          nameIdentifiers:
            - My APS
            - Other APS
        adminUserAps:
          idIdentifiers:
            - 45
            - 12
    PresentationPermissionSetResponseItem:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              type: number
              description: Internal id of the assignable permission set.
            name:
              type: string
              description: Name of the assignable permission set.
            description:
              type: string
              description: Description of the assignable permission set.
            type:
              type: string
              description: Type of the assignable permission set.
            permissions:
              type: array
              description: Assignable permissions.
              items:
                $ref: '#/components/schemas/PresentationPermissionItem'
    PresentationPermissionSetsGet:
      type: array
      example:
        - id: 7
          name: My first assignable permission set
          description: Some description for My first assignable permission set.
          type: REGULAR_USER_DEFAULT
          permissions:
            - functionId: "1"
              functionName: SEPA CT
              resourceName: Payments
              privileges:
                - view
                - create
                - delete
            - functionId: "2"
              functionName: Bill Pay
              resourceName: Payments
              privileges:
                - view
                - edit
                - delete
      items:
        $ref: '#/components/schemas/PresentationPermissionSetResponseItem'
    PresentationSearchDataGroupsRequest:
      type: object
      properties:
        serviceAgreementIdentifier:
          $ref: '#/components/schemas/PresentationServiceAgreementIdentifier'
        dataItemIdentifier:
          $ref: '#/components/schemas/PresentationItemIdentifier'
        legalEntityIdentifier:
          $ref: '#/components/schemas/LegalEntityIdentifier'
      example:
        serviceAgreementIdentifier:
          idIdentifier: 01d70d09997b41cb83ea0e1db84626b3
        dataItemIdentifier:
          externalIdIdentifier: AA001
        legalEntityIdentifier:
          externalIdIdentifier: ExternalId
          shares: accounts
    PresentationServiceAgreement:
      required:
        - creatorLegalEntity
        - creatorLegalEntityName
        - description
        - id
        - isMaster
        - name
        - numberOfParticipants
        - status
      properties:
        creatorLegalEntity:
          $ref: '#/components/schemas/Uuid'
        status:
          $ref: '#/components/schemas/Status'
        numberOfParticipants:
          type: number
          description: number of legal entities participating in the service agreement
        creatorLegalEntityName:
          type: string
          description: Service agreement creator legal entity name
        id:
          $ref: '#/components/schemas/Uuid'
        externalId:
          $ref: '#/components/schemas/ExternalId'
        name:
          maxLength: 128
          minLength: 1
          type: string
          description: Service agreement name to display
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Brief text to describe service agreement
        isMaster:
          type: boolean
          description: "Defines default service agreement when none selected, only\
            \ one can hold true value"
        validFromDate:
          type: string
          description: Start date of the service agreement. (date-only from RFC3339
            - yyyy-MM-dd)
        validFromTime:
          type: string
          description: Start time of the service agreement. (time-only from RFC3339
            - HH:mm:ss)
        validUntilDate:
          type: string
          description: End date of the service agreement. (date-only from RFC3339
            - yyyy-MM-dd)
        validUntilTime:
          type: string
          description: End time of the service agreement. (time-only from RFC3339
            - HH:mm:ss)
    PresentationServiceAgreementAdminsBatchUpdatePutResponseBody:
      type: array
      example:
        - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
          status: "200"
          errors: [ ]
          action: add
          externalServiceAgreementId: External ID of SA-1
        - resourceId: efc1b037dbad49df9f62907ba7af2497
          status: "404"
          action: remove
          externalServiceAgreementId: External ID of SA-2
          errors:
            - Resource does not exist
      items:
        $ref: '#/components/schemas/BatchResponseItemExtended'
    PresentationServiceAgreementIdentifier:
      type: object
      properties:
        idIdentifier:
          maxLength: 36
          minLength: 1
          pattern: "^[0-9a-f]{32}$|^[0-9a-f-]{36}$"
          type: string
          description: Entity ID.
        nameIdentifier:
          maxLength: 128
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Entity name.
        externalIdIdentifier:
          maxLength: 64
          minLength: 1
          pattern: "^[^\\r\\n]{1,64}$"
          type: string
          description: External service agreement identifier.
    PresentationServiceAgreementIds:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          description: Service agreement name.
        externalId:
          $ref: '#/components/schemas/ExternalId'
    PresentationServiceAgreementUserPair:
      required:
        - externalServiceAgreementId
        - externalUserId
      type: object
      properties:
        externalUserId:
          $ref: '#/components/schemas/ExternalId'
        externalServiceAgreementId:
          $ref: '#/components/schemas/ExternalId'
    PresentationServiceAgreementUsersBatchUpdate:
      required:
        - action
      type: object
      properties:
        action:
          $ref: '#/components/schemas/PresentationAction'
        users:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/PresentationServiceAgreementUserPair'
      description: Payload for batch adding or removing admins/users to service agreement
      example:
        action: add
        users:
          - externalUserId: user-01
            externalServiceAgreementId: ex-sa-01
          - externalUserId: user-02
            externalServiceAgreementId: ex-sa-01
          - externalUserId: user-03
            externalServiceAgreementId: ex-sa-02
    PresentationServiceAgreementUsersBatchUpdatePutResponseBody:
      type: array
      example:
        - resourceId: 8f4dbe1092054315a7300ab7c9a585ee
          status: "200"
          errors: [ ]
          action: add
          externalServiceAgreementId: External ID of SA-1
        - resourceId: efc1b037dbad49df9f62907ba7af2497
          status: "404"
          action: remove
          externalServiceAgreementId: External ID of SA-2
          errors:
            - Resource does not exist
      items:
        $ref: '#/components/schemas/BatchResponseItemExtended'
    PresentationServiceAgreementWithDataGroups:
      type: array
      example:
        - serviceAgreement:
            id: 01d70d09997b41cb83ea0e1db84626b3
            name: Service agreement 1
            externalId: SA1
          dataGroups:
            - id: 01d70d09997b41cb83eb0e1db84626b3
              name: Arrangements group 1
              description: Description of Arrangements group 1
            - id: 01d70d09997b42cb83eb0e1db84626b3
              name: Arrangements group 2
              description: Description of Arrangements group 2
        - serviceAgreement:
            id: 01d70d09998b41cb83ea0e1db84626b3
            name: Service agreement 2
            externalId: SA2
          dataGroups:
            - id: 01d70d09997b41cb63eb0e1db84626b3
              name: Arrangements group 1
              description: Description of Arrangements group 1 for SA2
      items:
        $ref: '#/components/schemas/PresentationServiceAgreementWithDataGroupsItem'
    PresentationServiceAgreementWithDataGroupsItem:
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            serviceAgreement:
              $ref: '#/components/schemas/PresentationServiceAgreementIds'
            dataGroups:
              type: array
              description: List of data groups
              items:
                $ref: '#/components/schemas/PresentationDataGroupDetails'
    PresentationUserApsIdentifiers:
      type: object
      properties:
        nameIdentifiers:
          type: array
          items:
            type: string
        idIdentifiers:
          type: array
          items:
            type: number
    PrivilegesGetResponseBody:
      required:
        - privilege
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            privilege:
              maxLength: 16
              minLength: 1
              type: string
    ServiceAgreementBatchDelete:
      type: object
      properties:
        serviceAgreementIdentifiers:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/PresentationServiceAgreementIdentifier'
        accessToken:
          $ref: '#/components/schemas/AccessToken'
      example:
        serviceAgreementIdentifiers:
          - idIdentifier: 0955e686-d31e-4216-b3dd-5d66161d536d
          - nameIdentifier: SA
          - externalIdIdentifier: extSA
        accessToken: 540949a0-3a78-46ab-b69e-7c667bc73688
    ServiceAgreementItemQuery:
      required:
        - description
        - id
        - name
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            creatorLegalEntity:
              $ref: '#/components/schemas/Uuid'
            status:
              $ref: '#/components/schemas/Status'
            id:
              $ref: '#/components/schemas/Uuid'
            externalId:
              $ref: '#/components/schemas/ExternalId'
            name:
              minLength: 1
              type: string
              description: Service agreement name
            description:
              minLength: 1
              type: string
              description: Service agreement description
            isMaster:
              type: boolean
              description: Is master service agreement
            validFrom:
              type: string
              description: Start date and time of the service agreement.
              format: date-time
            validUntil:
              type: string
              description: End date and time of the service agreement.
              format: date-time
          description: Service agreement item
          example:
            id: 05de4e81976a43f5883b606eddca7dd7
            name: Company B SA
            description: Service Agreement description
            creatorLegalEntity: 27184aa9c1264e869661c1d97dd9ff54
            isMaster: true
            status: ENABLED
    ServiceAgreementItem:
      required:
        - creatorLegalEntity
        - description
        - id
        - isMaster
        - name
        - status
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            creatorLegalEntity:
              $ref: '#/components/schemas/Uuid'
            status:
              $ref: '#/components/schemas/Status'
            id:
              $ref: '#/components/schemas/Uuid'
            externalId:
              $ref: '#/components/schemas/ExternalId'
            name:
              maxLength: 128
              minLength: 1
              type: string
              description: Service agreement name to display
            description:
              maxLength: 255
              minLength: 1
              type: string
              description: Brief text to describe service agreement
            isMaster:
              type: boolean
              description: "Defines default service agreement when none selected, only\
              \ one can hold true value"
            validFromDate:
              type: string
              description: Start date of the service agreement. (date-only from RFC3339
                - yyyy-MM-dd)
            validFromTime:
              type: string
              description: Start time of the service agreement. (time-only from RFC3339
                - HH:mm:ss)
            validUntilDate:
              type: string
              description: End date of the service agreement. (date-only from RFC3339
                - yyyy-MM-dd)
            validUntilTime:
              type: string
              description: End time of the service agreement. (time-only from RFC3339
                - HH:mm:ss)
          example:
            id: a1198a20-5a40-4eb7-b47f-a553db920429
            externalId: external-id-1
            name: Broker deal 1
            description: Agreement between MicroSphere and Apple
            creatorLegalEntity: 6e83bf0d-0d77-4320-b854-4a704e1d50c3
            isMaster: true
            status: ENABLED
            validFromDate: 2017-03-31
            validFromTime: 08:30:00
            validUntilDate: 2019-03-31
            validUntilTime: 17:30:00
    Serviceagreementpartialitem:
      required:
        - description
        - id
        - isMaster
        - name
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        externalId:
          $ref: '#/components/schemas/ExternalId'
        name:
          maxLength: 128
          minLength: 1
          type: string
          description: Service agreement name to display
        description:
          maxLength: 255
          minLength: 1
          type: string
          description: Brief text to describe service agreement
        isMaster:
          type: boolean
          description: "Defines default service agreement when none selected, only\
            \ one can hold true value"
        validFromDate:
          type: string
          description: Start date of the service agreement. (date-only from RFC3339
            - yyyy-MM-dd)
        validFromTime:
          type: string
          description: Start time of the service agreement. (time-only from RFC3339
            - HH:mm:ss)
        validUntilDate:
          type: string
          description: End date of the service agreement. (date-only from RFC3339
            - yyyy-MM-dd)
        validUntilTime:
          type: string
          description: End time of the service agreement. (time-only from RFC3339
            - HH:mm:ss)
    ServiceAgreementParticipants:
      type: array
      example:
        - id: a1198a20-5a40-4eb7-b47f-a553db958963
          externalId: KPMG
          name: KPMG
          sharingUsers: true
          sharingAccounts: false
        - id: a1198a20-5a40-4eb7-b47f-a553db920429
          externalId: MicroSphere
          name: MicroSphere
          sharingUsers: false
          sharingAccounts: true
      items:
        $ref: '#/components/schemas/ServiceAgreementParticipantsGetResponseBody'
    ServiceAgreementParticipantsGetResponseBody:
      required:
        - externalId
        - id
        - name
        - sharingAccounts
        - sharingUsers
      type: object
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
            externalId:
              $ref: '#/components/schemas/ExternalId'
            name:
              maxLength: 128
              minLength: 1
              type: string
              description: Name of the Legal Entity
            sharingUsers:
              type: boolean
              description: Defines if the Legal Entity shares Users in the Service Agreement
            sharingAccounts:
              type: boolean
              description: Defines if the Legal Entity shares Accounts in the Service
                Agreement
    ServiceAgreementPost:
      required:
        - description
        - name
        - participants
      type: object
      properties:
        name:
          maxLength: 128
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Service Agreement name
        description:
          maxLength: 255
          minLength: 1
          pattern: ^(\S|\n)((.|\n)*(\S|\n))?$
          type: string
          description: Service Agreement description
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        validFromDate:
          type: string
          description: Start date of the service agreement.
        validFromTime:
          type: string
          description: Start time of the service agreement.
        validUntilDate:
          type: string
          description: End date of the service agreement.
        validUntilTime:
          type: string
          description: End time of the service agreement.
        status:
          $ref: '#/components/schemas/CreateStatus'
      example:
        name: Broker deal
        description: Agreement between MicroSphere and Apple
        participants:
          - id: 0955e686d31e4216b3dd5d66161d536d
            sharingUsers: true
            sharingAccounts: false
          - id: 0955e686d31e4216b3dd5d66161d5387
            sharingUsers: true
            sharingAccounts: true
        validFromDate: 2017-03-31
        validFromTime: 07:48:23
        status: ENABLED
    ServiceAgreementPut:
      type: object
      example:
        name: Broker deal 1
        description: Agreement between MicroSphere and Apple
        externalId: SA-001
        validFromDate: 2017-03-31
        validFromTime: 07:48:23
        validUntilDate: 2020-03-31
        validUntilTime: 07:48:23
        status: ENABLED
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            name:
              maxLength: 128
              minLength: 1
              pattern: ^\S(.*(\S))?$
              type: string
              description: Service Agreement name
            description:
              maxLength: 255
              minLength: 1
              pattern: ^(\S|\n)((.|\n)*(\S|\n))?$
              type: string
              description: Service Agreement description
            externalId:
              $ref: '#/components/schemas/ExternalId'
            validFromDate:
              type: string
              description: Start date of the service agreement.
            validFromTime:
              type: string
              description: Start time of the service agreement.
            validUntilDate:
              type: string
              description: End date of the service agreement.
            validUntilTime:
              type: string
              description: End time of the service agreement.
            status:
              $ref: '#/components/schemas/Status'
    ServiceAgreementSave:
      required:
        - description
        - name
        - participants
        - status
      type: object
      properties:
        externalId:
          $ref: '#/components/schemas/ExternalId'
        name:
          maxLength: 128
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Service Agreement name
        description:
          maxLength: 255
          minLength: 1
          pattern: ^(\S|\n)((.|\n)*(\S|\n))?$
          type: string
          description: Service Agreement description
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        validFromDate:
          type: string
          description: Start date of the service agreement.
        validFromTime:
          type: string
          description: Start time of the service agreement.
        validUntilDate:
          type: string
          description: End date of the service agreement.
        validUntilTime:
          type: string
          description: End time of the service agreement.
        status:
          $ref: '#/components/schemas/Status'
        isMaster:
          type: boolean
          description: Boolean value which defines whether the service agreement is
            master or not.
      example:
        externalId: 0955e686d31e4216b4dd5d66161d536d
        name: Broker deal
        description: Agreement between MicroSphere and Apple
        participants:
          - id: 0955e686d31e4216b3dd5d66161d536d
            sharingUsers: true
            sharingAccounts: false
            admins:
              - 0955e686d31e4216b3dd5d76161d536d
              - 0955a686d31e4216b3dd5d66161d536d
          - id: 0955e686d31e4216b3dd5d66161d5387
            sharingUsers: true
            sharingAccounts: true
            admins:
              - 0955e686d31e4216b3dd5d76161a536d
        validFromDate: 2017-03-31
        validFromTime: 07:48:23
        validUntilDate: 2020-03-31
        validUntilTime: 07:48:23
        isMaster: false
        status: ENABLED
    ServiceAgreementUsersQuery:
      required:
        - userIds
      type: object
      example:
        userIds:
          - 3bc743d346224eb2ba8d76e8ff302081
          - c6adcd6fad9f440797f3436ea4a83b63
          - 414c16a2fbdc46c398bd6102da17f421
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            userIds:
              type: array
              items:
                $ref: '#/components/schemas/Uuid'
    ServiceAgreementUsers:
      type: array
      example:
        - id: 01d70d09997b41cb83ea0e1db84626b3
          externalId: U0000011
          legalEntityId: a1198a20-5a40-4eb7-b47f-a553db958963
          fullName: David
          legalEntityName: LE-1
        - id: bbf6a23536fa49029abf9c03f97a82fa
          externalId: U0000012
          legalEntityId: a1198a20-5a40-4eb7-b47f-a553db958963
          fullName: Paul
          legalEntityName: LE-1
        - id: bc4ce9091eb04754a5a9b9422099f0fa
          externalId: U0000013
          legalEntityId: a1198a20-5a40-4eb7-b47f-a553db920429
          fullName: Wayne
          legalEntityName: LE-2
      items:
        $ref: '#/components/schemas/ServiceAgreementUsersGetResponseBody'
    ServiceAgreementUsersGetResponseBody:
      required:
        - externalId
        - fullName
        - id
        - legalEntityId
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        externalId:
          $ref: '#/components/schemas/ExternalId'
        legalEntityId:
          $ref: '#/components/schemas/Uuid'
        fullName:
          maxLength: 128
          minLength: 1
          type: string
        legalEntityName:
          maxLength: 128
          minLength: 1
          type: string
    ServicesAgreementIngest:
      required:
        - description
        - name
        - participantsToIngest
      type: object
      example:
        name: Broker deal
        description: Agreement between MicroSphere and Apple
        participantsToIngest:
          - externalId: 23cb368e-17b0-410f-bc59-3460e5fe2b11
            sharingUsers: true
            sharingAccounts: false
            admins:
              - e099ea05-edb9-4174-94b5-6fa875ad826c
              - a5c19299-330c-4511-b78e-d3ed1b22d000
            users:
              - e099ea05-edb9-4174-94b5-6fa875ad156c
              - a5c19389-330c-4511-b78e-d3ed1b22d000
          - externalId: ba827f15-2aec-48d0-bb94-ac5b43704b3e
            sharingUsers: true
            sharingAccounts: false
            admins:
              - 1ad555f3-e4db-48de-8e29-6296d182bc09
              - fd4bfaef-188c-4f6f-ab5a-c9b9074bd5a0
            users:
              - a100ea05-edb9-4174-94b5-6fa875ad156c
              - b6b19389-330c-4511-b78e-d3ed1b22d000
        validFromDate: 2017-03-31
        validFromTime: 07:48:23
        status: ENABLED
        isMaster: true
        regularUserAps:
          nameIdentifiers:
            - My APS
            - Other APS
        adminUserAps:
          idIdentifiers:
            - 45
            - 12
        creatorLegalEntity: 6e83bf0d-0d77-4320-b854-4a704e1d50c3
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            name:
              maxLength: 128
              minLength: 1
              pattern: ^\S(.*(\S))?$
              type: string
              description: The service agreement name
            externalId:
              $ref: '#/components/schemas/ExternalId'
            description:
              maxLength: 255
              minLength: 1
              pattern: ^(\S|\n)((.|\n)*(\S|\n))?$
              type: string
              description: Description
            participantsToIngest:
              type: array
              description: Participants of the service agreement
              items:
                $ref: '#/components/schemas/ParticipantIngest'
            validFromDate:
              type: string
              description: Start date of the service agreement.
            validFromTime:
              type: string
              description: Start time of the service agreement.
            validUntilDate:
              type: string
              description: End date of the service agreement.
            validUntilTime:
              type: string
              description: End time of the service agreement.
            status:
              $ref: '#/components/schemas/CreateStatus'
            isMaster:
              type: boolean
              description: Master flag
            regularUserAps:
              $ref: '#/components/schemas/PresentationUserApsIdentifiers'
            adminUserAps:
              $ref: '#/components/schemas/PresentationUserApsIdentifiers'
            creatorLegalEntity:
              $ref: '#/components/schemas/Uuid'
    Status:
      type: string
      description: Status of the entity
      enum:
        - ENABLED
        - DISABLED
    UnexposedUsers:
      type: array
      example:
        - id: 01d70d09997b41cb83ea0e1db84626b3
          externalId: U0000011
          fullName: David
          legalEntityId: f63f3fc550794eed84bf848dbbba9bbd
          legalEntityName: LE-1
        - id: bbf6a23536fa49029abf9c03f97a82fa
          externalId: U0000012
          fullName: Paul
          legalEntityId: f63f3fc550794eed84bf848dbbba9bbd
          legalEntityName: LE-1
        - id: bc4ce9091eb04754a5a9b9422099f0fa
          externalId: U0000013
          fullName: Wayne
          legalEntityId: 951293e6521940e3ae0608f93ff0b215
          legalEntityName: LE-2
      items:
        $ref: '#/components/schemas/UnexposedUsersGetResponseBody'
    UnexposedUsersGetResponseBody:
      required:
        - externalId
        - fullName
        - id
        - legalEntityId
        - legalEntityName
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        externalId:
          $ref: '#/components/schemas/ExternalId'
        fullName:
          maxLength: 128
          minLength: 1
          type: string
        legalEntityId:
          $ref: '#/components/schemas/Uuid'
        legalEntityName:
          maxLength: 128
          minLength: 1
          type: string
    UpdateAdmins:
      type: object
      properties:
        participants:
          type: array
          items:
            $ref: '#/components/schemas/LegalEntityAdmins'
      example:
        participants:
          - id: 654f9921077740ac8eccee288f51fcf6
            admins:
              - f75b4b8208b24a009f8b6866352599e4
              - 75ddc9a8de444f2eb1165c67aca312c7
          - id: eac87f91bfcc4f5bb6a7b442062f88b1
            admins:
              - f75b4b8208b24a009f8b6866352599e4
              - 0bd379888f08447298b2770ecd5617de
    UserContextPOST:
      required:
        - serviceAgreementId
      type: object
      properties:
        serviceAgreementId:
          $ref: '#/components/schemas/Uuid'
      example:
        serviceAgreementId: 37115f7b556a4e11ba0bfd07e2567b1d
    UserContextServiceAgreementsGET:
      type: array
      description: List of service agreement available for user context.
      example:
        - id: a1198a205a404eb7b47fa553db920429
          name: Online Banking Service Agreement
          description: Service Agreement between Online Banking and MicroSphere
          isMaster: false
        - id: 37115f7b556a4e11ba0bfd07e2567b1d
          name: Doe Corporation Service Agreement
          description: Service Agreement for Doe Corp.
          isMaster: true
      items:
        $ref: '#/components/schemas/Serviceagreementpartialitem'
    UsersForServiceAgreement:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/Uuid'
      example:
        users:
          - 4e4def6f-d7dc-40ef-9031-3a62938a859c
          - f7552b61-5f17-45d4-bdbe-fa3a12217bdd
    UsersGetResponseBody:
      required:
        - id
        - serviceAgreementId
        - userId
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        userId:
          $ref: '#/components/schemas/Uuid'
        serviceAgreementId:
          $ref: '#/components/schemas/Uuid'
        dataAccessGroupsByFunctionAccessGroup:
          type: array
          items:
            $ref: '#/components/schemas/Dataaccessgroupsforfunctionaccessgroupitem'
    ErrorItem:
      title: ErrorItem
      type: object
      properties:
        message:
          type: string
          description: Any further information.
        key:
          type: string
          description: "{capability-name}.api.{api-key-name}. For generated validation\
            \ errors this is the path in the document the error resolves to. e.g.\
            \ object name + '.' + field"
        context:
          type: object
          additionalProperties:
            type: string
          description: Context can be anything used to construct localised messages.
    BadRequestError:
      title: BadRequestError
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
    NotAcceptableError:
      title: NotAcceptableError
      type: object
      properties:
        message:
          type: string
        supportedMediaTypes:
          type: array
          description: List of supported media types for this endpoint
          items:
            type: string
    NotFoundError:
      title: NotFoundError
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
    ForbiddenError:
      title: ForbiddenError
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
    InternalServerError:
      title: InternalServerError
      type: object
      properties:
        message:
          type: string
          description: Further Information
      description: Represents HTTP 500 Internal Server Error
    UnauthorizedAltError:
      title: UnauthorizedError
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
    UnauthorizedError:
      title: UnauthorizedError
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
    UnsupportedMediaTypeError:
      title: UnsupportedMediaTypeError
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
    DataItemsPermissions:
      required:
        - dataItems
        - functionName
        - privilege
      type: object
      properties:
        functionName:
          type: string
          description: Name of the business function
        privilege:
          type: string
          description: Name of the privilege
        dataItems:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/DataItemIds'
    DataItemIds:
      required:
        - itemId
        - itemType
      type: object
      properties:
        itemId:
          type: string
          description: Data item id
        itemType:
          type: string
          description: Data item type
    PermissionsRequest:
      required:
        - dataGroupTypes
      type: object
      properties:
        dataGroupTypes:
          minItems: 1
          type: array
          items:
            type: string
            description: Data group type
        resourceName:
          type: string
          description: Resource name
        functionNames:
          type: array
          items:
            type: string
            description: Business function name
        privileges:
          type: array
          items:
            type: string
            description: Privilege
      description: User context data group permissions request
      example:
        dataGroupTypes:
          - ARRANGEMENTS
          - PAYEES
        resourceName: Entitlements
        functionNames:
          - SEPA CT
          - Manage Legal Entities
        privileges:
          - view
          - edit
    PermissionsDataGroup:
      type: object
      properties:
        permissionsData:
          type: array
          items:
            $ref: '#/components/schemas/PermissionDataGroup'
        dataGroupsData:
          type: array
          items:
            $ref: '#/components/schemas/DataGroupData'
      description: User context data group permissions request
      example:
        permissionsData:
          - permissions:
              - resourceName: Payments
                functionName: SEPA CT
                privileges:
                  - view
              - resourceName: Payments
                functionName: Domestic Payments
                privileges:
                  - view
                  - create
            dataGroups:
              - - dataGroupType: ARRANGAMENTS
                  dataGroupIds:
                    - a9393b23-62f5-4f07-ae8f-ba0dbea86c36
                - dataGroupType: PAYEES
                  dataGroupIds:
                    - a29c3cf2-9bda-41ee-8998-031f594a66b4
              - - dataGroupType: ARRANGEMENTS
                  dataGroupIds:
                    - f6677897-7a75-4bd5-8fc4-25695ca5b4de
          - permissions:
              - resourceName: Payments
                functionName: Domestic Payments
                privileges:
                  - create
            dataGroups:
              - - dataGroupType: ARRANGEMENTS
                  dataGroupIds:
                    - f6677897-7a75-4bd5-8fc4-25695ca5b4de
        dataGroupsData:
          - dataGroupId: a9393b23-62f5-4f07-ae8f-ba0dbea86c36
            dataItemIds:
              - d308ae19-d170-4967-b185-dceb8d356cfa
          - dataGroupId: a29c3cf2-9bda-41ee-8998-031f594a66b4
            dataItemIds:
              - 66893fed-bbbb-42d6-a5c3-320b6d4a781f
          - dataGroupId: f6677897-7a75-4bd5-8fc4-25695ca5b4de
            dataItemIds:
              - d0c8dd02-99be-46e9-8ff0-8021a71552a7
    PermissionDataGroup:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionData'
        dataGroups:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/PermissionDataGroupData'
      description: User context data group permissions request
    PermissionData:
      type: object
      properties:
        resourceName:
          type: string
          description: Resource name
        functionName:
          type: string
          description: Business function name
        privileges:
          type: array
          items:
            type: string
            description: privilege
      description: Permission data
      example:
        resourceName: Payments
        functionName: SEPA CT
        privileges:
          - view
          - create
    PermissionDataGroupData:
      type: object
      properties:
        dataGroupType:
          type: string
          description: Data group type
        dataGroupIds:
          type: array
          items:
            $ref: '#/components/schemas/Uuid'
      description: Permissions data group
      example:
        dataGroupType: ARRANGEMENTS
        dataGroupIds:
          - 0955e686d31e4216b3dd5d66161d536d
          - ea0de686d31e4216b3dd5d66161d615a
    DataGroupData:
      type: object
      properties:
        dataGroupId:
          $ref: '#/components/schemas/Uuid'
        dataItemIds:
          type: array
          items:
            maxLength: 64
            minLength: 1
            type: string
            description: Data item id
      description: Data group data
      example:
        dataGroupId: 0955e686d31e4216b3dd5d66161d536d
        dataItemIds:
          - 1cdb2224-8926-4b4d-a99f-1c9dfbbb4615
          - 1cdb2224-8926-4b4d-a99f-1c9dfbbb4611
    UsersWithAssignedFunctionGroupResponse:
      type: array
      example:
        - id: 0a234cb5-c7c8-4024-a60e-f448fa368380
        - id: 6eeddae1-be31-4ccb-8d8a-a5b408b55ab8
      items:
        $ref: '#/components/schemas/UserAssignedFunctionGroupResponse'
    UserAssignedFunctionGroupResponse:
      required:
        - id
      type: object
      description: User with assigned function group
      example:
        id: f57ed0ea-65ab-4620-a42a-d00a0521bbb9
      allOf:
        - $ref: '#/components/schemas/AdditionalPropertiesAware'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
    error-item:
      title: ErrorItem
      type: object
      properties:
        message:
          type: string
          description: Any further information.
        key:
          type: string
          description: "{capability-name}.api.{api-key-name}. For generated validation\
            \ errors this is the path in the document the error resolves to. e.g.\
            \ object name + '.' + field"
        context:
          type: object
          additionalProperties:
            type: string
          description: Context can be anything used to construct localised messages.
    bad-request-error:
      title: BadRequestError
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
    not-acceptable-error:
      title: NotAcceptableError
      type: object
      properties:
        message:
          type: string
        supportedMediaTypes:
          type: array
          description: List of supported media types for this endpoint
          items:
            type: string
    not-found-error:
      title: NotFoundError
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
    forbidden-error:
      title: ForbiddenError
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
    internal-server-error:
      title: InternalServerError
      type: object
      properties:
        message:
          type: string
          description: Further Information
      description: Represents HTTP 500 Internal Server Error
    unauthorized-error:
      title: UnauthorizedError
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
    unsupported-media-type-error:
      title: UnsupportedMediaTypeError
      type: object
      properties:
        message:
          type: string
          description: Any further information
        errors:
          type: array
          description: Detailed error information
          items:
            $ref: '#/components/schemas/error-item'
  examples: { }
