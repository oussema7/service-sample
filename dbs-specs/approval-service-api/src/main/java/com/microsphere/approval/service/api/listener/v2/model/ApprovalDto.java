/*
 * Approvals service
 * Other services approve or reject approvals, and update approval types, policies, and policy assignments.
 *
 * The version of the OpenAPI document: 2.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */


package com.microsphere.approval.service.api.listener.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.microsphere.approval.service.api.listener.v2.model.ApprovalStatus;
import com.microsphere.approval.service.api.listener.v2.model.RecordDto;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * An approval request that holds all the details of a single item to be approved.
 */
@ApiModel(description = "An approval request that holds all the details of a single item to be approved.")
@JsonPropertyOrder({
  ApprovalDto.JSON_PROPERTY_ID,
  ApprovalDto.JSON_PROPERTY_USER_ID,
  ApprovalDto.JSON_PROPERTY_SERVICE_AGREEMENT_ID,
  ApprovalDto.JSON_PROPERTY_ITEM_ID,
  ApprovalDto.JSON_PROPERTY_DATA_ACCESS_ITEM_ID,
  ApprovalDto.JSON_PROPERTY_RESOURCE,
  ApprovalDto.JSON_PROPERTY_FUNCTION,
  ApprovalDto.JSON_PROPERTY_STATUS,
  ApprovalDto.JSON_PROPERTY_RECORDS,
  ApprovalDto.JSON_PROPERTY_CAN_APPROVE,
  ApprovalDto.JSON_PROPERTY_CAN_REJECT,
  ApprovalDto.JSON_PROPERTY_FINAL_APPROVER,
  ApprovalDto.JSON_PROPERTY_ACTION,
  ApprovalDto.JSON_PROPERTY_CREATED_AT,
  ApprovalDto.JSON_PROPERTY_EXTERNAL_USER_ID,
  ApprovalDto.JSON_PROPERTY_USER_FULL_NAME,
  ApprovalDto.JSON_PROPERTY_ADDITIONS
})
@javax.annotation.Generated(value = "com.backbase.oss.codegen.java.BoatJavaCodeGen", date = "2024-11-14T00:08:49.266495+01:00[Africa/Tunis]")
public  class ApprovalDto {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  private String userId;

  public static final String JSON_PROPERTY_SERVICE_AGREEMENT_ID = "serviceAgreementId";
  private String serviceAgreementId;

  public static final String JSON_PROPERTY_ITEM_ID = "itemId";
  private String itemId;

  public static final String JSON_PROPERTY_DATA_ACCESS_ITEM_ID = "dataAccessItemId";
  private String dataAccessItemId;

  public static final String JSON_PROPERTY_RESOURCE = "resource";
  private String resource;

  public static final String JSON_PROPERTY_FUNCTION = "function";
  private String function;

  public static final String JSON_PROPERTY_STATUS = "status";
  private ApprovalStatus status;

  public static final String JSON_PROPERTY_RECORDS = "records";
  private List<RecordDto> records = new ArrayList<>();

  public static final String JSON_PROPERTY_CAN_APPROVE = "canApprove";
  private Boolean canApprove;

  public static final String JSON_PROPERTY_CAN_REJECT = "canReject";
  private Boolean canReject;

  public static final String JSON_PROPERTY_FINAL_APPROVER = "finalApprover";
  private Boolean finalApprover;

  public static final String JSON_PROPERTY_ACTION = "action";
  private String action;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_EXTERNAL_USER_ID = "externalUserId";
  private String externalUserId;

  public static final String JSON_PROPERTY_USER_FULL_NAME = "userFullName";
  private String userFullName;

  public static final String JSON_PROPERTY_ADDITIONS = "additions";
  private Map<String, String> additions = null;


  public ApprovalDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Universal Unique Identifier, 
   * @return id
  **/
  @NotNull
 @Pattern(regexp="^[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[1-5][0-9a-fA-F]{3}-?[89abAB][0-9a-fA-F]{3}-?[0-9a-fA-F]{12}$")  @ApiModelProperty(required = true, value = "Universal Unique Identifier, ")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public ApprovalDto userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * A simple definition for an internal identifier. Can be UUID but doesn&#39;t have to.
   * @return userId
  **/
  @NotNull
 @Size(min=1,max=36)  @ApiModelProperty(required = true, value = "A simple definition for an internal identifier. Can be UUID but doesn't have to.")
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    this.userId = userId;
  }


  public ApprovalDto serviceAgreementId(String serviceAgreementId) {
    
    this.serviceAgreementId = serviceAgreementId;
    return this;
  }

   /**
   * A simple definition for an internal identifier. Can be UUID but doesn&#39;t have to.
   * @return serviceAgreementId
  **/
  @NotNull
 @Size(min=1,max=36)  @ApiModelProperty(required = true, value = "A simple definition for an internal identifier. Can be UUID but doesn't have to.")
  @JsonProperty(JSON_PROPERTY_SERVICE_AGREEMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getServiceAgreementId() {
    return serviceAgreementId;
  }


  public void setServiceAgreementId(String serviceAgreementId) {
    this.serviceAgreementId = serviceAgreementId;
  }


  public ApprovalDto itemId(String itemId) {
    
    this.itemId = itemId;
    return this;
  }

   /**
   * A simple definition for an internal identifier. Can be UUID but doesn&#39;t have to.
   * @return itemId
  **/
  @NotNull
 @Size(min=1,max=36)  @ApiModelProperty(required = true, value = "A simple definition for an internal identifier. Can be UUID but doesn't have to.")
  @JsonProperty(JSON_PROPERTY_ITEM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getItemId() {
    return itemId;
  }


  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public ApprovalDto dataAccessItemId(String dataAccessItemId) {
    
    this.dataAccessItemId = dataAccessItemId;
    return this;
  }

   /**
   * A simple definition for an internal identifier. Can be UUID but doesn&#39;t have to.
   * @return dataAccessItemId
  **/
  @javax.annotation.Nullable
 @Size(min=1,max=36)  @ApiModelProperty(value = "A simple definition for an internal identifier. Can be UUID but doesn't have to.")
  @JsonProperty(JSON_PROPERTY_DATA_ACCESS_ITEM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDataAccessItemId() {
    return dataAccessItemId;
  }


  public void setDataAccessItemId(String dataAccessItemId) {
    this.dataAccessItemId = dataAccessItemId;
  }


  public ApprovalDto resource(String resource) {
    
    this.resource = resource;
    return this;
  }

   /**
   * This is the name of the resource.
   * @return resource
  **/
  @NotNull
 @Size(max=32)  @ApiModelProperty(required = true, value = "This is the name of the resource.")
  @JsonProperty(JSON_PROPERTY_RESOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getResource() {
    return resource;
  }


  public void setResource(String resource) {
    this.resource = resource;
  }


  public ApprovalDto function(String function) {
    
    this.function = function;
    return this;
  }

   /**
   * This is the name of the business function.
   * @return function
  **/
  @NotNull
 @Size(max=32)  @ApiModelProperty(required = true, value = "This is the name of the business function.")
  @JsonProperty(JSON_PROPERTY_FUNCTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFunction() {
    return function;
  }


  public void setFunction(String function) {
    this.function = function;
  }


  public ApprovalDto status(ApprovalStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ApprovalStatus getStatus() {
    return status;
  }


  public void setStatus(ApprovalStatus status) {
    this.status = status;
  }


  public ApprovalDto records(List<RecordDto> records) {
    
    this.records = records;
    return this;
  }

  public ApprovalDto addRecordsItem(RecordDto recordsItem) {
    this.records.add(recordsItem);
    return this;
  }

   /**
   * A list of records of all the actions users may have performed on the approval request.
   * @return records
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "A list of records of all the actions users may have performed on the approval request.")
  @JsonProperty(JSON_PROPERTY_RECORDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<RecordDto> getRecords() {
    return records;
  }


  public void setRecords(List<RecordDto> records) {
    this.records = records;
  }


  public ApprovalDto canApprove(Boolean canApprove) {
    
    this.canApprove = canApprove;
    return this;
  }

   /**
   * This flag indicates if the user (with his current context) that is requesting the approval can approve it, depending on the policy that applies.
   * @return canApprove
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This flag indicates if the user (with his current context) that is requesting the approval can approve it, depending on the policy that applies.")
  @JsonProperty(JSON_PROPERTY_CAN_APPROVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanApprove() {
    return canApprove;
  }


  public void setCanApprove(Boolean canApprove) {
    this.canApprove = canApprove;
  }


  public ApprovalDto canReject(Boolean canReject) {
    
    this.canReject = canReject;
    return this;
  }

   /**
   * This flag indicates if the user (with his current context) that is requesting the approval can reject it, depending on the policy that applies.
   * @return canReject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This flag indicates if the user (with his current context) that is requesting the approval can reject it, depending on the policy that applies.")
  @JsonProperty(JSON_PROPERTY_CAN_REJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanReject() {
    return canReject;
  }


  public void setCanReject(Boolean canReject) {
    this.canReject = canReject;
  }


  public ApprovalDto finalApprover(Boolean finalApprover) {
    
    this.finalApprover = finalApprover;
    return this;
  }

   /**
   * This flag indicates if the user (with his current context) is the final approver that is needed.
   * @return finalApprover
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This flag indicates if the user (with his current context) is the final approver that is needed.")
  @JsonProperty(JSON_PROPERTY_FINAL_APPROVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFinalApprover() {
    return finalApprover;
  }


  public void setFinalApprover(Boolean finalApprover) {
    this.finalApprover = finalApprover;
  }


  public ApprovalDto action(String action) {
    
    this.action = action;
    return this;
  }

   /**
   * The action of the approval request
   * @return action
  **/
  @javax.annotation.Nullable
 @Size(max=20)  @ApiModelProperty(value = "The action of the approval request")
  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    this.action = action;
  }


  public ApprovalDto createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The timestamp indicates when the object was created.
   * @return createdAt
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "The timestamp indicates when the object was created.")
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ApprovalDto externalUserId(String externalUserId) {
    
    this.externalUserId = externalUserId;
    return this;
  }

   /**
   * The (unique and human readable) external user id of the user.
   * @return externalUserId
  **/
  @javax.annotation.Nullable
 @Size(max=64)  @ApiModelProperty(value = "The (unique and human readable) external user id of the user.")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExternalUserId() {
    return externalUserId;
  }


  public void setExternalUserId(String externalUserId) {
    this.externalUserId = externalUserId;
  }


  public ApprovalDto userFullName(String userFullName) {
    
    this.userFullName = userFullName;
    return this;
  }

   /**
   * The full name of a user.
   * @return userFullName
  **/
  @javax.annotation.Nullable
 @Size(min=1,max=255)  @ApiModelProperty(value = "The full name of a user.")
  @JsonProperty(JSON_PROPERTY_USER_FULL_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserFullName() {
    return userFullName;
  }


  public void setUserFullName(String userFullName) {
    this.userFullName = userFullName;
  }


  public ApprovalDto additions(Map<String, String> additions) {
    
    this.additions = additions;
    return this;
  }

  public ApprovalDto putAdditionsItem(String key, String additionsItem) {
    if (this.additions == null) {
      this.additions = new HashMap<>();
    }
    this.additions.put(key, additionsItem);
    return this;
  }

   /**
   * Additional properties
   * @return additions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional properties")
  @JsonProperty(JSON_PROPERTY_ADDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getAdditions() {
    return additions;
  }


  public void setAdditions(Map<String, String> additions) {
    this.additions = additions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalDto approvalDto = (ApprovalDto) o;
    return Objects.equals(this.id, approvalDto.id) &&
        Objects.equals(this.userId, approvalDto.userId) &&
        Objects.equals(this.serviceAgreementId, approvalDto.serviceAgreementId) &&
        Objects.equals(this.itemId, approvalDto.itemId) &&
        Objects.equals(this.dataAccessItemId, approvalDto.dataAccessItemId) &&
        Objects.equals(this.resource, approvalDto.resource) &&
        Objects.equals(this.function, approvalDto.function) &&
        Objects.equals(this.status, approvalDto.status) &&
        Objects.equals(this.records, approvalDto.records) &&
        Objects.equals(this.canApprove, approvalDto.canApprove) &&
        Objects.equals(this.canReject, approvalDto.canReject) &&
        Objects.equals(this.finalApprover, approvalDto.finalApprover) &&
        Objects.equals(this.action, approvalDto.action) &&
        Objects.equals(this.createdAt, approvalDto.createdAt) &&
        Objects.equals(this.externalUserId, approvalDto.externalUserId) &&
        Objects.equals(this.userFullName, approvalDto.userFullName) &&
        Objects.equals(this.additions, approvalDto.additions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, serviceAgreementId, itemId, dataAccessItemId, resource, function, status, records, canApprove, canReject, finalApprover, action, createdAt, externalUserId, userFullName, additions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    serviceAgreementId: ").append(toIndentedString(serviceAgreementId)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    dataAccessItemId: ").append(toIndentedString(dataAccessItemId)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    function: ").append(toIndentedString(function)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    canApprove: ").append(toIndentedString(canApprove)).append("\n");
    sb.append("    canReject: ").append(toIndentedString(canReject)).append("\n");
    sb.append("    finalApprover: ").append(toIndentedString(finalApprover)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    externalUserId: ").append(toIndentedString(externalUserId)).append("\n");
    sb.append("    userFullName: ").append(toIndentedString(userFullName)).append("\n");
    sb.append("    additions: ").append(toIndentedString(additions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

