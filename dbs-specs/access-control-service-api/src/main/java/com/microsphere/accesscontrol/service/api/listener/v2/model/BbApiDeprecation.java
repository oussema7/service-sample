/*
 * Access Control service API
 * Manage user permissions, data groups, function groups and service agreements from service to service side
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */


package com.microsphere.accesscontrol.service.api.listener.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * BbApiDeprecation
 */
@JsonPropertyOrder({
  BbApiDeprecation.JSON_PROPERTY_DEPRECATED_FROM_VERSION,
  BbApiDeprecation.JSON_PROPERTY_REMOVED_FROM_VERSION,
  BbApiDeprecation.JSON_PROPERTY_REASON,
  BbApiDeprecation.JSON_PROPERTY_DESCRIPTION
})
@javax.annotation.Generated(value = "com.backbase.oss.codegen.java.BoatJavaCodeGen", date = "2024-11-14T00:08:27.444046600+01:00[Africa/Tunis]")
public  class BbApiDeprecation {
  public static final String JSON_PROPERTY_DEPRECATED_FROM_VERSION = "deprecatedFromVersion";
  private String deprecatedFromVersion;

  public static final String JSON_PROPERTY_REMOVED_FROM_VERSION = "removedFromVersion";
  private String removedFromVersion;

  public static final String JSON_PROPERTY_REASON = "reason";
  private String reason;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;


  public BbApiDeprecation deprecatedFromVersion(String deprecatedFromVersion) {
    
    this.deprecatedFromVersion = deprecatedFromVersion;
    return this;
  }

   /**
   * Version of the product from which the endpoint has been deprecated and should no longer be used
   * @return deprecatedFromVersion
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "Version of the product from which the endpoint has been deprecated and should no longer be used")
  @JsonProperty(JSON_PROPERTY_DEPRECATED_FROM_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDeprecatedFromVersion() {
    return deprecatedFromVersion;
  }


  public void setDeprecatedFromVersion(String deprecatedFromVersion) {
    this.deprecatedFromVersion = deprecatedFromVersion;
  }


  public BbApiDeprecation removedFromVersion(String removedFromVersion) {
    
    this.removedFromVersion = removedFromVersion;
    return this;
  }

   /**
   * Version of the product from which the API endpoint will be removed
   * @return removedFromVersion
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "Version of the product from which the API endpoint will be removed")
  @JsonProperty(JSON_PROPERTY_REMOVED_FROM_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRemovedFromVersion() {
    return removedFromVersion;
  }


  public void setRemovedFromVersion(String removedFromVersion) {
    this.removedFromVersion = removedFromVersion;
  }


  public BbApiDeprecation reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * The reason the API endpoint was deprecated
   * @return reason
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The reason the API endpoint was deprecated")
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  public BbApiDeprecation description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Any further information, e.g. migration information
   * @return description
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "Any further information, e.g. migration information")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BbApiDeprecation bbApiDeprecation = (BbApiDeprecation) o;
    return Objects.equals(this.deprecatedFromVersion, bbApiDeprecation.deprecatedFromVersion) &&
        Objects.equals(this.removedFromVersion, bbApiDeprecation.removedFromVersion) &&
        Objects.equals(this.reason, bbApiDeprecation.reason) &&
        Objects.equals(this.description, bbApiDeprecation.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecatedFromVersion, removedFromVersion, reason, description);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BbApiDeprecation {\n");
    sb.append("    deprecatedFromVersion: ").append(toIndentedString(deprecatedFromVersion)).append("\n");
    sb.append("    removedFromVersion: ").append(toIndentedString(removedFromVersion)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

