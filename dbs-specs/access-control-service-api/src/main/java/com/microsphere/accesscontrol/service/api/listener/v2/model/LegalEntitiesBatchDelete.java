/*
 * Access Control service API
 * Manage user permissions, data groups, function groups and service agreements from service to service side
 *
 * The version of the OpenAPI document: 2.11.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */


package com.microsphere.accesscontrol.service.api.listener.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;
import org.hibernate.validator.constraints.*;

/**
 * LegalEntitiesBatchDelete
 */
@JsonPropertyOrder({
  LegalEntitiesBatchDelete.JSON_PROPERTY_EXTERNAL_IDS,
  LegalEntitiesBatchDelete.JSON_PROPERTY_ACCESS_TOKEN
})
@javax.annotation.Generated(value = "com.backbase.oss.codegen.java.BoatJavaCodeGen", date = "2024-11-14T00:08:27.444046600+01:00[Africa/Tunis]")
public  class LegalEntitiesBatchDelete {
  public static final String JSON_PROPERTY_EXTERNAL_IDS = "externalIds";
  private List<String> externalIds = new ArrayList<>();

  public static final String JSON_PROPERTY_ACCESS_TOKEN = "accessToken";
  private String accessToken;


  public LegalEntitiesBatchDelete externalIds(List<String> externalIds) {
    
    this.externalIds = externalIds;
    return this;
  }

  public LegalEntitiesBatchDelete addExternalIdsItem(String externalIdsItem) {
    this.externalIds.add(externalIdsItem);
    return this;
  }

   /**
   * Get externalIds
   * @return externalIds
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EXTERNAL_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getExternalIds() {
    return externalIds;
  }


  public void setExternalIds(List<String> externalIds) {
    this.externalIds = externalIds;
  }


  public LegalEntitiesBatchDelete accessToken(String accessToken) {
    
    this.accessToken = accessToken;
    return this;
  }

   /**
   * Universally Unique IDentifier.
   * @return accessToken
  **/
  @javax.annotation.Nullable
 @Pattern(regexp="^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$") @Size(min=1,max=36)  @ApiModelProperty(value = "Universally Unique IDentifier.")
  @JsonProperty(JSON_PROPERTY_ACCESS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccessToken() {
    return accessToken;
  }


  public void setAccessToken(String accessToken) {
    this.accessToken = accessToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalEntitiesBatchDelete legalEntitiesBatchDelete = (LegalEntitiesBatchDelete) o;
    return Objects.equals(this.externalIds, legalEntitiesBatchDelete.externalIds) &&
        Objects.equals(this.accessToken, legalEntitiesBatchDelete.accessToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalIds, accessToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalEntitiesBatchDelete {\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

